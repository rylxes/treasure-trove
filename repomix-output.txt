This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.bolt/
  config.json
  prompt
public/
  sw.js
src/
  components/
    admin/
      CategoryManager.tsx
      ElasticsearchStatus.tsx
      SearchRecommendationsControls.tsx
    ui/
      Toaster.tsx
    AddToCollection.tsx
    AIRecommendations.tsx
    Collections.tsx
    EnhancedSavedSearches.tsx
    FollowSellerButton.tsx
    Footer.tsx
    Navbar.tsx
    PriceAlertButton.tsx
    PriceHistory.tsx
    RecentlyViewedItems.tsx
    SavedSearches.tsx
    SearchHighlight.tsx
    SearchResultItem.tsx
    ShareListing.tsx
    SimilarItems.tsx
    StockAlertButton.tsx
    StockStatus.tsx
    UpdateStockStatus.tsx
    WishListButton.tsx
    WishlistCount.tsx
  contexts/
    AuthContext.tsx
  hooks/
    useAnalytics.ts
  lib/
    elasticsearch.ts
    pushNotifications.ts
    recommendations.ts
    supabase.ts
  pages/
    Admin.tsx
    Auth.tsx
    Browse.tsx
    CreateListing.tsx
    Home.tsx
    ItemDetails.tsx
    Messages.tsx
    Notifications.tsx
    PriceAlerts.tsx
    Profile.tsx
    SavedSearchAlerts.tsx
    Settings.tsx
    StockAlerts.tsx
    Wishlist.tsx
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  functions/
    scheduled-tasks.ts
  migrations/
    20250225220246_foggy_sun.sql
    20250225221149_precious_plain.sql
    20250225221437_golden_sun.sql
    20250225221859_rustic_valley.sql
    20250225222005_foggy_stream.sql
    20250225225931_divine_haze.sql
    20250225230737_light_salad.sql
    20250225230929_noisy_wind.sql
    20250225231227_dry_spire.sql
    20250225231551_sweet_sunset.sql
    20250225231924_aged_bonus.sql
    20250225232013_bronze_jungle.sql
    20250225232303_mellow_bird.sql
    20250225232443_little_trail.sql
    20250225232719_flat_bridge.sql
    20250302123215_elastic_search.sql
    20250302123245_ai_recommentations.sql
    20250302124758_elastic_search_connection.sql
    20250302132733_fix_ai_recommentations.sql
    20250302133117_fix_pg_trgm.sql
    20250302133350_fix_position_error.sql
    20250302140520_add_follow_sellers.sql
    20250302140802_add_saved_searches.sql
    20250302140945_add_collections.sql
    20250302141125_add_category_management.sql
    20250302153606_fix_admin_manage_category_ambiguity.sql
    20250302154350_add_updated_at_to_categories.sql
    20250302160147_add_wish_list_items.sql
    20250302160432_add_price_history.sql
    20250302160910_add_Back-in-Stock.sql
    20250302161629_add_saved_searches.sql
    20250302163455_get_saved_searches_with_alerts.sql
    20250302164205_get_saved_search_matches.sql
    20250302164428_get_saved_search_matches.sql
    20250302164909_get_saved_search_matches.sql
    20250302170800_fix_http.sql
  .gitignore
  config.toml
.gitignore
elastic-search.md
eslint.config.js
index.html
package.json
postcss.config.js
README-New-Features.md
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .bolt/config.json
================
{
  "template": "bolt-vite-react-ts"
}

================
File: .bolt/prompt
================
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.

================
File: public/sw.js
================
self.addEventListener('push', event => {
  const data = event.data.json();
  
  self.registration.showNotification(data.title, {
    body: data.body,
    icon: '/icon.png',
    badge: '/badge.png',
    data: data.url
  });
});

self.addEventListener('notificationclick', event => {
  event.notification.close();
  event.waitUntil(
    clients.openWindow(event.notification.data)
  );
});

================
File: src/components/admin/CategoryManager.tsx
================
// src/components/admin/CategoryManager.tsx
import React, {useState, useEffect} from 'react';
import {Tag, Plus, Edit, Trash2} from 'lucide-react';
import {manageCategory, getCategories} from '../../lib/supabase';

export function CategoryManager() {
    const [categories, setCategories] = useState<any[]>([]);
    const [newCategory, setNewCategory] = useState({name: '', slug: '', parentId: ''});
    const [editingId, setEditingId] = useState<string | null>(null);

    useEffect(() => {
        fetchCategories();
    }, []);

    async function fetchCategories() {
        try {
            const data = await getCategories();
            setCategories(data);
        } catch (error) {
            console.error('Error fetching categories:', error);
        }
    }

    async function handleSaveCategory() {
        try {
            if (editingId) {
                await manageCategory('update', {
                    id: editingId,
                    name: newCategory.name,
                    slug: newCategory.slug,
                    parentId: newCategory.parentId || undefined,
                });
                setEditingId(null);
            } else {
                await manageCategory('create', {
                    name: newCategory.name,
                    slug: newCategory.slug,
                    parentId: newCategory.parentId || undefined,
                });
            }
            setNewCategory({name: '', slug: '', parentId: ''});
            fetchCategories();
        } catch (error) {
            console.error('Error saving category:', error);
        }
    }

    async function handleDeleteCategory(id: string) {
        try {
            await manageCategory('delete', {id, name: '', slug: ''});
            fetchCategories();
        } catch (error) {
            console.error('Error deleting category:', error);
        }
    }

    function startEditing(category: any) {
        setEditingId(category.id);
        setNewCategory({
            name: category.name,
            slug: category.slug,
            parentId: category.parent_id || '',
        });
    }

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-xl font-bold mb-4">Category Management</h2>

            {/* Category Form */}
            <div className="mb-6 flex gap-4">
                <input
                    type="text"
                    placeholder="Category name"
                    value={newCategory.name}
                    onChange={e => setNewCategory({...newCategory, name: e.target.value})}
                    className="flex-1 p-2 border rounded"
                />
                <input
                    type="text"
                    placeholder="Slug"
                    value={newCategory.slug}
                    onChange={e => setNewCategory({...newCategory, slug: e.target.value})}
                    className="flex-1 p-2 border rounded"
                />
                <select
                    value={newCategory.parentId}
                    onChange={e => setNewCategory({...newCategory, parentId: e.target.value})}
                    className="p-2 border rounded"
                >
                    <option value="">No Parent</option>
                    {categories.map(c => (
                        <option key={c.id} value={c.id}>{c.name}</option>
                    ))}
                </select>
                <button
                    onClick={handleSaveCategory}
                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg"
                >
                    {editingId ? 'Update' : 'Create'}
                </button>
            </div>

            {/* Categories List */}
            <div className="space-y-2">
                {categories.map(category => (
                    <div key={category.id}
                         className="flex items-center justify-between border-b py-2">
                        <div className="flex items-center gap-2">
                            <Tag size={16}/>
                            <span>{category.name} ({category.slug})</span>
                            {category.parent_id && (
                                <span className="text-sm text-gray-500">
                  → {categories.find(c => c.id === category.parent_id)?.name}
                </span>
                            )}
                        </div>
                        <div className="flex gap-2">
                            <button
                                onClick={() => startEditing(category)}
                                className="text-indigo-600 hover:text-indigo-800"
                            >
                                <Edit size={16}/>
                            </button>
                            <button
                                onClick={() => handleDeleteCategory(category.id)}
                                className="text-red-600 hover:text-red-800"
                            >
                                <Trash2 size={16}/>
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

================
File: src/components/admin/ElasticsearchStatus.tsx
================
// src/components/admin/ElasticsearchStatus.tsx
import React, { useState, useEffect } from 'react';
import { checkElasticsearchStatus, ElasticsearchStatus as StatusType, testElasticsearchConnection } from '../../lib/elasticsearch';
import { Database, RefreshCw, CheckCircle, XCircle, AlertTriangle } from 'lucide-react';

export function ElasticsearchStatus() {
  const [status, setStatus] = useState<StatusType | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  useEffect(() => {
    fetchStatus();
  }, []);

  async function fetchStatus() {
    try {
      setLoading(true);
      const result = await checkElasticsearchStatus();
      setStatus(result);
    } catch (error) {
      console.error('Error fetching Elasticsearch status:', error);
    } finally {
      setLoading(false);
    }
  }

  async function handleRefresh() {
    try {
      setRefreshing(true);
      const result = await testElasticsearchConnection();
      setStatus(result);
    } catch (error) {
      console.error('Error testing Elasticsearch connection:', error);
    } finally {
      setRefreshing(false);
    }
  }

  if (loading) {
    return (
      <div className="bg-white p-4 rounded-lg shadow flex items-center gap-4">
        <div className="animate-spin">
          <RefreshCw size={20} />
        </div>
        <div>Checking Elasticsearch status...</div>
      </div>
    );
  }

  if (!status) {
    return (
      <div className="bg-white p-4 rounded-lg shadow flex items-center gap-4">
        <AlertTriangle size={20} className="text-yellow-500" />
        <div className="flex-1">Unable to determine Elasticsearch status</div>
        <button
          onClick={fetchStatus}
          className="px-3 py-1 bg-gray-100 rounded-lg hover:bg-gray-200 flex items-center gap-1"
        >
          <RefreshCw size={16} />
          Retry
        </button>
      </div>
    );
  }

  const isAvailable = status.available;
  const isConfigured = status.configured;

  return (
    <div className={`border p-4 rounded-lg shadow ${
      isAvailable 
        ? 'bg-green-50 border-green-200' 
        : isConfigured
          ? 'bg-yellow-50 border-yellow-200'
          : 'bg-gray-50 border-gray-200'
    }`}>
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-2">
          <Database size={20} className={isAvailable ? 'text-green-500' : 'text-gray-400'} />
          <h3 className="font-medium">Elasticsearch Status</h3>
        </div>
        <button
          onClick={handleRefresh}
          disabled={refreshing}
          className="p-1 rounded-full hover:bg-white/50 disabled:opacity-50"
        >
          <RefreshCw size={16} className={refreshing ? 'animate-spin' : ''} />
        </button>
      </div>

      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <div className="font-medium">Status:</div>
          <div className="flex items-center gap-1">
            {isAvailable ? (
              <>
                <CheckCircle size={16} className="text-green-500" />
                <span className="text-green-700">Available</span>
              </>
            ) : (
              <>
                <XCircle size={16} className="text-red-500" />
                <span className="text-red-700">Unavailable</span>
              </>
            )}
          </div>
        </div>

        <div className="flex items-center gap-2">
          <div className="font-medium">Search Mode:</div>
          <div className="px-2 py-0.5 rounded bg-white/50 text-sm">
            {isAvailable ? 'Elasticsearch' : 'Database Fallback'}
          </div>
        </div>

        {status.url && (
          <div className="text-sm text-gray-600">
            <span className="font-medium">URL:</span> {status.url}
          </div>
        )}

        {status.index && (
          <div className="text-sm text-gray-600">
            <span className="font-medium">Index:</span> {status.index}
          </div>
        )}

        {status.lastSync && (
          <div className="text-sm text-gray-600">
            <span className="font-medium">Last Sync:</span> {new Date(status.lastSync).toLocaleString()}
          </div>
        )}

        {status.error && (
          <div className="text-sm text-red-600 bg-red-50 p-2 rounded border border-red-100 mt-2">
            <span className="font-medium">Error:</span> {status.error}
          </div>
        )}

        {!isConfigured && (
          <div className="text-sm bg-blue-50 p-2 rounded border border-blue-100 mt-2">
            <span className="font-medium">Info:</span> Elasticsearch is not configured.
            The application will use optimized database queries for search functionality.
          </div>
        )}
      </div>
    </div>
  );
}

================
File: src/components/admin/SearchRecommendationsControls.tsx
================
// src/components/admin/SearchRecommendationsControls.tsx
import React, { useState } from 'react';
import { RefreshCw, Database, Sparkles, AlertTriangle } from 'lucide-react';
import { syncElasticsearch } from '../../lib/elasticsearch';
import { updateRecommendations } from '../../lib/recommendations';
import { ElasticsearchStatus } from './ElasticsearchStatus';

export function SearchRecommendationsControls() {
  const [loading, setLoading] = useState({
    elasticsearch: false,
    recommendations: false
  });
  const [result, setResult] = useState({
    status: '' as 'success' | 'error' | '',
    message: ''
  });

  async function handleSyncElasticsearch() {
    try {
      setLoading({ ...loading, elasticsearch: true });
      setResult({ status: '', message: '' });

      const response = await syncElasticsearch();

      setResult({
        status: 'success',
        message: `Elasticsearch sync initiated successfully: ${response}`
      });
    } catch (error) {
      console.error('Error syncing Elasticsearch:', error);
      setResult({
        status: 'error',
        message: `Error syncing Elasticsearch: ${error instanceof Error ? error.message : String(error)}`
      });
    } finally {
      setLoading({ ...loading, elasticsearch: false });
    }
  }

  async function handleUpdateRecommendations() {
    try {
      setLoading({ ...loading, recommendations: true });
      setResult({ status: '', message: '' });

      const response = await updateRecommendations();

      setResult({
        status: 'success',
        message: `Recommendations update initiated successfully: ${response}`
      });
    } catch (error) {
      console.error('Error updating recommendations:', error);
      setResult({
        status: 'error',
        message: `Error updating recommendations: ${error instanceof Error ? error.message : String(error)}`
      });
    } finally {
      setLoading({ ...loading, recommendations: false });
    }
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
      <h2 className="text-xl font-bold mb-4">Search & Recommendations</h2>

      {/* Elasticsearch Status */}
      <div className="mb-6">
        <ElasticsearchStatus />
      </div>

      {result.status && (
        <div className={`mb-4 p-4 rounded-lg ${
          result.status === 'success' 
            ? 'bg-green-50 text-green-700' 
            : 'bg-red-50 text-red-700'
        }`}>
          <div className="flex items-center gap-2">
            {result.status === 'success' ? (
              <RefreshCw size={18} className="text-green-500" />
            ) : (
              <AlertTriangle size={18} className="text-red-500" />
            )}
            <p>{result.message}</p>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="border rounded-lg p-4">
          <div className="flex items-center gap-2 mb-4">
            <Database size={20} className="text-indigo-600" />
            <h3 className="text-lg font-semibold">Elasticsearch</h3>
          </div>
          <p className="text-gray-600 mb-4">
            Sync all active items to Elasticsearch to ensure search results are up-to-date.
            This process runs automatically when items are created or updated, but a manual sync
            may be needed after system changes.
          </p>
          <button
            onClick={handleSyncElasticsearch}
            disabled={loading.elasticsearch}
            className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 w-full justify-center"
          >
            {loading.elasticsearch ? (
              <>
                <RefreshCw size={18} className="animate-spin" />
                Syncing...
              </>
            ) : (
              <>
                <RefreshCw size={18} />
                Sync Elasticsearch
              </>
            )}
          </button>
        </div>

        <div className="border rounded-lg p-4">
          <div className="flex items-center gap-2 mb-4">
            <Sparkles size={20} className="text-indigo-600" />
            <h3 className="text-lg font-semibold">Recommendations</h3>
          </div>
          <p className="text-gray-600 mb-4">
            Update AI-powered recommendations including similar items, personalized recommendations,
            and trending items. This process runs on a daily schedule but can be triggered manually.
          </p>
          <button
            onClick={handleUpdateRecommendations}
            disabled={loading.recommendations}
            className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 w-full justify-center"
          >
            {loading.recommendations ? (
              <>
                <Sparkles size={18} className="animate-pulse" />
                Updating...
              </>
            ) : (
              <>
                <Sparkles size={18} />
                Update Recommendations
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/ui/Toaster.tsx
================
import React from 'react';

export function Toaster() {
  return (
    <div
      id="toast-container"
      className="fixed bottom-4 right-4 z-50 flex flex-col gap-2"
      aria-live="polite"
    />
  );
}

================
File: src/components/AddToCollection.tsx
================
// src/components/AddToCollection.tsx
import React, {useState, useEffect} from 'react';
import {Plus} from 'lucide-react';
import {useAuth} from '../contexts/AuthContext';
import {addToCollection, getUserCollections} from '../lib/supabase';


interface AddToCollectionProps {
    itemId: string;
}

export function AddToCollection({itemId}: AddToCollectionProps) {
    const {user} = useAuth();
    const [collections, setCollections] = useState<any[]>([]);
    const [selectedCollection, setSelectedCollection] = useState('');

    useEffect(() => {
        if (user) fetchCollections();
    }, [user]);

    async function fetchCollections() {
        const data = await getUserCollections();
        setCollections(data);
    }

    async function handleAdd() {
        if (!selectedCollection) return;
        try {
            await addToCollection(selectedCollection, itemId);
            alert('Added to collection!');
        } catch (error) {
            console.error('Error adding to collection:', error);
        }
    }

    if (!user) return null;

    return (
        <div className="flex items-center gap-2">
            <select
                value={selectedCollection}
                onChange={e => setSelectedCollection(e.target.value)}
                className="p-2 border rounded"
            >
                <option value="">Select Collection</option>
                {collections.map(c => (
                    <option key={c.id} value={c.id}>{c.name}</option>
                ))}
            </select>
            <button
                onClick={handleAdd}
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg"
            >
                <Plus size={18}/>
            </button>
        </div>
    );
}

================
File: src/components/AIRecommendations.tsx
================
// src/components/AIRecommendations.tsx
import React, { useState, useEffect } from 'react';
import { getPersonalizedRecommendations, getPopularRecommendations, RecommendationItem } from '../lib/recommendations';
import { Sparkles, ChevronLeft, ChevronRight } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface AIRecommendationsProps {
  type?: 'personalized' | 'popular';
  limit?: number;
  title?: string;
}

export function AIRecommendations({
  type = 'personalized',
  limit = 10,
  title
}: AIRecommendationsProps) {
  const { user } = useAuth();
  const [items, setItems] = useState<RecommendationItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [containerWidth, setContainerWidth] = useState(0);
  const [contentWidth, setContentWidth] = useState(0);
  const containerRef = React.useRef<HTMLDivElement>(null);
  const contentRef = React.useRef<HTMLDivElement>(null);

  // Set default title based on type
  const defaultTitle = type === 'personalized'
    ? 'Recommended for You'
    : 'Popular Items';

  const displayTitle = title || defaultTitle;

  useEffect(() => {
    fetchRecommendations();

    // Add resize listener to update scroll capabilities
    const handleResize = () => {
      if (containerRef.current && contentRef.current) {
        setContainerWidth(containerRef.current.clientWidth);
        setContentWidth(contentRef.current.scrollWidth);
      }
    };

    window.addEventListener('resize', handleResize);

    // Call once to initialize
    setTimeout(handleResize, 100);

    return () => window.removeEventListener('resize', handleResize);
  }, [type, user]);

  async function fetchRecommendations() {
    try {
      setLoading(true);

      // Get recommendations based on type
      let data: RecommendationItem[];

      if (type === 'personalized' && user) {
        data = await getPersonalizedRecommendations(limit);
      } else {
        data = await getPopularRecommendations(limit);
      }

      setItems(data);
    } catch (error) {
      console.error('Error fetching recommendations:', error);
    } finally {
      setLoading(false);
    }
  }

  function handleScroll(direction: 'left' | 'right') {
    if (!containerRef.current) return;

    const containerWidth = containerRef.current.clientWidth;
    const scrollAmount = containerWidth * 0.8; // Scroll 80% of container width

    let newPosition = direction === 'left'
      ? Math.max(0, scrollPosition - scrollAmount)
      : Math.min(contentWidth - containerWidth, scrollPosition + scrollAmount);

    setScrollPosition(newPosition);

    if (containerRef.current) {
      containerRef.current.scrollTo({
        left: newPosition,
        behavior: 'smooth'
      });
    }
  }

  if (loading) {
    return (
      <div className="my-8">
        <div className="flex items-center gap-2 mb-4">
          <Sparkles size={18} className="text-indigo-600" />
          <h3 className="text-xl font-semibold">{displayTitle}</h3>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="aspect-square bg-gray-200 animate-pulse" />
              <div className="p-3">
                <div className="h-4 bg-gray-200 rounded animate-pulse mb-2" />
                <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (items.length === 0) {
    return null; // Don't show anything if no recommendations
  }

  const canScrollLeft = scrollPosition > 0;
  const canScrollRight = containerWidth && contentWidth ? scrollPosition < contentWidth - containerWidth : false;

  return (
    <div className="my-8">
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-2">
          <Sparkles size={18} className="text-indigo-600" />
          <h3 className="text-xl font-semibold">{displayTitle}</h3>
        </div>

        {/* Scroll controls */}
        {(canScrollLeft || canScrollRight) && (
          <div className="flex gap-2">
            <button
              onClick={() => handleScroll('left')}
              disabled={!canScrollLeft}
              className="p-1 rounded-full border disabled:opacity-30 disabled:cursor-not-allowed"
            >
              <ChevronLeft size={20} />
            </button>
            <button
              onClick={() => handleScroll('right')}
              disabled={!canScrollRight}
              className="p-1 rounded-full border disabled:opacity-30 disabled:cursor-not-allowed"
            >
              <ChevronRight size={20} />
            </button>
          </div>
        )}
      </div>

      {/* Scrollable container */}
      <div
        className="overflow-x-auto scrollbar-hide pb-4"
        ref={containerRef}
        onScroll={(e) => setScrollPosition(e.currentTarget.scrollLeft)}
      >
        <div
          className="flex gap-4"
          ref={contentRef}
          style={{ width: 'max-content' }}
        >
          {items.map((item) => (
            <a
              key={item.id}
              href={`/items/${item.id}`}
              className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow w-44 md:w-56 flex-shrink-0"
            >
              <div className="aspect-square relative">
                <img
                  src={item.images[0] || 'https://via.placeholder.com/400'}
                  alt={item.title}
                  className="w-full h-full object-cover"
                />
                <div className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                  ${item.price}
                </div>
                {type === 'personalized' && (
                  <div className="absolute bottom-2 left-2 bg-indigo-600 text-white px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1">
                    <Sparkles size={12} />
                    For You
                  </div>
                )}
              </div>
              <div className="p-3">
                <h4 className="font-medium text-sm mb-1 truncate">
                  {item.title}
                </h4>
                <div className="flex justify-between items-center text-xs text-gray-600">
                  <span>{item.condition.replace('_', ' ')}</span>
                  {item.recommendation_score && (
                    <span className="text-indigo-600 font-medium">
                      {Math.round(item.recommendation_score * 100)}% match
                    </span>
                  )}
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/components/Collections.tsx
================
// src/components/Collections.tsx
import React, {useState, useEffect} from 'react';
import {Bookmark} from 'lucide-react';
import {useAuth} from '../contexts/AuthContext';
import {createCollection, getUserCollections} from '../lib/supabase';

export function Collections() {
    const {user} = useAuth();
    const [collections, setCollections] = useState<any[]>([]);
    const [newCollection, setNewCollection] = useState({
        name: '',
        description: '',
        isPublic: false
    });

    useEffect(() => {
        if (user) fetchCollections();
    }, [user]);

    async function fetchCollections() {
        try {
            const data = await getUserCollections();
            setCollections(data);
        } catch (error) {
            console.error('Error fetching collections:', error);
        }
    }

    async function handleCreateCollection() {
        if (!user) return; // Ensure user is authenticated
        try {
            await createCollection(user.id, newCollection.name, newCollection.description, newCollection.isPublic);
            setNewCollection({name: '', description: '', isPublic: false});
            fetchCollections();
        } catch (error) {
            console.error('Error creating collection:', error);
        }
    }

    if (!user) return null;

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-xl font-bold mb-4">Your Collections</h2>

            {/* New Collection Form */}
            <div className="mb-6 flex gap-4">
                <input
                    type="text"
                    placeholder="Collection name"
                    value={newCollection.name}
                    onChange={e => setNewCollection({...newCollection, name: e.target.value})}
                    className="flex-1 p-2 border rounded"
                />
                <input
                    type="text"
                    placeholder="Description"
                    value={newCollection.description}
                    onChange={e => setNewCollection({
                        ...newCollection,
                        description: e.target.value
                    })}
                    className="flex-1 p-2 border rounded"
                />
                <label className="flex items-center gap-1">
                    <input
                        type="checkbox"
                        checked={newCollection.isPublic}
                        onChange={e => setNewCollection({
                            ...newCollection,
                            isPublic: e.target.checked
                        })}
                    />
                    Public
                </label>
                <button
                    onClick={handleCreateCollection}
                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg"
                >
                    Create
                </button>
            </div>

            {/* Collections List */}
            <div className="space-y-4">
                {collections.map(collection => (
                    <div key={collection.id} className="border-b pb-4">
                        <div className="flex items-center gap-2 mb-2">
                            <Bookmark size={18}/>
                            <h3 className="font-semibold">{collection.name}</h3>
                            {collection.is_public &&
                              <span className="text-xs text-gray-500">(Public)</span>}
                        </div>
                        <p className="text-sm text-gray-600">{collection.description}</p>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-2 mt-2">
                            {collection.collection_items.map((ci: any) => (
                                <a
                                    key={ci.items.id}
                                    href={`/items/${ci.items.id}`}
                                    className="bg-gray-50 rounded p-2"
                                >
                                    <img
                                        src={ci.items.images[0] || 'https://via.placeholder.com/150'}
                                        alt={ci.items.title}
                                        className="w-full h-24 object-cover rounded"
                                    />
                                    <p className="text-sm truncate">{ci.items.title}</p>
                                    <p className="text-xs text-indigo-600">${ci.items.price}</p>
                                </a>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

================
File: src/components/EnhancedSavedSearches.tsx
================
// src/components/EnhancedSavedSearches.tsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Search, Bell, Trash2, AlertCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';

export function EnhancedSavedSearches() {
    const { user } = useAuth();
    const [searches, setSearches] = useState<any[]>([]);
    const [newSearch, setNewSearch] = useState({
        name: '',
        query: '',
        notifyEmail: false,
        notifyPush: false,
        alertEnabled: false
    });
    const [currentSearch, setCurrentSearch] = useState<string>('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [showSuggestion, setShowSuggestion] = useState(false);

    useEffect(() => {
        if (user) fetchSearches();
    }, [user]);

    useEffect(() => {
        // Get current search from URL
        const urlParams = new URLSearchParams(window.location.search);
        const query = urlParams.get('query') || '';
        const category = urlParams.get('category') || '';
        const minPrice = urlParams.get('minPrice') || '';
        const maxPrice = urlParams.get('maxPrice') || '';
        const condition = urlParams.get('condition') || '';

        // Build a search string representation
        let searchDescription = [];
        if (query) searchDescription.push(`"${query}"`);
        if (category) searchDescription.push(`in ${category}`);
        if (minPrice && maxPrice) {
            searchDescription.push(`$${minPrice}-$${maxPrice}`);
        } else if (minPrice) {
            searchDescription.push(`min $${minPrice}`);
        } else if (maxPrice) {
            searchDescription.push(`max $${maxPrice}`);
        }
        if (condition) searchDescription.push(condition.replace('_', ' '));

        // Set the current search if any filters are applied
        const currentSearchStr = searchDescription.join(', ');
        if (currentSearchStr) {
            setCurrentSearch(currentSearchStr);

            // Show save suggestion if this looks like a new search
            const searchExists = searches.some(s => s.query === query &&
                s.filters?.category === category &&
                s.filters?.minPrice === minPrice &&
                s.filters?.maxPrice === maxPrice &&
                s.filters?.condition === condition);

            setShowSuggestion(!searchExists && (query || category || minPrice || maxPrice || condition));

            // Pre-populate the new search form
            if (!searchExists) {
                setNewSearch({
                    name: query ? `Search for ${query}` : `${category || 'All items'} search`,
                    query: query,
                    notifyEmail: false,
                    notifyPush: false,
                    alertEnabled: false
                });
            }
        } else {
            setShowSuggestion(false);
        }
    }, [window.location.search, searches]);

    async function fetchSearches() {
        try {
            const { data, error } = await supabase.rpc('get_saved_searches_with_alerts');
            if (error) throw error;
            setSearches(data || []);
        } catch (error) {
            console.error('Error fetching saved searches:', error);
        }
    }

    async function handleSaveSearch() {
        if (!user) return;
        setLoading(true);
        setError('');

        try {
            // Get current search filters from URL
            const urlParams = new URLSearchParams(window.location.search);
            const query = urlParams.get('query') || '';
            const category = urlParams.get('category') || '';
            const minPrice = urlParams.get('minPrice') || '';
            const maxPrice = urlParams.get('maxPrice') || '';
            const condition = urlParams.get('condition') || '';

            // Create filters object
            const filters = {
                category: category,
                minPrice: minPrice,
                maxPrice: maxPrice,
                condition: condition
            };

            // Save the search
            const { error } = await supabase
                .from('saved_searches')
                .insert({
                    user_id: user.id,
                    name: newSearch.name,
                    query: query,
                    filters: filters,
                    notify_email: newSearch.notifyEmail,
                    notify_push: newSearch.notifyPush,
                    alert_enabled: newSearch.alertEnabled,
                    alert_frequency: 'daily'
                });

            if (error) throw error;

            // Reset form and refresh searches
            setNewSearch({
                name: '',
                query: '',
                notifyEmail: false,
                notifyPush: false,
                alertEnabled: false
            });
            setShowSuggestion(false);
            fetchSearches();
        } catch (error) {
            console.error('Error saving search:', error);
            setError('Failed to save search. Please try again.');
        } finally {
            setLoading(false);
        }
    }

    async function handleDeleteSearch(id: string) {
        try {
            const { error } = await supabase
                .from('saved_searches')
                .delete()
                .eq('id', id);

            if (error) throw error;
            fetchSearches();
        } catch (error) {
            console.error('Error deleting search:', error);
        }
    }

    if (!user) return null;

    return (
        <div className="space-y-6">
            {/* Current Search Save Suggestion */}
            {showSuggestion && (
                <div className="bg-indigo-50 p-4 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center gap-2">
                            <AlertCircle size={20} className="text-indigo-600" />
                            <h3 className="font-semibold">Save Your Current Search</h3>
                        </div>
                    </div>

                    <p className="text-gray-600 mb-3">
                        Save <span className="font-medium">{currentSearch}</span> to easily run it again or get alerts about new matching items.
                    </p>

                    <div className="space-y-3">
                        <input
                            type="text"
                            placeholder="Search name"
                            value={newSearch.name}
                            onChange={e => setNewSearch({...newSearch, name: e.target.value})}
                            className="w-full p-2 border rounded-lg"
                        />

                        <div className="flex flex-wrap gap-3">
                            <label className="flex items-center gap-1">
                                <input
                                    type="checkbox"
                                    checked={newSearch.alertEnabled}
                                    onChange={e => setNewSearch({...newSearch, alertEnabled: e.target.checked})}
                                    className="w-4 h-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                />
                                <span className="text-sm text-gray-700">Enable alerts for new items</span>
                            </label>

                            {newSearch.alertEnabled && (
                                <>
                                    <label className="flex items-center gap-1">
                                        <input
                                            type="checkbox"
                                            checked={newSearch.notifyEmail}
                                            onChange={e => setNewSearch({...newSearch, notifyEmail: e.target.checked})}
                                            className="w-4 h-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                        />
                                        <span className="text-sm text-gray-700">Email</span>
                                    </label>
                                    <label className="flex items-center gap-1">
                                        <input
                                            type="checkbox"
                                            checked={newSearch.notifyPush}
                                            onChange={e => setNewSearch({...newSearch, notifyPush: e.target.checked})}
                                            className="w-4 h-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                        />
                                        <span className="text-sm text-gray-700">Push</span>
                                    </label>
                                </>
                            )}
                        </div>
                    </div>

                    {error && (
                        <div className="text-red-600 text-sm mt-2">
                            {error}
                        </div>
                    )}

                    <div className="flex gap-2 mt-3">
                        <button
                            onClick={() => setShowSuggestion(false)}
                            className="px-3 py-1 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                        >
                            Cancel
                        </button>
                        <button
                            onClick={handleSaveSearch}
                            disabled={loading || !newSearch.name}
                            className="bg-indigo-600 text-white px-3 py-1 rounded-lg hover:bg-indigo-700 disabled:opacity-50"
                        >
                            {loading ? 'Saving...' : 'Save Search'}
                        </button>
                    </div>
                </div>
            )}

            {/* Saved Searches List */}
            {searches.length > 0 && (
                <div className="bg-white p-4 rounded-lg shadow">
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="font-semibold">Your Saved Searches</h3>
                        <Link
                            to="/saved-search-alerts"
                            className="text-indigo-600 text-sm hover:text-indigo-700"
                        >
                            View All ({searches.length})
                        </Link>
                    </div>

                    <div className="divide-y">
                        {searches.slice(0, 3).map((search) => (
                            <div key={search.id} className="py-3 flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                    <Search size={16} className="text-indigo-600" />
                                    <span>{search.name}</span>
                                    {search.alert_enabled && (
                                        <Bell size={12} className="text-indigo-600" />
                                    )}
                                </div>
                                <div className="flex items-center gap-2">
                                    <Link
                                        to={`/browse?query=${encodeURIComponent(search.query || '')}`}
                                        className="text-indigo-600 hover:text-indigo-700"
                                    >
                                        Run
                                    </Link>
                                    <button
                                        onClick={() => handleDeleteSearch(search.id)}
                                        className="text-red-600 hover:text-red-800"
                                    >
                                        <Trash2 size={16} />
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}

================
File: src/components/FollowSellerButton.tsx
================
// src/components/FollowSellerButton.tsx
import React, { useState, useEffect } from 'react';
import { Heart } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { followSeller, unfollowSeller, getFollowedSellers } from '../lib/supabase';

interface FollowSellerButtonProps {
  sellerId: string;
}

export function FollowSellerButton({ sellerId }: FollowSellerButtonProps) {
  const { user } = useAuth();
  const [isFollowing, setIsFollowing] = useState(false);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (user) {
      checkFollowStatus();
    }
  }, [user, sellerId]);

  async function checkFollowStatus() {
    try {
      const followed = await getFollowedSellers();
      setIsFollowing(followed.some(seller => seller.id === sellerId));
    } catch (error) {
      console.error('Error checking follow status:', error);
    }
  }

  async function handleToggleFollow() {
    if (!user) return;

    setLoading(true);
    try {
      if (isFollowing) {
        await unfollowSeller(sellerId);
        setIsFollowing(false);
      } else {
        await followSeller(sellerId);
        setIsFollowing(true);
      }
    } catch (error) {
      console.error('Error toggling follow:', error);
    } finally {
      setLoading(false);
    }
  }

  if (!user) return null;

  return (
    <button
      onClick={handleToggleFollow}
      disabled={loading}
      className={`flex items-center gap-2 px-4 py-2 rounded-lg ${
        isFollowing 
          ? 'bg-red-100 text-red-700 hover:bg-red-200' 
          : 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200'
      }`}
    >
      <Heart size={18} fill={isFollowing ? 'currentColor' : 'none'} />
      <span>{isFollowing ? 'Following' : 'Follow'}</span>
    </button>
  );
}

================
File: src/components/Footer.tsx
================
import React from 'react';
import { Link } from 'react-router-dom';

export function Footer() {
  return (
    <footer className="bg-white border-t mt-auto">
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-lg font-semibold mb-4">About Treasure Trove</h3>
            <p className="text-gray-600">
              Your trusted marketplace for buying and selling pre-loved treasures.
            </p>
          </div>
          
          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <ul className="space-y-2">
              <li>
                <Link to="/browse" className="text-gray-600 hover:text-indigo-600">
                  Browse Items
                </Link>
              </li>
              <li>
                <Link to="/create-listing" className="text-gray-600 hover:text-indigo-600">
                  Sell an Item
                </Link>
              </li>
            </ul>
          </div>
          
          <div>
            <h3 className="text-lg font-semibold mb-4">Help & Support</h3>
            <ul className="space-y-2">
              <li>
                <Link to="/faq" className="text-gray-600 hover:text-indigo-600">
                  FAQ
                </Link>
              </li>
              <li>
                <Link to="/contact" className="text-gray-600 hover:text-indigo-600">
                  Contact Us
                </Link>
              </li>
            </ul>
          </div>
          
          <div>
            <h3 className="text-lg font-semibold mb-4">Legal</h3>
            <ul className="space-y-2">
              <li>
                <Link to="/privacy" className="text-gray-600 hover:text-indigo-600">
                  Privacy Policy
                </Link>
              </li>
              <li>
                <Link to="/terms" className="text-gray-600 hover:text-indigo-600">
                  Terms of Service
                </Link>
              </li>
            </ul>
          </div>
        </div>
        
        <div className="border-t mt-8 pt-8 text-center text-gray-600">
          <p>© {new Date().getFullYear()} Treasure Trove. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/Navbar.tsx
================
// src/components/Navbar.tsx with wishlist integration
import React from 'react';
import {Link} from 'react-router-dom';
import {useAuth} from '../contexts/AuthContext';
import {supabase} from '../lib/supabase';
import {
    Bell,
    BellRing,
    MessageSquare,
    PlusCircle,
    Search,
    Settings,
    Shield,
    User
} from 'lucide-react';
import {WishlistCount} from './WishlistCount'; // Import the new component

export function Navbar() {
    const {user, signOut} = useAuth();
    const [isAdmin, setIsAdmin] = React.useState(false);
    const [showDropdown, setShowDropdown] = React.useState(false);
    const dropdownRef = React.useRef<HTMLDivElement>(null);

    React.useEffect(() => {
        if (user) {
            checkAdminStatus();
        } else {
            setIsAdmin(false);
        }
    }, [user]);

    React.useEffect(() => {
        function handleClickOutside(event: MouseEvent) {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setShowDropdown(false);
            }
        }

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    async function checkAdminStatus() {
        try {
            const {data: profile, error} = await supabase
                .from('profiles')
                .select('role')
                .eq('id', user!.id)
                .single();

            if (error) throw error;
            setIsAdmin(profile?.role === 'admin' || profile?.role === 'super_admin');
        } catch (error) {
            console.error('Error checking admin status:', error);
            setIsAdmin(false);
        }
    }

    return (
        <nav className="bg-white shadow-lg">
            <div className="container mx-auto px-4">
                <div className="flex justify-between items-center h-16">
                    <Link to="/" className="flex items-center space-x-2">
                        <span className="text-2xl font-bold text-indigo-600">Treasure Trove</span>
                    </Link>

                    <div className="flex items-center space-x-4">
                        <Link to="/browse" className="text-gray-700 hover:text-indigo-600">
                            Browse
                        </Link>

                        {user ? (
                            <>
                                <Link
                                    to="/create-listing"
                                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 flex items-center space-x-1"
                                >
                                    <PlusCircle size={18}/>
                                    <span>Sell Item</span>
                                </Link>

                                <Link to="/notifications"
                                      className="text-gray-700 hover:text-indigo-600">
                                    <Bell size={20}/>
                                </Link>

                                <Link to="/messages"
                                      className="text-gray-700 hover:text-indigo-600">
                                    <MessageSquare size={20}/>
                                </Link>

                                {/* Add Wishlist Icon with Count */}
                                <WishlistCount/>

                                <div className="relative" ref={dropdownRef}>
                                    <button
                                        onClick={() => setShowDropdown(!showDropdown)}
                                        className="flex items-center space-x-1 text-gray-700 hover:text-indigo-600 focus:outline-none"
                                    >
                                        <User size={20}/>
                                    </button>

                                    {showDropdown && (
                                        <div
                                            className="absolute right-0 w-48 mt-2 py-2 bg-white rounded-lg shadow-xl z-50">
                                            <Link
                                                to={`/profile/${user.id}`}
                                                onClick={() => setShowDropdown(false)}
                                                className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                Profile
                                            </Link>
                                            <Link
                                                to="/wishlist"
                                                onClick={() => setShowDropdown(false)}
                                                className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                My Wishlist
                                            </Link>
                                            <Link
                                                to="/price-alerts"
                                                onClick={() => setShowDropdown(false)}
                                                className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                <div className="flex items-center gap-2">
                                                    <BellRing size={16}/>
                                                    Price Alerts
                                                </div>
                                            </Link>
                                            <Link
                                                to="/stock-alerts"
                                                onClick={() => setShowDropdown(false)}
                                                className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                <div className="flex items-center gap-2">
                                                    <Bell size={16}/>
                                                    Back in Stock Alerts
                                                </div>
                                            </Link>
                                            <Link
                                                to="/saved-search-alerts"
                                                onClick={() => setShowDropdown(false)}
                                                className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                <div className="flex items-center gap-2">
                                                    <Search size={16}/>
                                                    Saved Searches
                                                </div>
                                            </Link>
                                            <Link
                                                to="/settings"
                                                onClick={() => setShowDropdown(false)}
                                                className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                <div className="flex items-center gap-2">
                                                    <Settings size={16}/>
                                                    Settings
                                                </div>
                                            </Link>
                                            {isAdmin && (
                                                <Link
                                                    to="/admin"
                                                    onClick={() => setShowDropdown(false)}
                                                    className="block px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                                >
                                                    <div className="flex items-center gap-2">
                                                        <Shield size={16}/>
                                                        Admin Panel
                                                    </div>
                                                </Link>
                                            )}
                                            <button
                                                onClick={() => {
                                                    signOut();
                                                    setShowDropdown(false);
                                                }}
                                                className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-indigo-50"
                                            >
                                                Sign Out
                                            </button>
                                        </div>
                                    )}
                                </div>
                            </>
                        ) : (
                            <Link
                                to="/auth"
                                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
                            >
                                Sign In
                            </Link>
                        )}
                    </div>
                </div>
            </div>
        </nav>
    );
}

================
File: src/components/PriceAlertButton.tsx
================
// src/components/PriceAlertButton.tsx
import React, { useState, useEffect } from 'react';
import { BellRing, AlertTriangle, X } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';

interface PriceAlertButtonProps {
  itemId: string;
  price: number;
  size?: number;
  showText?: boolean;
  className?: string;
}

export function PriceAlertButton({
  itemId,
  price,
  size = 20,
  showText = true,
  className = ''
}: PriceAlertButtonProps) {
  const { user } = useAuth();
  const [hasAlert, setHasAlert] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [targetPrice, setTargetPrice] = useState('');
  const [notifyEmail, setNotifyEmail] = useState(true);
  const [notifyPush, setNotifyPush] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (user) {
      checkAlertStatus();
    }
  }, [user, itemId]);

  async function checkAlertStatus() {
    try {
      const { data, error } = await supabase
        .rpc('has_price_alert', { item_id: itemId });

      if (error) throw error;
      setHasAlert(data || false);
    } catch (error) {
      console.error('Error checking price alert status:', error);
    }
  }

  async function handleToggleAlert() {
    if (!user) {
      // Redirect to auth page if not logged in
      window.location.href = '/auth';
      return;
    }

    if (hasAlert) {
      // If alert already exists, remove it
      await removePriceAlert();
    } else {
      // Show modal to set alert preferences
      setShowModal(true);
      // Set default target price to 10% below current price
      setTargetPrice((price * 0.9).toFixed(2));
    }
  }

  async function removePriceAlert() {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .rpc('toggle_price_alert', { item_id: itemId });

      if (error) throw error;
      setHasAlert(false);
    } catch (error) {
      console.error('Error removing price alert:', error);
    } finally {
      setLoading(false);
    }
  }

  async function createPriceAlert() {
    setLoading(true);
    setError('');
    try {
      // Validate target price
      const targetPriceNum = parseFloat(targetPrice);
      if (isNaN(targetPriceNum) || targetPriceNum <= 0) {
        setError('Please enter a valid target price');
        setLoading(false);
        return;
      }

      // Create alert
      const { data, error } = await supabase
        .rpc('toggle_price_alert', {
          item_id: itemId,
          target_price: targetPriceNum,
          notify_email: notifyEmail,
          notify_push: notifyPush
        });

      if (error) throw error;

      setHasAlert(true);
      setShowModal(false);
    } catch (error) {
      console.error('Error creating price alert:', error);
      setError('Failed to create price alert. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  const buttonClasses = `${className} flex items-center gap-2 ${
    hasAlert 
      ? 'text-purple-600 hover:text-purple-500' 
      : 'text-gray-600 hover:text-gray-500'
  }`;

  if (!user) {
    return (
      <button
        onClick={() => window.location.href = '/auth'}
        className={buttonClasses}
        aria-label="Price Alert"
      >
        <BellRing size={size} />
        {showText && <span>Price Alert</span>}
      </button>
    );
  }

  return (
    <>
      <button
        onClick={handleToggleAlert}
        disabled={loading}
        className={buttonClasses}
        aria-label={hasAlert ? "Remove Price Alert" : "Set Price Alert"}
      >
        <BellRing size={size} fill={hasAlert ? 'currentColor' : 'none'} />
        {showText && (
          <span>{hasAlert ? 'Alert Set' : 'Price Alert'}</span>
        )}
      </button>

      {/* Price Alert Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Set Price Alert</h3>
              <button
                onClick={() => setShowModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={20} />
              </button>
            </div>

            {error && (
              <div className="bg-red-50 text-red-600 p-3 rounded-md mb-4 flex items-center gap-2">
                <AlertTriangle size={18} />
                <span>{error}</span>
              </div>
            )}

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Current Price: ${price}
                </label>
                <div className="flex items-center gap-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Alert me when price is
                  </label>
                  <div className="relative flex-1">
                    <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">$</span>
                    <input
                      type="number"
                      value={targetPrice}
                      onChange={(e) => setTargetPrice(e.target.value)}
                      className="w-full pl-8 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      step="0.01"
                      min="0.01"
                    />
                  </div>
                  <span className="text-sm text-gray-500">or less</span>
                </div>
              </div>

              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-700">
                  Notification Preferences
                </label>
                <div className="flex items-center gap-3">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={notifyEmail}
                      onChange={(e) => setNotifyEmail(e.target.checked)}
                      className="w-4 h-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">Email</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={notifyPush}
                      onChange={(e) => setNotifyPush(e.target.checked)}
                      className="w-4 h-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">Push notifications</span>
                  </label>
                </div>
              </div>

              <div className="flex gap-3 pt-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={createPriceAlert}
                  disabled={loading}
                  className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50"
                >
                  {loading ? 'Setting...' : 'Set Alert'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

================
File: src/components/PriceHistory.tsx
================
// src/components/PriceHistory.tsx
import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { ArrowDown, ArrowUp, TrendingDown } from 'lucide-react';
import { format, parseISO } from 'date-fns';
import { supabase } from '../lib/supabase';

interface PriceHistoryProps {
  itemId: string;
  currentPrice: number;
}

interface PriceChange {
  id: string;
  old_price: number;
  new_price: number;
  changed_at: string;
}

interface ChartData {
  date: string;
  price: number;
  formattedDate: string;
}

export function PriceHistory({ itemId, currentPrice }: PriceHistoryProps) {
  const [priceHistory, setPriceHistory] = useState<PriceChange[]>([]);
  const [loading, setLoading] = useState(true);
  const [chartData, setChartData] = useState<ChartData[]>([]);
  const [showChart, setShowChart] = useState(false);
  const [highestPrice, setHighestPrice] = useState(currentPrice);
  const [lowestPrice, setLowestPrice] = useState(currentPrice);

  useEffect(() => {
    fetchPriceHistory();
  }, [itemId]);

  useEffect(() => {
    if (priceHistory.length > 0) {
      prepareChartData();
    }
  }, [priceHistory, currentPrice]);

  async function fetchPriceHistory() {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('price_history')
        .select('*')
        .eq('item_id', itemId)
        .order('changed_at', { ascending: true });

      if (error) throw error;
      setPriceHistory(data || []);
    } catch (error) {
      console.error('Error fetching price history:', error);
    } finally {
      setLoading(false);
    }
  }

  function prepareChartData() {
    // If there's price history data, prepare it for the chart
    if (priceHistory.length > 0) {
      // Start with the initial price (the "old_price" of the first change)
      let chartPoints: ChartData[] = [
        {
          date: priceHistory[0].changed_at,
          price: priceHistory[0].old_price,
          formattedDate: format(parseISO(priceHistory[0].changed_at), 'MMM d, yyyy')
        }
      ];

      // Add all the price change points
      priceHistory.forEach(change => {
        chartPoints.push({
          date: change.changed_at,
          price: change.new_price,
          formattedDate: format(parseISO(change.changed_at), 'MMM d, yyyy')
        });
      });

      // Add the current price as the last point if it's different from the last change
      if (priceHistory.length > 0 && priceHistory[priceHistory.length - 1].new_price !== currentPrice) {
        chartPoints.push({
          date: new Date().toISOString(),
          price: currentPrice,
          formattedDate: 'Now'
        });
      }

      // Find highest and lowest prices
      const prices = chartPoints.map(point => point.price);
      setHighestPrice(Math.max(...prices));
      setLowestPrice(Math.min(...prices));

      setChartData(chartPoints);
    } else {
      // If no price history, just show the current price
      setChartData([
        {
          date: new Date().toISOString(),
          price: currentPrice,
          formattedDate: 'Now'
        }
      ]);
    }
  }

  const priceChange = priceHistory.length > 0
    ? currentPrice - priceHistory[0].old_price
    : 0;

  const percentChange = priceHistory.length > 0
    ? ((currentPrice - priceHistory[0].old_price) / priceHistory[0].old_price) * 100
    : 0;

  return (
    <div className="mt-6 bg-gray-50 p-4 rounded-lg">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium flex items-center gap-2">
          <TrendingDown size={18} />
          Price History
        </h3>
        {priceHistory.length > 0 && (
          <button
            onClick={() => setShowChart(!showChart)}
            className="text-indigo-600 text-sm hover:text-indigo-700"
          >
            {showChart ? 'Hide Chart' : 'Show Chart'}
          </button>
        )}
      </div>

      {priceHistory.length === 0 ? (
        <div className="text-sm text-gray-500 mt-2">
          No price changes recorded yet
        </div>
      ) : (
        <>
          <div className="flex items-center justify-between mt-2">
            <div className="text-sm">
              <div className="text-gray-500">Initial Price</div>
              <div className="font-medium">${priceHistory[0].old_price.toFixed(2)}</div>
            </div>
            <div className="text-sm">
              <div className="text-gray-500">Highest Price</div>
              <div className="font-medium">${highestPrice.toFixed(2)}</div>
            </div>
            <div className="text-sm">
              <div className="text-gray-500">Lowest Price</div>
              <div className="font-medium">${lowestPrice.toFixed(2)}</div>
            </div>
            <div className="text-sm">
              <div className="text-gray-500">Current Price</div>
              <div className="font-medium">${currentPrice.toFixed(2)}</div>
            </div>
          </div>

          <div className="flex items-center gap-2 mt-3">
            <div className={`text-sm font-medium ${
              priceChange < 0 ? 'text-green-600' : priceChange > 0 ? 'text-red-600' : 'text-gray-600'
            }`}>
              {priceChange < 0 ? (
                <span className="flex items-center gap-1">
                  <ArrowDown size={14} />
                  ${Math.abs(priceChange).toFixed(2)} ({Math.abs(percentChange).toFixed(1)}%)
                </span>
              ) : priceChange > 0 ? (
                <span className="flex items-center gap-1">
                  <ArrowUp size={14} />
                  ${priceChange.toFixed(2)} ({percentChange.toFixed(1)}%)
                </span>
              ) : (
                <span>No change</span>
              )}
            </div>
            <div className="text-xs text-gray-500">
              since {format(parseISO(priceHistory[0].changed_at), 'MMM d, yyyy')}
            </div>
          </div>

          {showChart && chartData.length > 1 && (
            <div className="mt-4 h-52">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={chartData}
                  margin={{ top: 5, right: 5, left: 5, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="date"
                    tickFormatter={(date) => format(parseISO(date), 'MM/dd')}
                    scale="time"
                    type="category"
                  />
                  <YAxis
                    domain={[Math.floor(lowestPrice * 0.9), Math.ceil(highestPrice * 1.1)]}
                    tickFormatter={(value) => `$${value}`}
                  />
                  <Tooltip
                    labelFormatter={(label) => {
                      const point = chartData.find(data => data.date === label);
                      return point ? point.formattedDate : '';
                    }}
                    formatter={(value: number) => [`$${value.toFixed(2)}`, 'Price']}
                  />
                  <Line
                    type="monotone"
                    dataKey="price"
                    stroke="#6366F1"
                    strokeWidth={2}
                    activeDot={{ r: 8 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          )}
        </>
      )}
    </div>
  );
}

================
File: src/components/RecentlyViewedItems.tsx
================
// src/components/RecentlyViewedItems.tsx
import React, { useState, useEffect } from 'react';
import { getRecentlyViewedItems, RecommendationItem } from '../lib/recommendations';
import { History, ChevronLeft, ChevronRight } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface RecentlyViewedItemsProps {
  limit?: number;
}

export function RecentlyViewedItems({ limit = 8 }: RecentlyViewedItemsProps) {
  const { user } = useAuth();
  const [items, setItems] = useState<RecommendationItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [containerWidth, setContainerWidth] = useState(0);
  const [contentWidth, setContentWidth] = useState(0);
  const containerRef = React.useRef<HTMLDivElement>(null);
  const contentRef = React.useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (user) {
      fetchRecentlyViewedItems();
    }

    // Add resize listener to update scroll capabilities
    const handleResize = () => {
      if (containerRef.current && contentRef.current) {
        setContainerWidth(containerRef.current.clientWidth);
        setContentWidth(contentRef.current.scrollWidth);
      }
    };

    window.addEventListener('resize', handleResize);

    // Call once to initialize
    setTimeout(handleResize, 100);

    return () => window.removeEventListener('resize', handleResize);
  }, [user]);

  async function fetchRecentlyViewedItems() {
    try {
      setLoading(true);
      const data = await getRecentlyViewedItems(limit);
      setItems(data);
    } catch (error) {
      console.error('Error fetching recently viewed items:', error);
    } finally {
      setLoading(false);
    }
  }

  function handleScroll(direction: 'left' | 'right') {
    if (!containerRef.current) return;

    const containerWidth = containerRef.current.clientWidth;
    const scrollAmount = containerWidth * 0.8; // Scroll 80% of container width

    let newPosition = direction === 'left'
      ? Math.max(0, scrollPosition - scrollAmount)
      : Math.min(contentWidth - containerWidth, scrollPosition + scrollAmount);

    setScrollPosition(newPosition);

    if (containerRef.current) {
      containerRef.current.scrollTo({
        left: newPosition,
        behavior: 'smooth'
      });
    }
  }

  if (!user || (items.length === 0 && !loading)) {
    return null; // Don't show anything if not logged in or no items
  }

  if (loading) {
    return (
      <div className="my-8 border-t pt-8">
        <div className="flex items-center gap-2 mb-4">
          <History size={18} className="text-indigo-600" />
          <h3 className="text-xl font-semibold">Recently Viewed</h3>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="aspect-square bg-gray-200 animate-pulse" />
              <div className="p-3">
                <div className="h-4 bg-gray-200 rounded animate-pulse mb-2" />
                <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  const canScrollLeft = scrollPosition > 0;
  const canScrollRight = containerWidth && contentWidth ? scrollPosition < contentWidth - containerWidth : false;

  return (
    <div className="my-8 border-t pt-8">
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-2">
          <History size={18} className="text-indigo-600" />
          <h3 className="text-xl font-semibold">Recently Viewed</h3>
        </div>

        {/* Scroll controls */}
        {(canScrollLeft || canScrollRight) && (
          <div className="flex gap-2">
            <button
              onClick={() => handleScroll('left')}
              disabled={!canScrollLeft}
              className="p-1 rounded-full border disabled:opacity-30 disabled:cursor-not-allowed"
            >
              <ChevronLeft size={20} />
            </button>
            <button
              onClick={() => handleScroll('right')}
              disabled={!canScrollRight}
              className="p-1 rounded-full border disabled:opacity-30 disabled:cursor-not-allowed"
            >
              <ChevronRight size={20} />
            </button>
          </div>
        )}
      </div>

      {/* Scrollable container */}
      <div
        className="overflow-x-auto scrollbar-hide pb-4"
        ref={containerRef}
        onScroll={(e) => setScrollPosition(e.currentTarget.scrollLeft)}
      >
        <div
          className="flex gap-4"
          ref={contentRef}
          style={{ width: 'max-content' }}
        >
          {items.map((item) => (
            <a
              key={item.id}
              href={`/items/${item.id}`}
              className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow w-44 md:w-56 flex-shrink-0"
            >
              <div className="aspect-square relative">
                <img
                  src={item.images[0] || 'https://via.placeholder.com/400'}
                  alt={item.title}
                  className="w-full h-full object-cover"
                />
                <div className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                  ${item.price}
                </div>
              </div>
              <div className="p-3">
                <h4 className="font-medium text-sm mb-1 truncate">
                  {item.title}
                </h4>
                <div className="flex justify-between items-center text-xs text-gray-600">
                  <span>{item.condition.replace('_', ' ')}</span>
                  {item.view_count && item.view_count > 1 && (
                    <span className="text-indigo-600 font-medium">
                      Viewed {item.view_count}×
                    </span>
                  )}
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/components/SavedSearches.tsx
================
// src/components/SavedSearches.tsx
import React, {useState, useEffect} from 'react';
import {Search, Bell, Trash2} from 'lucide-react';
import {useAuth} from '../contexts/AuthContext';
import {saveSearch, getSavedSearches, deleteSavedSearch} from '../lib/supabase';

export function SavedSearches() {
    const {user} = useAuth();
    const [searches, setSearches] = useState<any[]>([]);
    const [newSearch, setNewSearch] = useState({
        name: '',
        query: '',
        notifyEmail: false,
        notifyPush: false
    });

    useEffect(() => {
        if (user) fetchSearches();
    }, [user]);

    async function fetchSearches() {
        try {
            const data = await getSavedSearches();
            setSearches(data);
        } catch (error) {
            console.error('Error fetching saved searches:', error);
        }
    }

    async function handleSaveSearch() {
        if (!user) return; // Ensure user is authenticated
        try {
            await saveSearch(user.id, { // Pass user.id
                name: newSearch.name,
                query: newSearch.query,
                filters: {},
                notifyEmail: newSearch.notifyEmail,
                notifyPush: newSearch.notifyPush,
            });
            setNewSearch({name: '', query: '', notifyEmail: false, notifyPush: false});
            fetchSearches();
        } catch (error) {
            console.error('Error saving search:', error);
        }
    }

    async function handleDeleteSearch(id: string) {
        try {
            await deleteSavedSearch(id);
            fetchSearches();
        } catch (error) {
            console.error('Error deleting search:', error);
        }
    }

    if (!user) return null;

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-xl font-bold mb-4">Saved Searches</h2>

            {/* New Search Form */}
            <div className="mb-6 flex gap-4">
                <input
                    type="text"
                    placeholder="Search name"
                    value={newSearch.name}
                    onChange={e => setNewSearch({...newSearch, name: e.target.value})}
                    className="flex-1 p-2 border rounded"
                />
                <input
                    type="text"
                    placeholder="Search query"
                    value={newSearch.query}
                    onChange={e => setNewSearch({...newSearch, query: e.target.value})}
                    className="flex-1 p-2 border rounded"
                />
                <label className="flex items-center gap-1">
                    <input
                        type="checkbox"
                        checked={newSearch.notifyEmail}
                        onChange={e => setNewSearch({...newSearch, notifyEmail: e.target.checked})}
                    />
                    Email
                </label>
                <label className="flex items-center gap-1">
                    <input
                        type="checkbox"
                        checked={newSearch.notifyPush}
                        onChange={e => setNewSearch({...newSearch, notifyPush: e.target.checked})}
                    />
                    Push
                </label>
                <button
                    onClick={handleSaveSearch}
                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg"
                >
                    Save
                </button>
            </div>

            {/* Saved Searches List */}
            <div className="space-y-4">
                {searches.map(search => (
                    <div key={search.id}
                         className="flex items-center justify-between border-b pb-2">
                        <div className="flex items-center gap-2">
                            <Search size={16}/>
                            <span>{search.name}: "{search.query}"</span>
                            {(search.notify_email || search.notify_push) && (
                                <Bell size={16} className="text-indigo-600"/>
                            )}
                        </div>
                        <button
                            onClick={() => handleDeleteSearch(search.id)}
                            className="text-red-600 hover:text-red-800"
                        >
                            <Trash2 size={16}/>
                        </button>
                    </div>
                ))}
            </div>
        </div>
    );
}

================
File: src/components/SearchHighlight.tsx
================
// src/components/SearchHighlight.tsx

interface SearchHighlightProps {
  text: string;
  highlight: string;
  className?: string;
}

export function SearchHighlight({
  text,
  highlight,
  className = ''
}: SearchHighlightProps) {
  if (!highlight.trim()) {
    return <span className={className}>{text}</span>;
  }

  // Escape special characters in the search term
  const escapedHighlight = highlight.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

  // Create a regular expression to match the search term (case insensitive)
  const regex = new RegExp(`(${escapedHighlight})`, 'gi');

  // Split the text by the regular expression
  const parts = text.split(regex);

  return (
    <span className={className}>
      {parts.map((part, i) =>
        regex.test(part) ? (
          <mark key={i} className="bg-yellow-100 px-0.5 rounded">
            {part}
          </mark>
        ) : (
          <span key={i}>{part}</span>
        )
      )}
    </span>
  );
}

================
File: src/components/SearchResultItem.tsx
================
// src/components/SearchResultItem.tsx
import {Link} from 'react-router-dom';
import {SearchItem} from '../lib/elasticsearch';
import {SearchHighlight} from './SearchHighlight';

interface SearchResultItemProps {
    item: SearchItem;
    searchTerm: string;
}

export function SearchResultItem({item, searchTerm}: SearchResultItemProps) {
    return (
        <Link
            to={`/items/${item.id}`}
            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow block"
        >
            <div className="aspect-square relative">
                <img
                    src={item.images[0] || 'https://via.placeholder.com/400'}
                    alt={item.title}
                    className="w-full h-full object-cover"
                />
                <div
                    className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                    ${item.price}
                </div>
            </div>
            <div className="p-4">
                <h3 className="font-semibold text-lg mb-1 line-clamp-2">
                    <SearchHighlight text={item.title} highlight={searchTerm}/>
                </h3>
                <div className="flex items-center justify-between text-sm text-gray-600">
                    <div className="flex items-center gap-1">
                        <span className="capitalize">{item.condition.replace('_', ' ')}</span>
                        <span className="mx-1">•</span>
                        <span>{item.category.name}</span>
                    </div>
                    <span className="flex items-center">★ {item.seller.rating}</span>
                </div>
            </div>
        </Link>
    );
}

================
File: src/components/ShareListing.tsx
================
// src/components/ShareListing.tsx
import React from 'react';
import { Share2, Twitter, Facebook } from 'lucide-react';

interface ShareListingProps {
  itemId: string;
  title: string;
}

export function ShareListing({ itemId, title }: ShareListingProps) {
  const shareUrl = `${window.location.origin}/items/${itemId}`;
  const encodedTitle = encodeURIComponent(title);

  const shareLinks = {
    twitter: `https://twitter.com/intent/tweet?url=${shareUrl}&text=${encodedTitle}`,
    facebook: `https://www.facebook.com/sharer/sharer.php?u=${shareUrl}`,
  };

  function handleShare(platform: 'twitter' | 'facebook') {
    window.open(shareLinks[platform], '_blank', 'width=600,height=400');
  }

  return (
    <div className="flex items-center gap-2">
      <Share2 size={18} className="text-gray-600" />
      <span className="text-sm text-gray-600 mr-2">Share:</span>
      <button
        onClick={() => handleShare('twitter')}
        className="p-1 hover:text-indigo-600"
        aria-label="Share on Twitter"
      >
        <Twitter size={18} />
      </button>
      <button
        onClick={() => handleShare('facebook')}
        className="p-1 hover:text-indigo-600"
        aria-label="Share on Facebook"
      >
        <Facebook size={18} />
      </button>
    </div>
  );
}

================
File: src/components/SimilarItems.tsx
================
// src/components/SimilarItems.tsx
import React, { useState, useEffect } from 'react';
import { getSimilarItems, RecommendationItem } from '../lib/recommendations';
import { ChevronLeft, ChevronRight } from 'lucide-react';

interface SimilarItemsProps {
  itemId: string;
  title?: string;
}

export function SimilarItems({ itemId, title = "Similar Items" }: SimilarItemsProps) {
  const [items, setItems] = useState<RecommendationItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [containerWidth, setContainerWidth] = useState(0);
  const [contentWidth, setContentWidth] = useState(0);
  const containerRef = React.useRef<HTMLDivElement>(null);
  const contentRef = React.useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchSimilarItems();

    // Add resize listener to update scroll capabilities
    const handleResize = () => {
      if (containerRef.current && contentRef.current) {
        setContainerWidth(containerRef.current.clientWidth);
        setContentWidth(contentRef.current.scrollWidth);
      }
    };

    window.addEventListener('resize', handleResize);

    // Call once to initialize
    setTimeout(handleResize, 100);

    return () => window.removeEventListener('resize', handleResize);
  }, [itemId]);

  async function fetchSimilarItems() {
    try {
      setLoading(true);
      const data = await getSimilarItems(itemId);
      setItems(data);
    } catch (error) {
      console.error('Error fetching similar items:', error);
    } finally {
      setLoading(false);
    }
  }

  function handleScroll(direction: 'left' | 'right') {
    if (!containerRef.current) return;

    const containerWidth = containerRef.current.clientWidth;
    const scrollAmount = containerWidth * 0.8; // Scroll 80% of container width

    let newPosition = direction === 'left'
      ? Math.max(0, scrollPosition - scrollAmount)
      : Math.min(contentWidth - containerWidth, scrollPosition + scrollAmount);

    setScrollPosition(newPosition);

    if (containerRef.current) {
      containerRef.current.scrollTo({
        left: newPosition,
        behavior: 'smooth'
      });
    }
  }

  if (loading) {
    return (
      <div className="mt-8">
        <h3 className="text-xl font-semibold mb-4">{title}</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="aspect-square bg-gray-200 animate-pulse" />
              <div className="p-3">
                <div className="h-4 bg-gray-200 rounded animate-pulse mb-2" />
                <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (items.length === 0) {
    return null; // Don't show anything if no similar items
  }

  const canScrollLeft = scrollPosition > 0;
  const canScrollRight = containerWidth && contentWidth ? scrollPosition < contentWidth - containerWidth : false;

  return (
    <div className="mt-8">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-xl font-semibold">{title}</h3>

        {/* Scroll controls */}
        {(canScrollLeft || canScrollRight) && (
          <div className="flex gap-2">
            <button
              onClick={() => handleScroll('left')}
              disabled={!canScrollLeft}
              className="p-1 rounded-full border disabled:opacity-30 disabled:cursor-not-allowed"
            >
              <ChevronLeft size={20} />
            </button>
            <button
              onClick={() => handleScroll('right')}
              disabled={!canScrollRight}
              className="p-1 rounded-full border disabled:opacity-30 disabled:cursor-not-allowed"
            >
              <ChevronRight size={20} />
            </button>
          </div>
        )}
      </div>

      {/* Scrollable container */}
      <div
        className="overflow-x-auto scrollbar-hide pb-4"
        ref={containerRef}
        onScroll={(e) => setScrollPosition(e.currentTarget.scrollLeft)}
      >
        <div
          className="flex gap-4"
          ref={contentRef}
          style={{ width: 'max-content' }}
        >
          {items.map((item) => (
            <a
              key={item.id}
              href={`/items/${item.id}`}
              className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow w-44 md:w-56 flex-shrink-0"
            >
              <div className="aspect-square relative">
                <img
                  src={item.images[0] || 'https://via.placeholder.com/400'}
                  alt={item.title}
                  className="w-full h-full object-cover"
                />
                <div className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                  ${item.price}
                </div>
              </div>
              <div className="p-3">
                <h4 className="font-medium text-sm mb-1 truncate">
                  {item.title}
                </h4>
                <div className="text-xs text-gray-600">
                  {item.condition.replace('_', ' ')}
                  {item.similarity_score && (
                    <span className="ml-2 text-xs text-gray-400">
                      {Math.round(item.similarity_score * 100)}% match
                    </span>
                  )}
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/components/StockAlertButton.tsx
================
// src/components/StockAlertButton.tsx
import React, { useState, useEffect } from 'react';
import { Bell, AlertTriangle, X } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';

interface StockAlertButtonProps {
  itemId: string;
  stockStatus: string;
  size?: number;
  showText?: boolean;
  className?: string;
}

export function StockAlertButton({
  itemId,
  stockStatus,
  size = 20,
  showText = true,
  className = ''
}: StockAlertButtonProps) {
  const { user } = useAuth();
  const [hasAlert, setHasAlert] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [notifyEmail, setNotifyEmail] = useState(true);
  const [notifyPush, setNotifyPush] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (user) {
      checkAlertStatus();
    }
  }, [user, itemId]);

  async function checkAlertStatus() {
    try {
      const { data, error } = await supabase
        .rpc('has_stock_alert', { item_id: itemId });

      if (error) throw error;
      setHasAlert(data || false);
    } catch (error) {
      console.error('Error checking stock alert status:', error);
    }
  }

  async function handleToggleAlert() {
    if (!user) {
      // Redirect to auth page if not logged in
      window.location.href = '/auth';
      return;
    }

    if (hasAlert) {
      // If alert already exists, remove it
      await removeStockAlert();
    } else {
      // Show modal to set alert preferences
      setShowModal(true);
    }
  }

  async function removeStockAlert() {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .rpc('toggle_stock_alert', { item_id: itemId });

      if (error) throw error;
      setHasAlert(false);
    } catch (error) {
      console.error('Error removing stock alert:', error);
    } finally {
      setLoading(false);
    }
  }

  async function createStockAlert() {
    setLoading(true);
    setError('');
    try {
      // Create alert
      const { data, error } = await supabase
        .rpc('toggle_stock_alert', {
          item_id: itemId,
          notify_email: notifyEmail,
          notify_push: notifyPush
        });

      if (error) throw error;

      setHasAlert(true);
      setShowModal(false);
    } catch (error) {
      console.error('Error creating stock alert:', error);
      setError('Failed to create stock alert. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  // Only show for out-of-stock items
  if (stockStatus !== 'out_of_stock') {
    return null;
  }

  const buttonClasses = `${className} flex items-center gap-2 ${
    hasAlert 
      ? 'text-orange-600 hover:text-orange-500' 
      : 'text-gray-600 hover:text-gray-500'
  }`;

  if (!user) {
    return (
      <button
        onClick={() => window.location.href = '/auth'}
        className={buttonClasses}
        aria-label="Notify Me When Available"
      >
        <Bell size={size} />
        {showText && <span>Notify When Available</span>}
      </button>
    );
  }

  return (
    <>
      <button
        onClick={handleToggleAlert}
        disabled={loading}
        className={buttonClasses}
        aria-label={hasAlert ? "Remove Stock Alert" : "Notify Me When Available"}
      >
        <Bell size={size} fill={hasAlert ? 'currentColor' : 'none'} />
        {showText && (
          <span>{hasAlert ? 'Alert Set' : 'Notify When Available'}</span>
        )}
      </button>

      {/* Stock Alert Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Back in Stock Alert</h3>
              <button
                onClick={() => setShowModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={20} />
              </button>
            </div>

            {error && (
              <div className="bg-red-50 text-red-600 p-3 rounded-md mb-4 flex items-center gap-2">
                <AlertTriangle size={18} />
                <span>{error}</span>
              </div>
            )}

            <div className="space-y-4">
              <p className="text-gray-600">
                We'll notify you when this item is back in stock. Choose how you'd like to be notified:
              </p>

              <div className="space-y-2">
                <div className="flex items-center gap-3">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={notifyEmail}
                      onChange={(e) => setNotifyEmail(e.target.checked)}
                      className="w-4 h-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">Email</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={notifyPush}
                      onChange={(e) => setNotifyPush(e.target.checked)}
                      className="w-4 h-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">Push notifications</span>
                  </label>
                </div>
              </div>

              <div className="flex gap-3 pt-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={createStockAlert}
                  disabled={loading || (!notifyEmail && !notifyPush)}
                  className="flex-1 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50"
                >
                  {loading ? 'Setting...' : 'Set Alert'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

================
File: src/components/StockStatus.tsx
================
// src/components/StockStatus.tsx
import React from 'react';
import { CheckCircle, AlertTriangle, XCircle } from 'lucide-react';

interface StockStatusProps {
  status: string;
  className?: string;
}

export function StockStatus({ status, className = '' }: StockStatusProps) {
  let statusDisplay = {
    icon: <CheckCircle size={16} />,
    text: 'In Stock',
    color: 'text-green-600 bg-green-50',
  };

  if (status === 'low_stock') {
    statusDisplay = {
      icon: <AlertTriangle size={16} />,
      text: 'Low Stock',
      color: 'text-amber-600 bg-amber-50',
    };
  } else if (status === 'out_of_stock') {
    statusDisplay = {
      icon: <XCircle size={16} />,
      text: 'Out of Stock',
      color: 'text-red-600 bg-red-50',
    };
  }

  return (
    <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-sm ${statusDisplay.color} ${className}`}>
      {statusDisplay.icon}
      <span>{statusDisplay.text}</span>
    </div>
  );
}

================
File: src/components/UpdateStockStatus.tsx
================
// src/components/UpdateStockStatus.tsx
import React, { useState } from 'react';
import { Package, AlertTriangle } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { StockStatus } from './StockStatus';

interface UpdateStockStatusProps {
  itemId: string;
  currentStatus: string;
  onUpdate?: (newStatus: string) => void;
  isSeller: boolean;
}

export function UpdateStockStatus({
  itemId,
  currentStatus,
  onUpdate,
  isSeller
}: UpdateStockStatusProps) {
  const [status, setStatus] = useState(currentStatus);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // If not the seller, just show the status
  if (!isSeller) {
    return <StockStatus status={currentStatus} />;
  }

  async function handleUpdateStatus(newStatus: string) {
    setLoading(true);
    setError('');
    try {
      const { error } = await supabase
        .rpc('update_item_stock_status', {
          item_id: itemId,
          new_stock_status: newStatus
        });

      if (error) throw error;

      setStatus(newStatus);
      if (onUpdate) onUpdate(newStatus);
    } catch (error) {
      console.error('Error updating stock status:', error);
      setError('Failed to update stock status');
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="space-y-2">
      <div className="flex items-center gap-2">
        <Package size={18} />
        <span className="font-medium">Stock Status:</span>
        <StockStatus status={status} />
      </div>

      {error && (
        <div className="text-red-600 text-sm flex items-center gap-1">
          <AlertTriangle size={14} />
          <span>{error}</span>
        </div>
      )}

      <div className="flex gap-2">
        <button
          onClick={() => handleUpdateStatus('in_stock')}
          disabled={loading || status === 'in_stock'}
          className={`px-3 py-1 text-sm rounded-full ${
            status === 'in_stock' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
          } disabled:opacity-50`}
        >
          In Stock
        </button>
        <button
          onClick={() => handleUpdateStatus('low_stock')}
          disabled={loading || status === 'low_stock'}
          className={`px-3 py-1 text-sm rounded-full ${
            status === 'low_stock' 
              ? 'bg-amber-100 text-amber-800' 
              : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
          } disabled:opacity-50`}
        >
          Low Stock
        </button>
        <button
          onClick={() => handleUpdateStatus('out_of_stock')}
          disabled={loading || status === 'out_of_stock'}
          className={`px-3 py-1 text-sm rounded-full ${
            status === 'out_of_stock' 
              ? 'bg-red-100 text-red-800' 
              : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
          } disabled:opacity-50`}
        >
          Out of Stock
        </button>
      </div>
    </div>
  );
}

================
File: src/components/WishListButton.tsx
================
// src/components/WishListButton.tsx
import React, { useState, useEffect } from 'react';
import { Heart } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';

interface WishListButtonProps {
  itemId: string;
  size?: number;
  showText?: boolean;
  className?: string;
}

export function WishListButton({
  itemId,
  size = 20,
  showText = true,
  className = ''
}: WishListButtonProps) {
  const { user } = useAuth();
  const [isInWishlist, setIsInWishlist] = useState(false);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (user) {
      checkWishlistStatus();
    }
  }, [user, itemId]);

  async function checkWishlistStatus() {
    try {
      const { data, error } = await supabase
        .rpc('is_in_wishlist', { item_id: itemId });

      if (error) throw error;
      setIsInWishlist(data || false);
    } catch (error) {
      console.error('Error checking wishlist status:', error);
    }
  }

  async function handleToggleWishlist() {
    if (!user) {
      // Redirect to auth page if not logged in
      window.location.href = '/auth';
      return;
    }

    setLoading(true);
    try {
      if (isInWishlist) {
        const { error } = await supabase
          .rpc('remove_from_wishlist', { item_id: itemId });

        if (error) throw error;
        setIsInWishlist(false);
      } else {
        const { error } = await supabase
          .rpc('add_to_wishlist', { item_id: itemId });

        if (error) throw error;
        setIsInWishlist(true);
      }
    } catch (error) {
      console.error('Error toggling wishlist:', error);
    } finally {
      setLoading(false);
    }
  }

  const buttonClasses = `${className} flex items-center gap-2 ${
    isInWishlist 
      ? 'text-red-600 hover:text-red-500' 
      : 'text-gray-600 hover:text-gray-500'
  }`;

  if (!user) {
    return (
      <button
        onClick={() => window.location.href = '/auth'}
        className={buttonClasses}
        aria-label="Save to Wishlist"
      >
        <Heart size={size} />
        {showText && <span>Save</span>}
      </button>
    );
  }

  return (
    <button
      onClick={handleToggleWishlist}
      disabled={loading}
      className={buttonClasses}
      aria-label={isInWishlist ? "Remove from Wishlist" : "Save to Wishlist"}
    >
      <Heart size={size} fill={isInWishlist ? 'currentColor' : 'none'} />
      {showText && (
        <span>{isInWishlist ? 'Saved' : 'Save'}</span>
      )}
    </button>
  );
}

================
File: src/components/WishlistCount.tsx
================
// src/components/WishlistCount.tsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Heart } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';

export function WishlistCount() {
  const { user } = useAuth();
  const [count, setCount] = useState(0);

  useEffect(() => {
    if (user) {
      fetchWishlistCount();

      // Subscribe to changes in the wish_list_items table
      const subscription = supabase
        .channel('wish_list_changes')
        .on('postgres_changes', {
          event: '*',
          schema: 'public',
          table: 'wish_list_items',
          filter: `user_id=eq.${user.id}`,
        }, () => {
          fetchWishlistCount();
        })
        .subscribe();

      return () => {
        subscription.unsubscribe();
      };
    }
  }, [user]);

  async function fetchWishlistCount() {
    try {
      const { count, error } = await supabase
        .from('wish_list_items')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user?.id);

      if (error) throw error;
      setCount(count || 0);
    } catch (error) {
      console.error('Error fetching wishlist count:', error);
    }
  }

  if (!user) return null;

  return (
    <Link to="/wishlist" className="relative text-gray-700 hover:text-indigo-600">
      <Heart size={20} />
      {count > 0 && (
        <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
          {count > 9 ? '9+' : count}
        </span>
      )}
    </Link>
  );
}

================
File: src/contexts/AuthContext.tsx
================
import React, { createContext, useContext, useEffect, useState } from 'react';
import { User } from '@supabase/supabase-js';
import { supabase } from '../lib/supabase';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string, options?: { data: { username: string } }) => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check active sessions and sets the user
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    // Listen for changes on auth state
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) throw error;
  };

  const signUp = async (email: string, password: string, options?: { data: { username: string } }) => {
    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: options?.data
      }
    });
    if (error) throw error;
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  };

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================
File: src/hooks/useAnalytics.ts
================
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export function useProfileViews(profileId: string) {
  useEffect(() => {
    if (!profileId) return;

    supabase.rpc('track_profile_view', {
      viewed_profile_id: profileId
    });
  }, [profileId]);
}

export function useItemViews(itemId: string) {
  useEffect(() => {
    if (!itemId) return;

    supabase.rpc('track_item_view', {
      viewed_item_id: itemId
    });
  }, [itemId]);
}

================
File: src/lib/elasticsearch.ts
================
// src/lib/elasticsearch.ts
import { supabase } from './supabase';

// Interface for search parameters
export interface SearchParams {
  query: string;
  category?: string;
  minPrice?: number;
  maxPrice?: number;
  condition?: string;
  sort?: 'newest' | 'price-asc' | 'price-desc';
  limit?: number;
  offset?: number;
}

// Interface for search response
export interface SearchResponse {
  items: SearchItem[];
  total: number;
  took: number; // milliseconds the search took
  searchMode: 'elasticsearch' | 'database'; // indicates which search method was used
}

// Interface for search item
export interface SearchItem {
  id: string;
  title: string;
  price: number;
  condition: string;
  images: string[];
  seller: {
    id: string;
    username: string;
    rating: number;
  };
  category: {
    id: string;
    name: string;
    slug: string;
  };
  created_at: string;
}

// Elasticsearch status information
export interface ElasticsearchStatus {
  available: boolean;
  configured: boolean;
  url?: string;
  index?: string;
  lastSync?: string;
  error?: string;
}

// Cache the status to avoid repeated checks
let cachedStatus: ElasticsearchStatus | null = null;
const cacheExpiry = 60000; // 1 minute
let lastStatusCheck = 0;

/**
 * Check if Elasticsearch is configured and available
 */
export async function checkElasticsearchStatus(): Promise<ElasticsearchStatus> {
  // Return cached status if recent
  if (cachedStatus && Date.now() - lastStatusCheck < cacheExpiry) {
    return cachedStatus;
  }

  try {
    // Get Elasticsearch configuration
    const { data: config, error: configError } = await supabase
      .from('elasticsearch_config')
      .select('es_url, items_index, last_sync')
      .limit(1)
      .single();

    if (configError) {
      cachedStatus = {
        available: false,
        configured: false,
        error: 'Configuration not found'
      };
      lastStatusCheck = Date.now();
      return cachedStatus;
    }

    // Check if configuration is complete
    if (!config.es_url || !config.items_index) {
      cachedStatus = {
        available: false,
        configured: false,
        url: config.es_url,
        index: config.items_index,
        error: 'Incomplete configuration'
      };
      lastStatusCheck = Date.now();
      return cachedStatus;
    }

    // Ping Elasticsearch to check availability
    const { data: pingData, error: pingError } = await supabase.rpc('check_elasticsearch_connection');

    if (pingError || !pingData || !pingData.available) {
      cachedStatus = {
        available: false,
        configured: true,
        url: config.es_url,
        index: config.items_index,
        lastSync: config.last_sync,
        error: pingError?.message || pingData?.error || 'Connection test failed'
      };
      lastStatusCheck = Date.now();
      return cachedStatus;
    }

    // Elasticsearch is available
    cachedStatus = {
      available: true,
      configured: true,
      url: config.es_url,
      index: config.items_index,
      lastSync: config.last_sync
    };
    lastStatusCheck = Date.now();
    return cachedStatus;
  } catch (error) {
    console.error('Error checking Elasticsearch status:', error);
    cachedStatus = {
      available: false,
      configured: false,
      error: error instanceof Error ? error.message : String(error)
    };
    lastStatusCheck = Date.now();
    return cachedStatus;
  }
}

/**
 * Search for items using either Elasticsearch or database
 * Will automatically choose the best method based on availability
 */
export async function searchItems(params: SearchParams): Promise<SearchResponse> {
  // Check Elasticsearch status
  const status = await checkElasticsearchStatus();

  // If Elasticsearch is available, use it
  if (status.available) {
    try {
      const response = await searchWithElasticsearch(params);
      return {
        ...response,
        searchMode: 'elasticsearch'
      };
    } catch (error) {
      console.error('Elasticsearch search failed, falling back to database:', error);
      const dbResponse = await searchWithDatabase(params);
      return {
        ...dbResponse,
        searchMode: 'database'
      };
    }
  } else {
    // Use database search
    const response = await searchWithDatabase(params);
    return {
      ...response,
      searchMode: 'database'
    };
  }
}

/**
 * Force search using Elasticsearch (will fail if not available)
 */
export async function searchWithElasticsearch(params: SearchParams): Promise<SearchResponse> {
  const { query, category, minPrice, maxPrice, condition, sort = 'newest', limit = 20, offset = 0 } = params;

  // Call the Supabase function that interfaces with Elasticsearch
  const { data, error } = await supabase.rpc('search_items_elasticsearch', {
    search_query: query,
    category_slug: category,
    min_price: minPrice,
    max_price: maxPrice,
    condition_filter: condition,
    sort_by: sort,
    limit_val: limit,
    offset_val: offset
  });

  if (error) throw error;

  // Transform Elasticsearch response to our format
  const hits = data.hits.hits;
  const items = hits.map((hit: any) => ({
    id: hit._id,
    ...hit._source
  }));

  return {
    items,
    total: data.hits.total.value,
    took: data.took,
    searchMode: 'elasticsearch'
  };
}

/**
 * Search using the database (optimized fallback)
 */
export async function searchWithDatabase(params: SearchParams): Promise<SearchResponse> {
  const startTime = Date.now();
  try {
    const { query, category, minPrice, maxPrice, condition, sort = 'newest', limit = 20, offset = 0 } = params;

    // Start building query
    let queryBuilder = supabase
      .from('items')
      .select(`
        id,
        title,
        price,
        condition,
        images,
        created_at,
        seller:seller_id (
          id,
          username,
          rating
        ),
        category:category_id (
          id,
          name,
          slug
        )
      `, { count: 'exact' })
      .eq('is_active', true);

    // Apply filters
    if (query && query.trim() !== '') {
      // Optimize search by using ts_search if available or fallback to ILIKE
      queryBuilder = queryBuilder.or(
        `title.ilike.%${query}%,description.ilike.%${query}%`
      );
    }

    if (category) {
      // Join with categories for slug matching
      queryBuilder = queryBuilder.eq('category.slug', category);
    }

    if (minPrice !== undefined && minPrice !== null) {
      queryBuilder = queryBuilder.gte('price', minPrice);
    }

    if (maxPrice !== undefined && maxPrice !== null) {
      queryBuilder = queryBuilder.lte('price', maxPrice);
    }

    if (condition) {
      queryBuilder = queryBuilder.eq('condition', condition);
    }

    // Apply sorting
    switch (sort) {
      case 'price-asc':
        queryBuilder = queryBuilder.order('price', { ascending: true });
        break;
      case 'price-desc':
        queryBuilder = queryBuilder.order('price', { ascending: false });
        break;
      default: // 'newest'
        queryBuilder = queryBuilder.order('created_at', { ascending: false });
        break;
    }

    // Apply pagination
    queryBuilder = queryBuilder.range(offset, offset + limit - 1);

    // Execute query
    const { data, error, count } = await queryBuilder;

    if (error) throw error;

    return {
      items: data || [],
      total: count || 0,
      took: Date.now() - startTime,
      searchMode: 'database'
    };
  } catch (error) {
    console.error('Error in database search:', error);
    return {
      items: [],
      total: 0,
      took: Date.now() - startTime,
      searchMode: 'database'
    };
  }
}

/**
 * For admin use: manually trigger Elasticsearch sync
 */
export async function syncElasticsearch(): Promise<string> {
  try {
    const { data, error } = await supabase.rpc('admin_sync_elasticsearch');

    if (error) throw error;

    // Clear the status cache to force a refresh
    cachedStatus = null;

    return data;
  } catch (error) {
    console.error('Error syncing Elasticsearch:', error);
    throw error;
  }
}

/**
 * For admin use: test Elasticsearch connection
 */
export async function testElasticsearchConnection(): Promise<ElasticsearchStatus> {
  // Clear the cache to force a fresh check
  cachedStatus = null;
  lastStatusCheck = 0;

  // Check the status
  return await checkElasticsearchStatus();
}

================
File: src/lib/pushNotifications.ts
================
import { supabase } from './supabase';

const publicVapidKey = 'YOUR_PUBLIC_VAPID_KEY'; // You'll need to set this up with web-push

export async function subscribeToPushNotifications() {
  try {
    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
      throw new Error('Push notifications are not supported');
    }

    // Register service worker
    const registration = await navigator.serviceWorker.register('/sw.js');

    // Subscribe to push notifications
    const subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: publicVapidKey
    });

    // Save subscription to database
    const { error } = await supabase
      .from('push_subscriptions')
      .insert({
        endpoint: subscription.endpoint,
        auth: subscription.keys?.auth || '',
        p256dh: subscription.keys?.p256dh || ''
      });

    if (error) throw error;

    return true;
  } catch (error) {
    console.error('Error subscribing to push notifications:', error);
    return false;
  }
}

================
File: src/lib/recommendations.ts
================
// src/lib/recommendations.ts
import { supabase } from './supabase';

// Interface for recommendation item
export interface RecommendationItem {
  id: string;
  title: string;
  price: number;
  condition: string;
  images: string[];
  recommendation_score?: number;
  similarity_score?: number;
  view_count?: number;
  viewed_at?: string;
}

/**
 * Track when a user views an item
 */
export async function trackItemView(itemId: string): Promise<void> {
  try {
    // First track the item view for analytics
    await supabase.rpc('track_item_view', {
      viewed_item_id: itemId
    });

    // Then track for recommendations
    await supabase.rpc('track_viewed_item', {
      viewed_item_id: itemId
    });
  } catch (error) {
    console.error('Error tracking item view:', error);
  }
}

/**
 * Get recently viewed items for the current user
 */
export async function getRecentlyViewedItems(limit: number = 8): Promise<RecommendationItem[]> {
  try {
    const { data, error } = await supabase.rpc('get_recently_viewed_items', {
      limit_val: limit
    });

    if (error) throw error;

    return data || [];
  } catch (error) {
    console.error('Error fetching recently viewed items:', error);
    return [];
  }
}

/**
 * Get similar items for a specific item
 */
export async function getSimilarItems(itemId: string, limit: number = 8): Promise<RecommendationItem[]> {
  try {
    const { data, error } = await supabase.rpc('get_similar_items', {
      item_id: itemId,
      limit_val: limit
    });

    if (error) throw error;

    return data || [];
  } catch (error) {
    console.error('Error fetching similar items:', error);
    return [];
  }
}

/**
 * Get personalized recommendations for the current user
 */
export async function getPersonalizedRecommendations(limit: number = 10): Promise<RecommendationItem[]> {
  try {
    const { data, error } = await supabase.rpc('get_recommended_items', {
      recommendation_type: 'personalized',
      limit_val: limit
    });

    if (error) throw error;

    // If no personalized recommendations, fall back to popular
    if (!data || data.length === 0) {
      return getPopularRecommendations(limit);
    }

    return data;
  } catch (error) {
    console.error('Error fetching personalized recommendations:', error);
    // Fall back to popular recommendations on error
    return getPopularRecommendations(limit);
  }
}

/**
 * Get popular recommendations
 */
export async function getPopularRecommendations(limit: number = 10): Promise<RecommendationItem[]> {
  try {
    const { data, error } = await supabase.rpc('get_recommended_items', {
      recommendation_type: 'popular',
      limit_val: limit
    });

    if (error) throw error;

    return data || [];
  } catch (error) {
    console.error('Error fetching popular recommendations:', error);
    return [];
  }
}

/**
 * For admin use: manually trigger recommendations update
 */
export async function updateRecommendations(): Promise<string> {
  try {
    const { data, error } = await supabase.rpc('admin_update_recommendations');

    if (error) throw error;

    return data;
  } catch (error) {
    console.error('Error updating recommendations:', error);
    throw error;
  }
}

================
File: src/lib/supabase.ts
================
import {createClient} from '@supabase/supabase-js';
import {Database} from '../types/supabase';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

// Add to src/lib/supabase.ts
export async function followSeller(sellerId: string) {
    const {data, error} = await supabase
        .from('seller_followers')
        .insert({seller_id: sellerId});

    if (error) throw error;
    return data;
}

export async function unfollowSeller(sellerId: string) {
    const {error} = await supabase
        .from('seller_followers')
        .delete()
        .eq('seller_id', sellerId);

    if (error) throw error;
}

export async function getFollowedSellers() {
    const {data, error} = await supabase.rpc('get_followed_sellers');
    if (error) throw error;
    return data;
}

export async function saveSearch(userId: string, params: {
    name: string;
    query: string;
    filters: Record<string, any>;
    notifyEmail?: boolean;
    notifyPush?: boolean;
}) {
    const {data, error} = await supabase
        .from('saved_searches')
        .insert({
            user_id: userId, // Add user_id explicitly
            name: params.name,
            query: params.query,
            filters: params.filters,
            notify_email: params.notifyEmail,
            notify_push: params.notifyPush,
        })
        .select()
        .single();

    if (error) throw error;
    return data;
}

export async function getSavedSearches() {
    const {data, error} = await supabase
        .from('saved_searches')
        .select('*')
        .order('created_at', {ascending: false});

    if (error) throw error;
    return data;
}

export async function deleteSavedSearch(id: string) {
    const {error} = await supabase
        .from('saved_searches')
        .delete()
        .eq('id', id);

    if (error) throw error;
}

// Add to src/lib/supabase.ts
export async function createCollection(userId: string, name: string, description?: string, isPublic: boolean = false) {
    const {data, error} = await supabase
        .from('collections')
        .insert({
            user_id: userId, // Include user_id
            name,
            description,
            is_public: isPublic,
        })
        .select()
        .single();

    if (error) throw error;
    return data;
}

export async function addToCollection(collectionId: string, itemId: string) {
    const {data, error} = await supabase
        .from('collection_items')
        .insert({collection_id: collectionId, item_id: itemId})
        .select()
        .single();

    if (error) throw error;
    return data;
}

export async function getUserCollections() {
    const {data, error} = await supabase
        .from('collections')
        .select('*, collection_items(items(id, title, price, images))')
        .order('created_at', {ascending: false});

    if (error) throw error;
    return data;
}


// src/lib/supabase.ts
// src/lib/supabase.ts
export async function manageCategory(
  action: 'create' | 'update' | 'delete',
  params: {
    id?: string;
    name: string;
    slug: string;
    parentId?: string;
  }
) {
  const { data, error } = await supabase.rpc('admin_manage_category', {
    action,
    category_id: params.id || null,
    category_name: params.name,
    category_slug: params.slug,
    p_parent_id: params.parentId || null, // Updated to match new parameter name
  });

  if (error) throw error;
  return data;
}

export async function getCategories() {
    const {data, error} = await supabase
        .from('categories')
        .select('id, name, slug, parent_id')
        .order('name');

    if (error) throw error;
    return data;
}

================
File: src/pages/Admin.tsx
================
// src/pages/Admin.tsx
import {useState, useEffect} from 'react';
import {useNavigate} from 'react-router-dom';
import {useAuth} from '../contexts/AuthContext';
import {supabase} from '../lib/supabase';
import {Shield, UserPlus, UserMinus, Search, AlertTriangle} from 'lucide-react';
import {SearchRecommendationsControls} from '../components/admin/SearchRecommendationsControls';
import {CategoryManager} from '../components/admin/CategoryManager'; // New import

interface AdminUser {
    id: string;
    username: string;
    full_name: string;
    email: string;
    role: string;
    created_at: string;
}

interface AdminLog {
    id: string;
    admin: {
        username: string;
    };
    action: string;
    details: any;
    created_at: string;
}

export function Admin() {
    const {user} = useAuth();
    const navigate = useNavigate();
    const [users, setUsers] = useState<AdminUser[]>([]);
    const [logs, setLogs] = useState<AdminLog[]>([]);
    const [loading, setLoading] = useState(true);
    const [isAdmin, setIsAdmin] = useState(false);
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [error, setError] = useState('');
    const [activeTab, setActiveTab] = useState<'users' | 'logs' | 'tools'>('users');

    useEffect(() => {
        checkAdminStatus();
    }, [user]);

    useEffect(() => {
        if (isAdmin) {
            fetchUsers();
            fetchLogs();
        }
    }, [isAdmin]);

    async function checkAdminStatus() {
        if (!user) {
            navigate('/auth');
            return;
        }

        try {
            const {data: profile, error} = await supabase
                .from('profiles')
                .select('role')
                .eq('id', user.id)
                .single();

            if (error) throw error;

            const isAdmin = profile.role === 'admin' || profile.role === 'super_admin';
            const isSuperAdmin = profile.role === 'super_admin';

            setIsAdmin(isAdmin);
            setIsSuperAdmin(isSuperAdmin);

            if (!isAdmin) {
                navigate('/');
            }
        } catch (error) {
            console.error('Error checking admin status:', error);
            navigate('/');
        }
    }

    async function fetchUsers() {
        try {
            setError('');

            // Get all profiles
            const {data: profiles, error: profilesError} = await supabase
                .from('profiles')
                .select('*')
                .order('created_at', {ascending: false});

            if (profilesError) throw profilesError;

            // Get auth users data using the secure function
            const {data: authUsers, error: authError} = await supabase
                .rpc('get_auth_users');

            if (authError) throw authError;

            // Combine the data
            const usersWithEmail = profiles?.map(profile => {
                const authUser = authUsers?.find(user => user.id === profile.id);
                return {
                    ...profile,
                    email: authUser?.email || 'N/A',
                };
            });

            setUsers(usersWithEmail || []);
        } catch (error) {
            console.error('Error fetching users:', error);
            setError('Failed to fetch users');
        } finally {
            setLoading(false);
        }
    }

    async function fetchLogs() {
        try {
            const {data, error} = await supabase
                .from('admin_logs')
                .select(`
          id,
          admin:profiles!admin_logs_admin_id_fkey(username),
          action,
          details,
          created_at
        `)
                .order('created_at', {ascending: false})
                .limit(50);

            if (error) throw error;
            setLogs(data);
        } catch (error) {
            console.error('Error fetching logs:', error);
        }
    }

    async function handlePromoteToAdmin(userId: string) {
        try {
            setError('');
            const {error} = await supabase.rpc('promote_to_admin', {
                user_id: userId,
            });

            if (error) throw error;
            fetchUsers();
            fetchLogs();
        } catch (error) {
            console.error('Error promoting user:', error);
            setError('Failed to promote user to admin');
        }
    }

    async function handleRevokeAdmin(userId: string) {
        try {
            setError('');
            const {error} = await supabase.rpc('revoke_admin', {
                user_id: userId,
            });

            if (error) throw error;
            fetchUsers();
            fetchLogs();
        } catch (error) {
            console.error('Error revoking admin:', error);
            setError('Failed to revoke admin privileges');
        }
    }

    const filteredUsers = users.filter(user =>
        user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (user.full_name && user.full_name.toLowerCase().includes(searchTerm.toLowerCase()))
    );

    if (loading) {
        return (
            <div className="container mx-auto px-4 py-8">
                <div className="animate-pulse">
                    <div className="h-8 bg-gray-200 rounded w-1/4 mb-8"/>
                    <div className="space-y-4">
                        {[...Array(5)].map((_, i) => (
                            <div key={i} className="h-12 bg-gray-200 rounded"/>
                        ))}
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-4 py-8">
            <div className="flex items-center justify-between mb-8">
                <h1 className="text-3xl font-bold flex items-center gap-2">
                    <Shield className="text-indigo-600"/>
                    Admin Dashboard
                </h1>
            </div>

            {error && (
                <div className="bg-red-50 text-red-600 p-4 rounded-lg mb-6 flex items-center gap-2">
                    <AlertTriangle size={20}/>
                    {error}
                </div>
            )}

            {/* Tab Navigation */}
            <div className="flex gap-4 mb-6">
                <button
                    onClick={() => setActiveTab('users')}
                    className={`px-4 py-2 rounded-lg ${
                        activeTab === 'users'
                            ? 'bg-indigo-600 text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                >
                    User Management
                </button>
                <button
                    onClick={() => setActiveTab('logs')}
                    className={`px-4 py-2 rounded-lg ${
                        activeTab === 'logs'
                            ? 'bg-indigo-600 text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                >
                    Admin Logs
                </button>
                <button
                    onClick={() => setActiveTab('tools')}
                    className={`px-4 py-2 rounded-lg ${
                        activeTab === 'tools'
                            ? 'bg-indigo-600 text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                >
                    Admin Tools
                </button>
            </div>

            {/* Users Tab */}
            {activeTab === 'users' && (
                <>
                    {/* Search */}
                    <div className="mb-6">
                        <div className="relative">
                            <Search
                                className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
                            />
                            <input
                                type="text"
                                placeholder="Search users..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                            />
                        </div>
                    </div>

                    {/* Users Table */}
                    <div className="bg-white rounded-lg shadow overflow-hidden mb-8">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    User
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Email
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Role
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Joined
                                </th>
                                {isSuperAdmin && (
                                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Actions
                                    </th>
                                )}
                            </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                            {filteredUsers.map((user) => (
                                <tr key={user.id} className="hover:bg-gray-50">
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <div className="flex items-center">
                                            <img
                                                src={`https://api.dicebear.com/7.x/initials/svg?seed=${user.username}`}
                                                alt={user.username}
                                                className="w-8 h-8 rounded-full"
                                            />
                                            <div className="ml-4">
                                                <div className="text-sm font-medium text-gray-900">
                                                    {user.username}
                                                </div>
                                                {user.full_name && (
                                                    <div className="text-sm text-gray-500">
                                                        {user.full_name}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {user.email}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              user.role === 'super_admin'
                                  ? 'bg-purple-100 text-purple-800'
                                  : user.role === 'admin'
                                      ? 'bg-green-100 text-green-800'
                                      : 'bg-gray-100 text-gray-800'
                          }`}
                      >
                        {user.role}
                      </span>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {new Date(user.created_at).toLocaleDateString()}
                                    </td>
                                    {isSuperAdmin && (
                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            {user.role === 'user' ? (
                                                <button
                                                    onClick={() => handlePromoteToAdmin(user.id)}
                                                    className="text-indigo-600 hover:text-indigo-900 flex items-center gap-1 ml-auto"
                                                >
                                                    <UserPlus size={16}/>
                                                    Make Admin
                                                </button>
                                            ) : user.role === 'admin' ? (
                                                <button
                                                    onClick={() => handleRevokeAdmin(user.id)}
                                                    className="text-red-600 hover:text-red-900 flex items-center gap-1 ml-auto"
                                                >
                                                    <UserMinus size={16}/>
                                                    Revoke Admin
                                                </button>
                                            ) : null}
                                        </td>
                                    )}
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                </>
            )}

            {/* Admin Logs Tab */}
            {activeTab === 'logs' && (
                <>
                    <h2 className="text-2xl font-bold mb-4">Recent Activity</h2>
                    <div className="bg-white rounded-lg shadow overflow-hidden">
                        <div className="flow-root">
                            <ul className="divide-y divide-gray-200">
                                {logs.map((log) => (
                                    <li key={log.id} className="p-4 hover:bg-gray-50">
                                        <div className="flex items-center space-x-4">
                                            <div className="flex-shrink-0">
                                                <img
                                                    src={`https://api.dicebear.com/7.x/initials/svg?seed=${log.admin.username}`}
                                                    alt={log.admin.username}
                                                    className="w-8 h-8 rounded-full"
                                                />
                                            </div>
                                            <div className="flex-1 min-w-0">
                                                <p className="text-sm font-medium text-gray-900">
                                                    {log.admin.username}
                                                </p>
                                                <p className="text-sm text-gray-500">
                                                    {log.action.replace(/_/g, ' ')} -
                                                    {JSON.stringify(log.details)}
                                                </p>
                                            </div>
                                            <div className="text-sm text-gray-500">
                                                {new Date(log.created_at).toLocaleString()}
                                            </div>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </div>
                </>
            )}

            {/* Admin Tools Tab */}
            {activeTab === 'tools' && (
                <>
                    <h2 className="text-2xl font-bold mb-4">Admin Tools</h2>

                    {/* Search & Recommendations Tools */}
                    <SearchRecommendationsControls/>

                    {/* Category Manager */}
                    <div className="mt-8">
                        <CategoryManager/>
                    </div>

                    {/* Additional tools can be added here */}
                    <div className="bg-white rounded-lg shadow p-6 mt-8">
                        <h3 className="text-xl font-semibold mb-4">More Tools Coming Soon</h3>
                        <p className="text-gray-600">
                            Additional admin tools will be added in future updates. Stay tuned!
                        </p>
                    </div>
                </>
            )}
        </div>
    );
}

================
File: src/pages/Auth.tsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { User, ShoppingBag, Package } from 'lucide-react';

export function Auth() {
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [isSeller, setIsSeller] = useState(false);
  const [error, setError] = useState('');
  const { signIn, signUp } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      if (isSignUp) {
        await signUp(email, password, { 
          data: { 
            username: username || `user_${Math.random().toString(36).slice(2, 10)}`,
            is_seller: isSeller
          }
        });
      } else {
        await signIn(email, password);
      }
      navigate('/');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  return (
    <div className="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
      <h2 className="text-2xl font-bold text-center mb-6">
        {isSignUp ? 'Create an Account' : 'Sign In'}
      </h2>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        {isSignUp && (
          <>
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                Username
              </label>
              <input
                type="text"
                id="username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                placeholder="Choose a username"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Would you like to sell items?
              </label>
              <div className="bg-gray-50 rounded-lg p-4">
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={isSeller}
                    onChange={(e) => setIsSeller(e.target.checked)}
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                  />
                  <div>
                    <p className="font-medium text-gray-900">Enable Seller Features</p>
                    <p className="text-sm text-gray-500">
                      You can buy items by default. Check this to also list items for sale.
                    </p>
                  </div>
                </label>
              </div>
            </div>
          </>
        )}

        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>

        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">
            Password
          </label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>

        <button
          type="submit"
          className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        >
          {isSignUp ? 'Sign Up' : 'Sign In'}
        </button>
      </form>

      <div className="mt-4 text-center">
        <button
          onClick={() => setIsSignUp(!isSignUp)}
          className="text-sm text-indigo-600 hover:text-indigo-500"
        >
          {isSignUp
            ? 'Already have an account? Sign in'
            : "Don't have an account? Sign up"}
        </button>
      </div>

      {isSignUp && (
        <div className="mt-6 bg-gray-50 rounded-lg p-4 text-sm text-gray-600">
          <h3 className="font-medium text-gray-900 mb-2">Account Features</h3>
          <ul className="space-y-2">
            <li className="flex items-center gap-2">
              <ShoppingBag size={16} />
              Buy items from sellers
            </li>
            <li className="flex items-center gap-2">
              <User size={16} />
              Create a profile
            </li>
            {isSeller && (
              <li className="flex items-center gap-2 text-indigo-600">
                <Package size={16} />
                List items for sale
              </li>
            )}
          </ul>
        </div>
      )}
    </div>
  );
}

================
File: src/pages/Browse.tsx
================
// src/pages/Browse.tsx
import React, {useCallback, useEffect, useState} from 'react';
import {useSearchParams} from 'react-router-dom';
import {Loader, Search, SlidersHorizontal, X} from 'lucide-react';
import {supabase} from '../lib/supabase';
import {SearchItem, searchItems, SearchParams} from '../lib/elasticsearch';
import {debounce} from 'lodash';
import {EnhancedSavedSearches} from '../components/EnhancedSavedSearches';

interface Category {
    id: string;
    name: string;
    slug: string;
}

export function Browse() {
    const [searchParams, setSearchParams] = useSearchParams();
    const [items, setItems] = useState<SearchItem[]>([]);
    const [categories, setCategories] = useState<Category[]>([]);
    const [loading, setLoading] = useState(true);
    const [showFilters, setShowFilters] = useState(false);
    const [totalItems, setTotalItems] = useState(0);
    const [searchTime, setSearchTime] = useState(0);

    // Extract filters from URL parameters
    const [filters, setFilters] = useState<SearchParams>({
        query: searchParams.get('query') || '',
        category: searchParams.get('category') || '',
        minPrice: searchParams.get('minPrice') ? parseFloat(searchParams.get('minPrice')!) : undefined,
        maxPrice: searchParams.get('maxPrice') ? parseFloat(searchParams.get('maxPrice')!) : undefined,
        condition: searchParams.get('condition') || '',
        sort: (searchParams.get('sort') || 'newest') as 'newest' | 'price-asc' | 'price-desc',
        limit: 20,
        offset: 0
    });

    useEffect(() => {
        fetchCategories();
    }, []);

    useEffect(() => {
        if (categories.length > 0) {
            performSearch();
        }
    }, [filters, categories]);

    // Create debounced search function
    const debouncedSearch = useCallback(
        debounce(() => {
            performSearch();
        }, 300),
        [filters]
    );

    // Handle search input change with debounce
    const handleSearchInputChange = (value: string) => {
        setFilters(prev => ({...prev, query: value, offset: 0}));
        debouncedSearch();
        updateSearchParams('query', value);
    };

    async function fetchCategories() {
        try {
            const {data, error} = await supabase
                .from('categories')
                .select('id, name, slug')
                .order('name');

            if (error) throw error;
            setCategories(data || []);
        } catch (error) {
            console.error('Error fetching categories:', error);
        }
    }

    async function performSearch() {
        try {
            setLoading(true);

            // Call Elasticsearch service
            const response = await searchItems(filters);

            setItems(response.items);
            setTotalItems(response.total);
            setSearchTime(response.took);
        } catch (error) {
            console.error('Error searching items:', error);
        } finally {
            setLoading(false);
        }
    }

    function handleFilterChange(key: keyof SearchParams, value: any) {
        setFilters(prev => ({...prev, [key]: value, offset: 0}));
        updateSearchParams(key, value?.toString() || '');
    }

    function updateSearchParams(key: string, value: string) {
        setSearchParams(prev => {
            if (value) {
                prev.set(key, value);
            } else {
                prev.delete(key);
            }
            return prev;
        });
    }

    function handleLoadMore() {
        setFilters(prev => ({
            ...prev,
            offset: prev.offset! + prev.limit!
        }));
    }

    function resetFilters() {
        setFilters({
            query: '',
            category: '',
            minPrice: undefined,
            maxPrice: undefined,
            condition: '',
            sort: 'newest',
            limit: 20,
            offset: 0
        });
        setSearchParams({});
    }

    return (
        <div className="container mx-auto px-4 py-8">
            {/* Search and Filter Header */}
            <div className="flex flex-col md:flex-row gap-4 mb-8">
                <div className="flex-1 relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"/>
                    <input
                        type="text"
                        placeholder="Search items..."
                        className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        value={filters.query}
                        onChange={(e) => handleSearchInputChange(e.target.value)}
                    />
                </div>

                <button
                    onClick={() => setShowFilters(!showFilters)}
                    className="flex items-center gap-2 px-4 py-2 border rounded-lg hover:bg-gray-50"
                >
                    <SlidersHorizontal size={20}/>
                    Filters
                </button>
            </div>

            {/* Search stats */}
            {totalItems > 0 && (
                <div className="text-sm text-gray-500 mb-4 flex items-center gap-2">
                    <span>Found {totalItems} items in {searchTime}ms</span>
                    {items.length > 0 && items[0].hasOwnProperty('searchMode') && (
                        <span className="px-2 py-0.5 bg-gray-100 rounded-full text-xs">
              Search mode: {(items as any)[0].searchMode === 'elasticsearch' ? 'Elasticsearch' : 'Database'}
            </span>
                    )}
                </div>
            )}

            {/* Filters Panel */}
            {showFilters && (
                <div className="bg-white p-6 rounded-lg shadow-lg mb-8">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Category
                            </label>
                            <select
                                value={filters.category}
                                onChange={(e) => handleFilterChange('category', e.target.value)}
                                className="w-full border rounded-lg p-2"
                            >
                                <option value="">All Categories</option>
                                {categories.map(category => (
                                    <option key={category.id} value={category.slug}>
                                        {category.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Price Range
                            </label>
                            <div className="flex gap-2">
                                <input
                                    type="number"
                                    placeholder="Min"
                                    value={filters.minPrice || ''}
                                    onChange={(e) => handleFilterChange('minPrice', e.target.value ? parseFloat(e.target.value) : undefined)}
                                    className="w-full border rounded-lg p-2"
                                />
                                <input
                                    type="number"
                                    placeholder="Max"
                                    value={filters.maxPrice || ''}
                                    onChange={(e) => handleFilterChange('maxPrice', e.target.value ? parseFloat(e.target.value) : undefined)}
                                    className="w-full border rounded-lg p-2"
                                />
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Condition
                            </label>
                            <select
                                value={filters.condition}
                                onChange={(e) => handleFilterChange('condition', e.target.value)}
                                className="w-full border rounded-lg p-2"
                            >
                                <option value="">Any Condition</option>
                                <option value="new">New</option>
                                <option value="like_new">Like New</option>
                                <option value="good">Good</option>
                                <option value="fair">Fair</option>
                                <option value="poor">Poor</option>
                            </select>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Sort By
                            </label>
                            <select
                                value={filters.sort}
                                onChange={(e) => handleFilterChange('sort', e.target.value as any)}
                                className="w-full border rounded-lg p-2"
                            >
                                <option value="newest">Newest First</option>
                                <option value="price-asc">Price: Low to High</option>
                                <option value="price-desc">Price: High to Low</option>
                            </select>
                        </div>
                    </div>

                    <div className="flex justify-end mt-4">
                        <button
                            onClick={resetFilters}
                            className="text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1"
                        >
                            <X size={16}/>
                            Clear Filters
                        </button>
                    </div>
                </div>
            )}

            <div className="mb-8">
                <EnhancedSavedSearches/>
            </div>

            {/* Items Grid */}
            {loading && items.length === 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    {Array.from({length: 8}).map((_, i) => (
                        <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden">
                            <div className="aspect-square bg-gray-200 animate-pulse"/>
                            <div className="p-4">
                                <div className="h-4 bg-gray-200 rounded animate-pulse mb-2"/>
                                <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3"/>
                            </div>
                        </div>
                    ))}
                </div>
            ) : items.length > 0 ? (
                <>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        {items.map((item) => (
                            <a
                                key={item.id}
                                href={`/items/${item.id}`}
                                className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
                            >
                                <div className="aspect-square relative">
                                    <img
                                        src={item.images[0] || 'https://via.placeholder.com/400'}
                                        alt={item.title}
                                        className="w-full h-full object-cover"
                                    />
                                    <div
                                        className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                                        ${item.price}
                                    </div>
                                </div>
                                <div className="p-4">
                                    <h3 className="font-semibold text-lg mb-1 truncate">
                                        {item.title}
                                    </h3>
                                    <div
                                        className="flex items-center justify-between text-sm text-gray-600">
                                        <span>{item.condition.replace('_', ' ')}</span>
                                        <span>★ {item.seller.rating}</span>
                                    </div>
                                </div>
                            </a>
                        ))}
                    </div>

                    {/* Load more button */}
                    {items.length < totalItems && (
                        <div className="text-center mt-8">
                            <button
                                onClick={handleLoadMore}
                                className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 inline-flex items-center gap-2"
                                disabled={loading}
                            >
                                {loading ? (
                                    <>
                                        <Loader size={16} className="animate-spin"/>
                                        Loading...
                                    </>
                                ) : (
                                    <>Load More</>
                                )}
                            </button>
                        </div>
                    )}
                </>
            ) : (
                <div className="text-center py-12">
                    <p className="text-gray-600">No items found matching your criteria.</p>
                </div>
            )}
        </div>
    );
}

================
File: src/pages/CreateListing.tsx
================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';
import { Upload, X, ImageIcon } from 'lucide-react';

interface Category {
  id: string;
  name: string;
}

interface Profile {
  id: string;
  username: string;
}

export function CreateListing() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [images, setImages] = useState<File[]>([]);
  const [imageUrls, setImageUrls] = useState<string[]>([]);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    price: '',
    condition: '',
    category_id: '',
    selling_method: 'fixed',
    location: ''
  });

  useEffect(() => {
    if (user) {
      fetchProfile();
      fetchCategories();
    } else {
      navigate('/auth');
    }
  }, [user]);

  async function fetchProfile() {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, username')
        .eq('id', user!.id)
        .single();

      if (error) throw error;
      setProfile(data);
    } catch (error) {
      console.error('Error fetching profile:', error);
      // If no profile exists, create one
      if ((error as any).code === 'PGRST116') {
        await createProfile();
      }
    }
  }

  async function createProfile() {
    try {
      const username = `user_${Math.random().toString(36).slice(2, 10)}`;
      const { data, error } = await supabase
        .from('profiles')
        .insert({
          id: user!.id,
          username,
          full_name: '',
          is_seller: true
        })
        .select()
        .single();

      if (error) throw error;
      setProfile(data);
    } catch (error) {
      console.error('Error creating profile:', error);
      navigate('/auth');
    }
  }

  async function fetchCategories() {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('id, name')
        .order('name');

      if (error) throw error;
      setCategories(data || []);
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  }

  function handleImageChange(e: React.ChangeEvent<HTMLInputElement>) {
    const files = Array.from(e.target.files || []);
    const remainingSlots = 5 - images.length;
    const newImages = [...images, ...files.slice(0, remainingSlots)];
    setImages(newImages);

    // Create preview URLs
    const newImageUrls = newImages.map(file => URL.createObjectURL(file));
    setImageUrls(newImageUrls);
  }

  function removeImage(index: number) {
    const newImages = images.filter((_, i) => i !== index);
    const newImageUrls = imageUrls.filter((_, i) => i !== index);
    
    // Revoke the old URL to prevent memory leaks
    URL.revokeObjectURL(imageUrls[index]);
    
    setImages(newImages);
    setImageUrls(newImageUrls);
  }

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!user || !profile) return;

    try {
      setLoading(true);

      // Upload images to storage
      const uploadedImageUrls = await Promise.all(
        images.map(async (file) => {
          const fileExt = file.name.split('.').pop();
          const fileName = `${Math.random()}.${fileExt}`;
          const filePath = `items/${fileName}`;

          const { error: uploadError } = await supabase.storage
            .from('items')
            .upload(filePath, file);

          if (uploadError) throw uploadError;

          const { data: { publicUrl } } = supabase.storage
            .from('items')
            .getPublicUrl(filePath);

          return publicUrl;
        })
      );

      // Create item
      const { error: insertError } = await supabase
        .from('items')
        .insert({
          ...formData,
          price: parseFloat(formData.price),
          seller_id: user.id,
          images: uploadedImageUrls,
          is_active: true
        });

      if (insertError) throw insertError;

      navigate('/profile/' + user.id);
    } catch (error) {
      console.error('Error creating listing:', error);
    } finally {
      setLoading(false);
    }
  }

  if (!profile) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Setting up your profile...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Create New Listing</h1>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Images */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Images (up to 5)
            </label>
            <div className="grid grid-cols-5 gap-4">
              {imageUrls.map((url, index) => (
                <div key={index} className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden">
                  <img
                    src={url}
                    alt={`Preview ${index + 1}`}
                    className="w-full h-full object-cover"
                  />
                  <button
                    type="button"
                    onClick={() => removeImage(index)}
                    className="absolute top-1 right-1 bg-white rounded-full p-1 shadow-md hover:bg-gray-100"
                  >
                    <X size={16} />
                  </button>
                </div>
              ))}
              {Array.from({ length: Math.max(0, 5 - imageUrls.length) }).map((_, index) => (
                <label
                  key={`empty-${index}`}
                  className={`aspect-square border-2 border-dashed rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-indigo-500 transition-colors ${
                    index === 0 && imageUrls.length === 0
                      ? 'border-indigo-500'
                      : 'border-gray-300'
                  }`}
                >
                  {index === 0 && imageUrls.length === 0 ? (
                    <>
                      <ImageIcon className="w-8 h-8 text-indigo-500 mb-2" />
                      <span className="text-sm text-indigo-600 text-center px-2">
                        Add main photo
                      </span>
                    </>
                  ) : (
                    <>
                      <Upload className="w-6 h-6 text-gray-400" />
                      <span className="text-xs text-gray-500 mt-1">Add photo</span>
                    </>
                  )}
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="hidden"
                  />
                </label>
              ))}
            </div>
            <p className="mt-2 text-sm text-gray-500">
              First image will be the main photo. Add up to 5 photos.
            </p>
          </div>

          {/* Title */}
          <div>
            <label
              htmlFor="title"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              Title
            </label>
            <input
              type="text"
              id="title"
              value={formData.title}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, title: e.target.value }))
              }
              className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              required
            />
          </div>

          {/* Description */}
          <div>
            <label
              htmlFor="description"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              Description
            </label>
            <textarea
              id="description"
              value={formData.description}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, description: e.target.value }))
              }
              rows={4}
              className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              required
            />
          </div>

          {/* Price and Category */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label
                htmlFor="price"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                Price
              </label>
              <div className="relative">
                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                  $
                </span>
                <input
                  type="number"
                  id="price"
                  value={formData.price}
                  onChange={(e) =>
                    setFormData((prev) => ({ ...prev, price: e.target.value }))
                  }
                  className="w-full pl-8 rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  min="0"
                  step="0.01"
                  required
                />
              </div>
            </div>

            <div>
              <label
                htmlFor="category"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                Category
              </label>
              <select
                id="category"
                value={formData.category_id}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, category_id: e.target.value }))
                }
                className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              >
                <option value="">Select a category</option>
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Condition and Selling Method */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label
                htmlFor="condition"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                Condition
              </label>
              <select
                id="condition"
                value={formData.condition}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, condition: e.target.value }))
                }
                className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              >
                <option value="">Select condition</option>
                <option value="new">New</option>
                <option value="like_new">Like New</option>
                <option value="good">Good</option>
                <option value="fair">Fair</option>
                <option value="poor">Poor</option>
              </select>
            </div>

            <div>
              <label
                htmlFor="selling_method"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                Selling Method
              </label>
              <select
                id="selling_method"
                value={formData.selling_method}
                onChange={(e) =>
                  setFormData((prev) => ({
                    ...prev,
                    selling_method: e.target.value }))
                }
                className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              >
                <option value="fixed">Fixed Price</option>
                <option value="negotiation">Accept Offers</option>
                <option value="auction">Auction</option>
              </select>
            </div>
          </div>

          {/* Location */}
          <div>
            <label
              htmlFor="location"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              Location
            </label>
            <input
              type="text"
              id="location"
              value={formData.location}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, location: e.target.value }))
              }
              className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              required
            />
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={loading || images.length === 0}
            className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Creating Listing...' : 'Create Listing'}
          </button>
        </form>
      </div>
    </div>
  );
}

================
File: src/pages/Home.tsx
================
// src/pages/Home.tsx
import React from 'react';
import {Link} from 'react-router-dom';
import {Search, Tag, ShieldCheck, TrendingUp} from 'lucide-react';
import {AIRecommendations} from '../components/AIRecommendations';
import {RecentlyViewedItems} from '../components/RecentlyViewedItems';
import {useAuth} from '../contexts/AuthContext';

export function Home() {
    const {user} = useAuth();

    const featuredCategories = [
        {
            name: 'Furniture',
            image: 'https://images.unsplash.com/photo-1555041469-a586c61ea9bc?auto=format&fit=crop&q=80&w=600'
        },
        {
            name: 'Electronics',
            image: 'https://images.unsplash.com/photo-1498049794561-7780e7231661?auto=format&fit=crop&q=80&w=600'
        },
        {
            name: 'Home Decor',
            image: 'https://images.unsplash.com/photo-1513519245088-0e12902e5a38?auto=format&fit=crop&q=80&w=600'
        },
        {
            name: 'Kitchen',
            image: 'https://images.unsplash.com/photo-1556911220-bff31c812dba?auto=format&fit=crop&q=80&w=600'
        }
    ];

    return (
        <div className="space-y-16">
            {/* Hero Section */}
            <section className="relative h-[500px] flex items-center">
                <div className="absolute inset-0 z-0">
                    <img
                        src="https://images.unsplash.com/photo-1529720317453-c8da503f2051?auto=format&fit=crop&q=80&w=2000"
                        alt="Treasure Trove Hero"
                        className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-black bg-opacity-50"/>
                </div>

                <div className="container mx-auto px-4 relative z-10">
                    <div className="max-w-2xl text-white">
                        <h1 className="text-5xl font-bold mb-6">
                            Discover Unique Treasures for Your Home
                        </h1>
                        <p className="text-xl mb-8">
                            Buy and sell pre-loved items in your community. Find great deals or
                            give your items a second life.
                        </p>
                        <div className="flex gap-4">
                            <Link
                                to="/browse"
                                className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition"
                            >
                                Start Browsing
                            </Link>
                            <Link
                                to="/create-listing"
                                className="bg-white text-indigo-600 px-6 py-3 rounded-lg hover:bg-gray-100 transition"
                            >
                                Sell an Item
                            </Link>
                        </div>
                    </div>
                </div>
            </section>

            {/* Personalized Recommendations (only for logged in users) */}
            {user && (
                <section className="container mx-auto px-4">
                    <AIRecommendations type="personalized" limit={12}/>
                </section>
            )}

            {/* Recently Viewed Items (only for logged in users) */}
            {user && (
                <section className="container mx-auto px-4">
                    <RecentlyViewedItems limit={8}/>
                </section>
            )}

            {/* Features Section */}
            <section className="container mx-auto px-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div className="text-center">
                        <div
                            className="bg-indigo-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                            <Search className="w-8 h-8 text-indigo-600"/>
                        </div>
                        <h3 className="text-xl font-semibold mb-2">Easy to Browse</h3>
                        <p className="text-gray-600">
                            Find exactly what you're looking for with our powerful search and filter
                            system.
                        </p>
                    </div>

                    <div className="text-center">
                        <div
                            className="bg-indigo-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                            <Tag className="w-8 h-8 text-indigo-600"/>
                        </div>
                        <h3 className="text-xl font-semibold mb-2">Great Deals</h3>
                        <p className="text-gray-600">
                            Get the best prices on quality pre-loved items from trusted sellers.
                        </p>
                    </div>

                    <div className="text-center">
                        <div
                            className="bg-indigo-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                            <ShieldCheck className="w-8 h-8 text-indigo-600"/>
                        </div>
                        <h3 className="text-xl font-semibold mb-2">Secure Transactions</h3>
                        <p className="text-gray-600">
                            Shop with confidence using our secure payment and escrow system.
                        </p>
                    </div>
                </div>
            </section>

            {/* Featured Categories */}
            <section className="container mx-auto px-4">
                <div className="flex items-center justify-between mb-8">
                    <h2 className="text-3xl font-bold">Featured Categories</h2>
                    <Link to="/browse" className="text-indigo-600 hover:text-indigo-700">
                        View All Categories →
                    </Link>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    {featuredCategories.map((category) => (
                        <Link
                            key={category.name}
                            to={`/browse?category=${category.name.toLowerCase()}`}
                            className="group relative h-64 overflow-hidden rounded-lg"
                        >
                            <img
                                src={category.image}
                                alt={category.name}
                                className="w-full h-full object-cover group-hover:scale-105 transition duration-300"
                            />
                            <div
                                className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"/>
                            <h3 className="absolute bottom-4 left-4 text-xl font-semibold text-white">
                                {category.name}
                            </h3>
                        </Link>
                    ))}
                </div>
            </section>

            {/* Popular Items Section */}
            <section className="container mx-auto px-4 pb-16">
                <AIRecommendations type="popular" limit={12} title="Trending Now"/>
            </section>
        </div>
    );
}

================
File: src/pages/ItemDetails.tsx
================
// src/pages/ItemDetails.tsx
import React, {useEffect, useState} from 'react';
import {useNavigate, useParams} from 'react-router-dom';
import {AlertTriangle, MessageSquare} from 'lucide-react';
import {supabase} from '../lib/supabase';
import {useAuth} from '../contexts/AuthContext';
import {useItemViews} from '../hooks/useAnalytics';
import {trackItemView} from '../lib/recommendations';
import {SimilarItems} from '../components/SimilarItems';
import {RecentlyViewedItems} from '../components/RecentlyViewedItems';
import {ShareListing} from '../components/ShareListing'; // New import
import {AddToCollection} from '../components/AddToCollection'; // New import
import {WishListButton} from '../components/WishListButton';
import {PriceAlertButton} from '../components/PriceAlertButton';
import {PriceHistory} from '../components/PriceHistory';
import {StockAlertButton} from '../components/StockAlertButton';
import {UpdateStockStatus} from '../components/UpdateStockStatus';


interface Item {
    id: string;
    title: string;
    description: string;
    price: number;
    condition: string;
    selling_method: string;
    images: string[];
    created_at: string;
    views: number;
    stock_status: string; // Add this line
    seller: {
        id: string;
        username: string;
        rating: number;
        total_ratings: number;
    };
}

export function ItemDetails() {
    const {id} = useParams<{ id: string }>();
    const navigate = useNavigate();
    const {user} = useAuth();
    const [item, setItem] = useState<Item | null>(null);
    const [loading, setLoading] = useState(true);
    const [selectedImage, setSelectedImage] = useState(0);
    const [offerAmount, setOfferAmount] = useState('');
    const [showOfferForm, setShowOfferForm] = useState(false);
    const [error, setError] = useState('');
    const [viewerCount, setViewerCount] = useState(0);

    // Track item views for analytics
    useItemViews(id!);

    useEffect(() => {
        if (id) {
            fetchItem();
            fetchViewerCount();

            // Track view for recommendations
            if (user) {
                trackItemView(id);
            }
        }
    }, [id, user]);

    async function fetchItem() {
        try {
            setLoading(true);
            const {data, error} = await supabase
                .from('items')
                .select(`
          *,
          seller:seller_id (
            id,
            username,
            rating,
            total_ratings
          )
        `)
                .eq('id', id)
                .single();

            if (error) throw error;
            setItem(data);
        } catch (error) {
            console.error('Error fetching item:', error);
        } finally {
            setLoading(false);
        }
    }

    async function fetchViewerCount() {
        try {
            const {data, error} = await supabase.rpc('get_unique_item_viewers', {
                item_id: id,
            });

            if (error) throw error;
            setViewerCount(data || 0);
        } catch (error) {
            console.error('Error fetching viewer count:', error);
        }
    }

    async function handleMakeOffer() {
        if (!user) {
            navigate('/auth');
            return;
        }

        try {
            setError('');
            const {error} = await supabase
                .from('offers')
                .insert({
                    item_id: id,
                    buyer_id: user.id,
                    amount: parseFloat(offerAmount),
                    status: 'pending',
                });

            if (error) throw error;

            // Create notification for seller
            await supabase.rpc('create_notification', {
                user_id: item?.seller.id,
                title: 'New Offer',
                content: `You received a new offer of $${offerAmount} for "${item?.title}"`,
            });

            setShowOfferForm(false);
            setOfferAmount('');
        } catch (error) {
            console.error('Error making offer:', error);
            setError('Failed to submit offer. Please try again.');
        }
    }

    async function handleContactSeller() {
        if (!user) {
            navigate('/auth');
            return;
        }

        try {
            setError('');
            const {error} = await supabase
                .from('messages')
                .insert({
                    sender_id: user.id,
                    receiver_id: item?.seller.id,
                    item_id: id,
                    content: `Hi, I'm interested in "${item?.title}"`,
                });

            if (error) throw error;
            navigate('/messages');
        } catch (error) {
            console.error('Error sending message:', error);
            setError('Failed to send message. Please try again.');
        }
    }

    if (loading) {
        return (
            <div className="container mx-auto px-4 py-8">
                <div className="animate-pulse">
                    <div className="h-96 bg-gray-200 rounded-lg mb-8"/>
                    <div className="h-8 bg-gray-200 rounded mb-4"/>
                    <div className="h-4 bg-gray-200 rounded w-1/4 mb-8"/>
                    <div className="h-24 bg-gray-200 rounded mb-8"/>
                </div>
            </div>
        );
    }

    if (!item) {
        return (
            <div className="container mx-auto px-4 py-8 text-center">
                <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4"/>
                <h2 className="text-2xl font-bold mb-2">Item Not Found</h2>
                <p className="text-gray-600 mb-4">
                    The item you're looking for might have been removed or doesn't exist.
                </p>
                <button
                    onClick={() => navigate('/browse')}
                    className="text-indigo-600 hover:text-indigo-700"
                >
                    Browse Other Items →
                </button>
            </div>
        );
    }

    const isOwnItem = user?.id === item.seller.id;

    return (
        <div className="container mx-auto px-4 py-8">
            {error && (
                <div className="bg-red-50 text-red-600 p-4 rounded-lg mb-6 flex items-center gap-2">
                    <AlertTriangle size={20}/>
                    {error}
                </div>
            )}

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
                {/* Images */}
                <div>
                    <div className="aspect-square rounded-lg overflow-hidden mb-4">
                        <img
                            src={item.images[selectedImage] || 'https://via.placeholder.com/800'}
                            alt={item.title}
                            className="w-full h-full object-cover"
                        />
                    </div>
                    {item.images.length > 1 && (
                        <div className="grid grid-cols-4 gap-4">
                            {item.images.map((image, index) => (
                                <button
                                    key={index}
                                    onClick={() => setSelectedImage(index)}
                                    className={`aspect-square rounded-lg overflow-hidden ${
                                        selectedImage === index
                                            ? 'ring-2 ring-indigo-500'
                                            : 'opacity-75 hover:opacity-100'
                                    }`}
                                >
                                    <img
                                        src={image}
                                        alt={`${item.title} - Image ${index + 1}`}
                                        className="w-full h-full object-cover"
                                    />
                                </button>
                            ))}
                        </div>
                    )}
                </div>

                {/* Details */}
                <div>
                    <h1 className="text-3xl font-bold mb-2">{item.title}</h1>
                    <div className="flex items-center gap-4 mb-2">
                        <span className="text-2xl font-bold">${item.price}</span>
                        <span className="text-gray-600">
    Condition: {item.condition.replace('_', ' ')}
  </span>
                        <UpdateStockStatus
                            itemId={item.id}
                            currentStatus={item.stock_status}
                            isSeller={isOwnItem}
                            onUpdate={(newStatus) => setItem({...item, stock_status: newStatus})}
                        />
                    </div>


                    <div className="text-gray-600 mb-6">
                        {item.views} views • {viewerCount} unique visitors
                    </div>

                    <div className="prose max-w-none mb-8">
                        <p>{item.description}</p>
                    </div>
                    <PriceHistory itemId={item.id} currentPrice={item.price}/>

                    <div className="flex items-center gap-4 mb-8">
                        <img
                            src={`https://api.dicebear.com/7.x/initials/svg?seed=${item.seller.username}`}
                            alt={item.seller.username}
                            className="w-12 h-12 rounded-full"
                        />
                        <div>
                            <p className="font-medium">{item.seller.username}</p>
                            <p className="text-sm text-gray-600">
                                ★ {item.seller.rating} ({item.seller.total_ratings} ratings)
                            </p>
                        </div>
                    </div>

                    {!isOwnItem ? (
                        <div className="space-y-4">
                            {item.selling_method === 'fixed' ? (
                                <button
                                    onClick={handleContactSeller}
                                    className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700"
                                >
                                    Buy Now
                                </button>
                            ) : (
                                <>
                                    <button
                                        onClick={() => setShowOfferForm(!showOfferForm)}
                                        className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700"
                                    >
                                        Make an Offer
                                    </button>
                                    {showOfferForm && (
                                        <div className="bg-gray-50 p-4 rounded-lg">
                                            <input
                                                type="number"
                                                value={offerAmount}
                                                onChange={(e) => setOfferAmount(e.target.value)}
                                                placeholder="Enter your offer amount"
                                                className="w-full mb-2 p-2 border rounded"
                                            />
                                            <button
                                                onClick={handleMakeOffer}
                                                className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700"
                                            >
                                                Submit Offer
                                            </button>
                                        </div>
                                    )}
                                </>
                            )}

                            <button
                                onClick={handleContactSeller}
                                className="w-full border border-gray-300 py-3 rounded-lg hover:bg-gray-50 flex items-center justify-center gap-2"
                            >
                                <MessageSquare size={20}/>
                                Contact Seller
                            </button>

                            <div className="flex gap-4">
                                <AddToCollection itemId={item.id}/>
                                <WishListButton itemId={item.id} size={20}/>
                                <PriceAlertButton itemId={item.id} price={item.price} size={20}/>
                                <StockAlertButton itemId={item.id} stockStatus={item.stock_status}
                                                  size={20}/>
                                <ShareListing itemId={item.id} title={item.title}/>
                            </div>
                        </div>
                    ) : (
                        <div className="bg-gray-50 p-4 rounded-lg">
                            <p className="text-gray-600 mb-4">This is your item listing</p>

                            <div className="flex flex-col gap-3">
                                <UpdateStockStatus
                                    itemId={item.id}
                                    currentStatus={item.stock_status}
                                    isSeller={true}
                                    onUpdate={(newStatus) => setItem({
                                        ...item,
                                        stock_status: newStatus
                                    })}
                                />

                                <button
                                    onClick={() => navigate('/messages')}
                                    className="w-full border border-indigo-600 text-indigo-600 py-2 rounded-lg hover:bg-indigo-50"
                                >
                                    View Messages
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* Similar Items */}
            <SimilarItems itemId={id!}/>

            {/* Recently Viewed Items */}
            {user && <RecentlyViewedItems/>}
        </div>
    );
}

================
File: src/pages/Messages.tsx
================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';
import { Send } from 'lucide-react';
import { format } from 'date-fns';

interface Message {
  id: string;
  content: string;
  created_at: string;
  sender_id: string;
  receiver_id: string;
  item_id: string | null;
  sender: {
    username: string;
  };
  item?: {
    title: string;
    images: string[];
  };
}

interface Conversation {
  user_id: string;
  username: string;
  last_message: string;
  last_message_time: string;
  unread_count: number;
}

export function Messages() {
  const { user } = useAuth();
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [selectedUser, setSelectedUser] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      fetchConversations();
      const subscription = supabase
        .channel('messages')
        .on('postgres_changes', {
          event: 'INSERT',
          schema: 'public',
          table: 'messages',
          filter: `receiver_id=eq.${user.id}`,
        }, (payload) => {
          handleNewMessage(payload.new as Message);
        })
        .subscribe();

      return () => {
        subscription.unsubscribe();
      };
    }
  }, [user]);

  useEffect(() => {
    if (selectedUser) {
      fetchMessages(selectedUser);
      markMessagesAsRead(selectedUser);
    }
  }, [selectedUser]);

  async function fetchConversations() {
    try {
      const { data, error } = await supabase.rpc('get_conversations', {
        user_id: user!.id
      });

      if (error) throw error;
      setConversations(data || []);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching conversations:', error);
    }
  }

  async function fetchMessages(otherUserId: string) {
    try {
      const { data, error } = await supabase
        .from('messages')
        .select(`
          *,
          sender:sender_id(username),
          item:item_id(title, images)
        `)
        .or(`sender_id.eq.${user!.id},receiver_id.eq.${user!.id}`)
        .or(`sender_id.eq.${otherUserId},receiver_id.eq.${otherUserId}`)
        .order('created_at', { ascending: true });

      if (error) throw error;
      setMessages(data || []);
    } catch (error) {
      console.error('Error fetching messages:', error);
    }
  }

  async function markMessagesAsRead(senderId: string) {
    try {
      const { error } = await supabase
        .from('messages')
        .update({ read: true })
        .eq('sender_id', senderId)
        .eq('receiver_id', user!.id)
        .eq('read', false);

      if (error) throw error;
      fetchConversations();
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  }

  async function handleSendMessage(e: React.FormEvent) {
    e.preventDefault();
    if (!newMessage.trim() || !selectedUser) return;

    try {
      const { error } = await supabase.from('messages').insert({
        content: newMessage.trim(),
        sender_id: user!.id,
        receiver_id: selectedUser
      });

      if (error) throw error;
      setNewMessage('');
      fetchMessages(selectedUser);
      fetchConversations();
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }

  function handleNewMessage(message: Message) {
    if (selectedUser === message.sender_id) {
      setMessages(prev => [...prev, message]);
    }
    fetchConversations();
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="grid grid-cols-12 min-h-[600px]">
          {/* Conversations List */}
          <div className="col-span-4 border-r">
            <div className="p-4 border-b">
              <h2 className="text-xl font-semibold">Messages</h2>
            </div>
            <div className="overflow-y-auto h-[calc(600px-4rem)]">
              {loading ? (
                <div className="p-4 space-y-4">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <div key={i} className="animate-pulse">
                      <div className="h-12 bg-gray-200 rounded" />
                    </div>
                  ))}
                </div>
              ) : conversations.length > 0 ? (
                conversations.map((conversation) => (
                  <button
                    key={conversation.user_id}
                    onClick={() => setSelectedUser(conversation.user_id)}
                    className={`w-full p-4 text-left hover:bg-gray-50 ${
                      selectedUser === conversation.user_id ? 'bg-gray-50' : ''
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      <img
                        src={`https://api.dicebear.com/7.x/initials/svg?seed=${conversation.username}`}
                        alt={conversation.username}
                        className="w-10 h-10 rounded-full"
                      />
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                          <p className="font-medium truncate">
                            {conversation.username}
                          </p>
                          <p className="text-xs text-gray-500">
                            {format(new Date(conversation.last_message_time), 'MMM d')}
                          </p>
                        </div>
                        <p className="text-sm text-gray-500 truncate">
                          {conversation.last_message}
                        </p>
                      </div>
                      {conversation.unread_count > 0 && (
                        <span className="bg-indigo-600 text-white text-xs px-2 py-1 rounded-full">
                          {conversation.unread_count}
                        </span>
                      )}
                    </div>
                  </button>
                ))
              ) : (
                <div className="p-4 text-center text-gray-500">
                  No conversations yet
                </div>
              )}
            </div>
          </div>

          {/* Messages */}
          <div className="col-span-8 flex flex-col">
            {selectedUser ? (
              <>
                <div className="p-4 border-b">
                  <div className="flex items-center gap-3">
                    <img
                      src={`https://api.dicebear.com/7.x/initials/svg?seed=${
                        conversations.find(c => c.user_id === selectedUser)?.username
                      }`}
                      alt="User avatar"
                      className="w-10 h-10 rounded-full"
                    />
                    <h3 className="font-medium">
                      {conversations.find(c => c.user_id === selectedUser)?.username}
                    </h3>
                  </div>
                </div>

                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((message) => {
                    const isOwn = message.sender_id === user!.id;
                    return (
                      <div
                        key={message.id}
                        className={`flex ${isOwn ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[70%] ${
                            isOwn
                              ? 'bg-indigo-600 text-white'
                              : 'bg-gray-100 text-gray-900'
                          } rounded-lg px-4 py-2`}
                        >
                          {message.item && (
                            <div className="mb-2 p-2 bg-white/10 rounded">
                              <div className="flex items-center gap-2">
                                {message.item.images?.[0] && (
                                  <img
                                    src={message.item.images[0]}
                                    alt={message.item.title}
                                    className="w-10 h-10 object-cover rounded"
                                  />
                                )}
                                <p className="text-sm">{message.item.title}</p>
                              </div>
                            </div>
                          )}
                          <p>{message.content}</p>
                          <p
                            className={`text-xs mt-1 ${
                              isOwn ? 'text-white/70' : 'text-gray-500'
                            }`}
                          >
                            {format(new Date(message.created_at), 'HH:mm')}
                          </p>
                        </div>
                      </div>
                    );
                  })}
                </div>

                <form onSubmit={handleSendMessage} className="p-4 border-t">
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      placeholder="Type a message..."
                      className="flex-1 rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    />
                    <button
                      type="submit"
                      className="bg-indigo-600 text-white p-2 rounded-lg hover:bg-indigo-700"
                    >
                      <Send size={20} />
                    </button>
                  </div>
                </form>
              </>
            ) : (
              <div className="flex-1 flex items-center justify-center text-gray-500">
                Select a conversation to start messaging
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/Notifications.tsx
================
import React from 'react';

export function Notifications() {
  return (
    <div>
      <h1>Notifications</h1>
      {/* Implementation coming soon */}
    </div>
  );
}

================
File: src/pages/PriceAlerts.tsx
================
// src/pages/PriceAlerts.tsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { BellRing, Loader, AlertTriangle, ArrowDown, X } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';

interface PriceAlert {
  id: string;
  item_id: string;
  title: string;
  current_price: number;
  target_price: number | null;
  images: string[];
  created_at: string;
  notify_email: boolean;
  notify_push: boolean;
}

export function PriceAlerts() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [alerts, setAlerts] = useState<PriceAlert[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!user) {
      navigate('/auth');
      return;
    }

    fetchPriceAlerts();
  }, [user]);

  async function fetchPriceAlerts() {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .rpc('get_price_alerts');

      if (error) throw error;
      setAlerts(data || []);
    } catch (error) {
      console.error('Error fetching price alerts:', error);
      setError('Failed to load price alerts. Please try again later.');
    } finally {
      setLoading(false);
    }
  }

  async function handleRemoveAlert(alertId: string) {
    try {
      // Get the item_id from the alert to toggle
      const alert = alerts.find(a => a.id === alertId);
      if (!alert) return;

      const { error } = await supabase
        .rpc('toggle_price_alert', { item_id: alert.item_id });

      if (error) throw error;

      // Remove the alert from the state
      setAlerts(alerts.filter(a => a.id !== alertId));
    } catch (error) {
      console.error('Error removing price alert:', error);
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <Loader size={40} className="animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Loading your price alerts...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <AlertTriangle size={40} className="text-red-500 mx-auto mb-4" />
        <p className="text-red-500 mb-4">{error}</p>
        <button
          onClick={fetchPriceAlerts}
          className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <BellRing className="text-purple-500" />
          Price Alerts
        </h1>
      </div>

      {alerts.length === 0 ? (
        <div className="bg-gray-50 p-12 rounded-lg text-center">
          <BellRing size={64} className="mx-auto mb-4 text-gray-300" />
          <h2 className="text-xl font-semibold mb-2">No price alerts set</h2>
          <p className="text-gray-600 mb-6">Get notified when items you're interested in drop in price</p>
          <Link
            to="/browse"
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700"
          >
            Browse Items
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {alerts.map((alert) => (
            <div key={alert.id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              <div className="relative">
                <button
                  onClick={() => handleRemoveAlert(alert.id)}
                  className="absolute top-2 right-2 bg-white bg-opacity-70 hover:bg-opacity-100 p-1 rounded-full z-10"
                  aria-label="Remove alert"
                >
                  <X size={18} className="text-gray-500" />
                </button>
                <Link to={`/items/${alert.item_id}`} className="block">
                  <div className="aspect-square relative">
                    <img
                      src={alert.images[0] || 'https://via.placeholder.com/400'}
                      alt={alert.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                </Link>
              </div>
              <div className="p-4">
                <Link to={`/items/${alert.item_id}`} className="block">
                  <h3 className="font-semibold text-lg mb-1 truncate">{alert.title}</h3>
                </Link>
                <div className="flex items-center gap-2 mb-2">
                  <div className="text-lg font-medium">${alert.current_price}</div>
                  {alert.target_price && (
                    <div className="flex items-center gap-1 text-sm bg-purple-100 text-purple-800 px-2 py-1 rounded-full">
                      <ArrowDown size={12} />
                      <span>Alert at ${alert.target_price}</span>
                    </div>
                  )}
                </div>
                <div className="flex items-center justify-between text-xs text-gray-500">
                  <div>
                    Created {new Date(alert.created_at).toLocaleDateString()}
                  </div>
                  <div className="flex gap-1">
                    {alert.notify_email && (
                      <span className="bg-gray-100 px-2 py-0.5 rounded">Email</span>
                    )}
                    {alert.notify_push && (
                      <span className="bg-gray-100 px-2 py-0.5 rounded">Push</span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/pages/Profile.tsx
================
// src/pages/Profile.tsx
import React, {useState, useEffect} from 'react';
import {useParams, Link} from 'react-router-dom';
import {useAuth} from '../contexts/AuthContext';
import {supabase} from '../lib/supabase';
import {Star, MessageSquare, Package, Settings, ShoppingBag, Heart} from 'lucide-react';
import {useProfileViews} from '../hooks/useAnalytics';
import {FollowSellerButton} from '../components/FollowSellerButton'; // New import
import {Collections} from '../components/Collections'; // New import

interface Profile {
    id: string;
    username: string;
    full_name: string;
    avatar_url: string;
    bio: string;
    rating: number;
    total_ratings: number;
    is_seller: boolean;
    created_at: string;
}

interface Item {
    id: string;
    title: string;
    price: number;
    condition: string;
    images: string[];
    created_at: string;
}

interface Review {
    id: string;
    rating: number;
    comment: string;
    created_at: string;
    reviewer: {
        username: string;
    };
}

interface Transaction {
    id: string;
    item: {
        id: string;
        title: string;
        price: number;
        images: string[];
    };
    seller: {
        username: string;
    };
    status: string;
    created_at: string;
}

export function Profile() {
    const {id} = useParams<{ id: string }>();
    const {user} = useAuth();
    const [profile, setProfile] = useState<Profile | null>(null);
    const [items, setItems] = useState<Item[]>([]);
    const [reviews, setReviews] = useState<Review[]>([]);
    const [purchases, setPurchases] = useState<Transaction[]>([]);
    const [activeTab, setActiveTab] = useState<'items' | 'reviews' | 'purchases'>('items');
    const [loading, setLoading] = useState(true);
    const isOwnProfile = user?.id === id;

    // Track profile views
    useProfileViews(id!);

    useEffect(() => {
        if (id) {
            fetchProfile();
            fetchItems();
            fetchReviews();
            if (isOwnProfile) {
                fetchPurchases();
            }
        }
    }, [id]);

    async function fetchProfile() {
        try {
            const {data, error} = await supabase
                .from('profiles')
                .select('*')
                .eq('id', id)
                .single();

            if (error) throw error;
            setProfile(data);
        } catch (error) {
            console.error('Error fetching profile:', error);
        } finally {
            setLoading(false);
        }
    }

    async function fetchItems() {
        try {
            const {data, error} = await supabase
                .from('items')
                .select('*')
                .eq('seller_id', id)
                .eq('is_active', true)
                .order('created_at', {ascending: false});

            if (error) throw error;
            setItems(data || []);
        } catch (error) {
            console.error('Error fetching items:', error);
        }
    }

    async function fetchReviews() {
        try {
            const {data, error} = await supabase
                .from('reviews')
                .select(`
          *,
          reviewer:reviewer_id(username)
        `)
                .eq('reviewed_id', id)
                .order('created_at', {ascending: false});

            if (error) throw error;
            setReviews(data || []);
        } catch (error) {
            console.error('Error fetching reviews:', error);
        }
    }

    async function fetchPurchases() {
        try {
            const {data, error} = await supabase
                .from('transactions')
                .select(`
          *,
          item:item_id(
            id,
            title,
            price,
            images
          ),
          seller:seller_id(
            username
          )
        `)
                .eq('buyer_id', id)
                .order('created_at', {ascending: false});

            if (error) throw error;
            setPurchases(data || []);
        } catch (error) {
            console.error('Error fetching purchases:', error);
        }
    }

    if (loading) {
        return (
            <div className="container mx-auto px-4 py-8">
                <div className="animate-pulse">
                    <div className="h-40 bg-gray-200 rounded-lg mb-8"/>
                    <div className="h-8 bg-gray-200 rounded mb-4 w-1/4"/>
                    <div className="h-4 bg-gray-200 rounded mb-8 w-1/2"/>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {Array.from({length: 6}).map((_, i) => (
                            <div key={i} className="h-64 bg-gray-200 rounded-lg"/>
                        ))}
                    </div>
                </div>
            </div>
        );
    }

    if (!profile) {
        return (
            <div className="container mx-auto px-4 py-8 text-center">
                <h2 className="text-2xl font-bold mb-4">Profile Not Found</h2>
                <p className="text-gray-600">
                    The profile you're looking for might have been removed or doesn't exist.
                </p>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-4 py-8">
            {/* Profile Header */}
            <div className="bg-white rounded-lg shadow-lg overflow-hidden mb-8">
                <div className="bg-gradient-to-r from-indigo-500 to-purple-600 h-32"/>
                <div className="px-6 py-4">
                    <div className="flex items-start">
                        <img
                            src={profile.avatar_url || `https://api.dicebear.com/7.x/initials/svg?seed=${profile.username}`}
                            alt={profile.username}
                            className="w-24 h-24 rounded-full border-4 border-white -mt-12"
                        />
                        <div className="ml-4 flex-1">
                            <div className="flex items-center justify-between">
                                <div>
                                    <h1 className="text-2xl font-bold">{profile.username}</h1>
                                    {profile.full_name && (
                                        <p className="text-gray-600">{profile.full_name}</p>
                                    )}
                                </div>
                                <div className="flex items-center gap-2">
                                    {isOwnProfile ? (
                                        <Link
                                            to="/settings"
                                            className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 flex items-center gap-2"
                                        >
                                            <Settings size={18}/>
                                            Edit Profile
                                        </Link>
                                    ) : (
                                        <>
                                            <Link
                                                to={`/messages?user=${id}`}
                                                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 flex items-center gap-2"
                                            >
                                                <MessageSquare size={18}/>
                                                Send Message
                                            </Link>
                                            <FollowSellerButton
                                                sellerId={profile.id}/> {/* Added FollowSellerButton */}
                                        </>
                                    )}
                                </div>
                            </div>
                            {profile.bio && (
                                <p className="text-gray-600 mt-2">{profile.bio}</p>
                            )}
                            <div className="flex items-center gap-6 mt-4">
                                <div className="flex items-center gap-1">
                                    <Star className="text-yellow-400" size={20}/>
                                    <span className="font-medium">{profile.rating}</span>
                                    <span className="text-gray-500">
                    ({profile.total_ratings} reviews)
                  </span>
                                </div>
                                {profile.is_seller ? (
                                    <div className="flex items-center gap-1 text-gray-500">
                                        <Package size={20}/>
                                        <span>{items.length} items</span>
                                    </div>
                                ) : (
                                    <div className="flex items-center gap-1 text-gray-500">
                                        <ShoppingBag size={20}/>
                                        <span>Buyer</span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Tabs */}
            <div className="flex gap-4 mb-6">
                {profile.is_seller && (
                    <button
                        onClick={() => setActiveTab('items')}
                        className={`px-4 py-2 rounded-lg ${
                            activeTab === 'items'
                                ? 'bg-indigo-600 text-white'
                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                    >
                        Items
                    </button>
                )}
                <button
                    onClick={() => setActiveTab('reviews')}
                    className={`px-4 py-2 rounded-lg ${
                        activeTab === 'reviews'
                            ? 'bg-indigo-600 text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                >
                    Reviews
                </button>
                {isOwnProfile && (
                    <button
                        onClick={() => setActiveTab('purchases')}
                        className={`px-4 py-2 rounded-lg ${
                            activeTab === 'purchases'
                                ? 'bg-indigo-600 text-white'
                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                    >
                        Purchases
                    </button>
                )}
            </div>

            {/* Content */}
            {activeTab === 'items' && profile.is_seller && (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {items.map((item) => (
                        <Link
                            key={item.id}
                            to={`/items/${item.id}`}
                            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
                        >
                            <div className="aspect-square relative">
                                <img
                                    src={item.images[0] || 'https://via.placeholder.com/400'}
                                    alt={item.title}
                                    className="w-full h-full object-cover"
                                />
                                <div
                                    className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                                    ${item.price}
                                </div>
                            </div>
                            <div className="p-4">
                                <h3 className="font-semibold text-lg mb-1 truncate">
                                    {item.title}
                                </h3>
                                <p className="text-sm text-gray-600">{item.condition}</p>
                            </div>
                        </Link>
                    ))}
                    {items.length === 0 && (
                        <div className="col-span-full text-center py-12 text-gray-500">
                            No items listed yet
                        </div>
                    )}
                </div>
            )}

            {activeTab === 'reviews' && (
                <div className="space-y-6">
                    {reviews.map((review) => (
                        <div key={review.id} className="bg-white rounded-lg shadow-md p-6">
                            <div className="flex items-center gap-4 mb-4">
                                <img
                                    src={`https://api.dicebear.com/7.x/initials/svg?seed=${review.reviewer.username}`}
                                    alt={review.reviewer.username}
                                    className="w-12 h-12 rounded-full"
                                />
                                <div>
                                    <p className="font-medium">{review.reviewer.username}</p>
                                    <div className="flex items-center gap-1">
                                        {Array.from({length: 5}).map((_, i) => (
                                            <Star
                                                key={i}
                                                size={16}
                                                className={i < review.rating ? 'text-yellow-400' : 'text-gray-300'}
                                            />
                                        ))}
                                    </div>
                                </div>
                            </div>
                            <p className="text-gray-600">{review.comment}</p>
                        </div>
                    ))}
                    {reviews.length === 0 && (
                        <div className="text-center py-12 text-gray-500">
                            No reviews yet
                        </div>
                    )}
                </div>
            )}

            {activeTab === 'purchases' && isOwnProfile && (
                <div className="space-y-6">
                    {purchases.map((transaction) => (
                        <div key={transaction.id}
                             className="bg-white rounded-lg shadow-md overflow-hidden">
                            <div className="flex items-center p-6">
                                <div className="w-24 h-24 rounded-lg overflow-hidden">
                                    <img
                                        src={transaction.item.images[0] || 'https://via.placeholder.com/400'}
                                        alt={transaction.item.title}
                                        className="w-full h-full object-cover"
                                    />
                                </div>
                                <div className="ml-6 flex-1">
                                    <div className="flex items-center justify-between">
                                        <h3 className="text-lg font-semibold">
                                            {transaction.item.title}
                                        </h3>
                                        <span className="text-lg font-medium">
                      ${transaction.item.price}
                    </span>
                                    </div>
                                    <p className="text-gray-600 mt-1">
                                        Seller: {transaction.seller.username}
                                    </p>
                                    <div className="flex items-center justify-between mt-2">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                        transaction.status === 'completed'
                            ? 'bg-green-100 text-green-800'
                            : transaction.status === 'pending'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-gray-100 text-gray-800'
                    }`}>
                      {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
                    </span>
                                        <div className="flex gap-2">
                                            <Link
                                                to={`/items/${transaction.item.id}`}
                                                className="text-indigo-600 hover:text-indigo-700 font-medium"
                                            >
                                                View Item
                                            </Link>
                                            <button className="text-gray-600 hover:text-gray-700">
                                                <Heart size={20}/>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                    {purchases.length === 0 && (
                        <div className="text-center py-12 text-gray-500">
                            No purchases yet
                        </div>
                    )}
                </div>
            )}

            {/* Collections for Own Profile */}
            {isOwnProfile && (
                <div className="mt-8">
                    <Collections/>
                </div>
            )}
        </div>
    );
}

================
File: src/pages/SavedSearchAlerts.tsx
================
// src/pages/SavedSearchAlerts.tsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Search, Loader, AlertTriangle, Bell, X, Edit, Clock, Check } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';

interface SavedSearch {
  id: string;
  name: string;
  query: string;
  filters: any;
  notify_email: boolean;
  notify_push: boolean;
  alert_enabled: boolean;
  alert_frequency: string;
  created_at: string;
  match_count: number;
}

export function SavedSearchAlerts() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [searches, setSearches] = useState<SavedSearch[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [editingSearchId, setEditingSearchId] = useState<string | null>(null);
  const [alertSettings, setAlertSettings] = useState({
    enabled: false,
    frequency: 'daily'
  });

  useEffect(() => {
    if (!user) {
      navigate('/auth');
      return;
    }

    fetchSavedSearches();
  }, [user]);

  async function fetchSavedSearches() {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .rpc('get_saved_searches_with_alerts');

      if (error) throw error;
      setSearches(data || []);
    } catch (error) {
      console.error('Error fetching saved searches:', error);
      setError('Failed to load saved searches. Please try again later.');
    } finally {
      setLoading(false);
    }
  }

  async function handleDeleteSearch(id: string) {
    try {
      const { error } = await supabase
        .from('saved_searches')
        .delete()
        .eq('id', id);

      if (error) throw error;

      setSearches(searches.filter(search => search.id !== id));
    } catch (error) {
      console.error('Error deleting saved search:', error);
    }
  }

  function openAlertSettings(search: SavedSearch) {
    setEditingSearchId(search.id);
    setAlertSettings({
      enabled: search.alert_enabled,
      frequency: search.alert_frequency
    });
  }

  async function saveAlertSettings() {
    if (!editingSearchId) return;

    try {
      const { error } = await supabase
        .rpc('toggle_saved_search_alert', {
          search_id: editingSearchId,
          enable: alertSettings.enabled,
          frequency: alertSettings.frequency
        });

      if (error) throw error;

      // Update the search in the local state
      setSearches(searches.map(search => {
        if (search.id === editingSearchId) {
          return {
            ...search,
            alert_enabled: alertSettings.enabled,
            alert_frequency: alertSettings.frequency
          };
        }
        return search;
      }));

      // Close the edit panel
      setEditingSearchId(null);
    } catch (error) {
      console.error('Error updating alert settings:', error);
    }
  }

  const runSearchUrl = (search: SavedSearch) => {
    let url = `/browse?query=${encodeURIComponent(search.query)}`;

    if (search.filters) {
      if (search.filters.category) url += `&category=${encodeURIComponent(search.filters.category)}`;
      if (search.filters.minPrice) url += `&minPrice=${encodeURIComponent(search.filters.minPrice)}`;
      if (search.filters.maxPrice) url += `&maxPrice=${encodeURIComponent(search.filters.maxPrice)}`;
      if (search.filters.condition) url += `&condition=${encodeURIComponent(search.filters.condition)}`;
    }

    return url;
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <Loader size={40} className="animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Loading your saved searches...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <AlertTriangle size={40} className="text-red-500 mx-auto mb-4" />
        <p className="text-red-500 mb-4">{error}</p>
        <button
          onClick={fetchSavedSearches}
          className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <Search className="text-indigo-500" />
          Saved Searches
        </h1>
        <Link
          to="/browse"
          className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
        >
          New Search
        </Link>
      </div>

      {searches.length === 0 ? (
        <div className="bg-gray-50 p-12 rounded-lg text-center">
          <Search size={64} className="mx-auto mb-4 text-gray-300" />
          <h2 className="text-xl font-semibold mb-2">No saved searches</h2>
          <p className="text-gray-600 mb-6">Save your favorite searches and get notified about new matching items</p>
          <Link
            to="/browse"
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700"
          >
            Browse Items
          </Link>
        </div>
      ) : (
        <div className="space-y-6">
          {searches.map((search) => (
            <div key={search.id} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="p-4 border-b flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Search size={20} className="text-indigo-600" />
                  <h3 className="font-semibold text-lg">{search.name}</h3>
                  {search.alert_enabled && (
                    <span className="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full flex items-center gap-1">
                      <Bell size={12} />
                      Alerts {search.alert_frequency}
                    </span>
                  )}
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => openAlertSettings(search)}
                    className="p-2 rounded-full hover:bg-gray-100"
                    aria-label="Edit alerts"
                  >
                    <Edit size={16} className="text-gray-600" />
                  </button>
                  <Link
                    to={runSearchUrl(search)}
                    className="p-2 rounded-full hover:bg-gray-100"
                    aria-label="Run search"
                  >
                    <Search size={16} className="text-indigo-600" />
                  </Link>
                  <button
                    onClick={() => handleDeleteSearch(search.id)}
                    className="p-2 rounded-full hover:bg-gray-100"
                    aria-label="Delete search"
                  >
                    <X size={16} className="text-red-600" />
                  </button>
                </div>
              </div>

              <div className="p-4">
                <div className="flex flex-wrap gap-2 mb-3">
                  <span className="text-gray-700 font-medium">Query:</span>
                  <span className="text-indigo-600 bg-indigo-50 px-2 py-0.5 rounded">
                    {search.query || 'Any'}
                  </span>

                  {search.filters?.category && (
                    <>
                      <span className="text-gray-700 font-medium">Category:</span>
                      <span className="text-indigo-600 bg-indigo-50 px-2 py-0.5 rounded">
                        {search.filters.category}
                      </span>
                    </>
                  )}

                  {(search.filters?.minPrice || search.filters?.maxPrice) && (
                    <>
                      <span className="text-gray-700 font-medium">Price:</span>
                      <span className="text-indigo-600 bg-indigo-50 px-2 py-0.5 rounded">
                        {search.filters?.minPrice ? `$${search.filters.minPrice}` : '$0'} -
                        {search.filters?.maxPrice ? `$${search.filters.maxPrice}` : 'Any'}
                      </span>
                    </>
                  )}

                  {search.filters?.condition && (
                    <>
                      <span className="text-gray-700 font-medium">Condition:</span>
                      <span className="text-indigo-600 bg-indigo-50 px-2 py-0.5 rounded">
                        {search.filters.condition.replace('_', ' ')}
                      </span>
                    </>
                  )}
                </div>

                <div className="flex items-center justify-between text-sm">
                  <div className="text-gray-500">
                    Created {new Date(search.created_at).toLocaleDateString()}
                  </div>
                  <div className="font-medium">
                    {search.match_count} matching items
                  </div>
                </div>
              </div>

              {/* Edit Alert Settings Panel */}
              {editingSearchId === search.id && (
                <div className="p-4 bg-gray-50 border-t">
                  <div className="flex justify-between items-center mb-3">
                    <h4 className="font-medium">Alert Settings</h4>
                    <button
                      onClick={() => setEditingSearchId(null)}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      <X size={16} />
                    </button>
                  </div>

                  <div className="space-y-4">
                    <label className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        checked={alertSettings.enabled}
                        onChange={(e) => setAlertSettings({...alertSettings, enabled: e.target.checked})}
                        className="w-4 h-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                      />
                      <span className="text-gray-700">Enable alerts for new matching items</span>
                    </label>

                    {alertSettings.enabled && (
                      <div className="pl-6">
                        <p className="text-sm text-gray-600 mb-2">Alert frequency:</p>
                        <div className="flex gap-3">
                          <label className="flex items-center gap-1">
                            <input
                              type="radio"
                              name="frequency"
                              value="daily"
                              checked={alertSettings.frequency === 'daily'}
                              onChange={() => setAlertSettings({...alertSettings, frequency: 'daily'})}
                              className="w-4 h-4 text-indigo-600 focus:ring-indigo-500 border-gray-300"
                            />
                            <span className="text-gray-700">Daily</span>
                          </label>
                          <label className="flex items-center gap-1">
                            <input
                              type="radio"
                              name="frequency"
                              value="weekly"
                              checked={alertSettings.frequency === 'weekly'}
                              onChange={() => setAlertSettings({...alertSettings, frequency: 'weekly'})}
                              className="w-4 h-4 text-indigo-600 focus:ring-indigo-500 border-gray-300"
                            />
                            <span className="text-gray-700">Weekly</span>
                          </label>
                        </div>

                        <div className="flex gap-2 items-center mt-2 text-xs text-gray-500">
                          <Clock size={14} />
                          <span>You'll receive notifications {alertSettings.frequency === 'daily' ? 'once a day' : 'once a week'}</span>
                        </div>
                      </div>
                    )}

                    <div className="flex justify-end">
                      <button
                        onClick={saveAlertSettings}
                        className="flex items-center gap-1 bg-indigo-600 text-white px-3 py-1 rounded-lg hover:bg-indigo-700"
                      >
                        <Check size={16} />
                        Save Settings
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/pages/Settings.tsx
================
// src/pages/Settings.tsx
import React, {useState, useEffect} from 'react';
import {useNavigate} from 'react-router-dom';
import {useAuth} from '../contexts/AuthContext';
import {supabase} from '../lib/supabase';
import {Upload, Loader2} from 'lucide-react';
import {SavedSearches} from '../components/SavedSearches'; // New import

interface Profile {
    username: string;
    full_name: string;
    bio: string;
    avatar_url: string;
}

export function Settings() {
    const {user} = useAuth();
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [avatar, setAvatar] = useState<File | null>(null);
    const [avatarUrl, setAvatarUrl] = useState('');
    const [formData, setFormData] = useState<Profile>({
        username: '',
        full_name: '',
        bio: '',
        avatar_url: '',
    });
    const [error, setError] = useState('');

    useEffect(() => {
        if (!user) {
            navigate('/auth');
            return;
        }
        fetchProfile();
    }, [user]);

    async function fetchProfile() {
        try {
            const {data, error} = await supabase
                .from('profiles')
                .select('username, full_name, bio, avatar_url')
                .eq('id', user!.id)
                .single();

            if (error) throw error;

            // Ensure bio is never null
            setFormData({
                ...data,
                bio: data.bio || '',
            });
            setAvatarUrl(data.avatar_url || '');
            setLoading(false);
        } catch (error) {
            console.error('Error fetching profile:', error);
            setLoading(false);
        }
    }

    function handleAvatarChange(e: React.ChangeEvent<HTMLInputElement>) {
        const file = e.target.files?.[0];
        if (file) {
            setAvatar(file);
            setAvatarUrl(URL.createObjectURL(file));
        }
    }

    async function handleSubmit(e: React.FormEvent) {
        e.preventDefault();
        if (!user) return;

        try {
            setSaving(true);
            setError('');

            let avatarUrl = formData.avatar_url;

            // Upload new avatar if selected
            if (avatar) {
                const fileExt = avatar.name.split('.').pop();
                const fileName = `${user.id}.${fileExt}`;
                const filePath = `avatars/${fileName}`;

                const {error: uploadError} = await supabase.storage
                    .from('items')
                    .upload(filePath, avatar, {upsert: true});

                if (uploadError) throw uploadError;

                const {data: {publicUrl}} = supabase.storage
                    .from('items')
                    .getPublicUrl(filePath);

                avatarUrl = publicUrl;
            }

            // Update profile
            const {error} = await supabase
                .from('profiles')
                .update({
                    ...formData,
                    avatar_url: avatarUrl,
                    updated_at: new Date().toISOString(),
                })
                .eq('id', user.id);

            if (error) throw error;

            navigate(`/profile/${user.id}`);
        } catch (error) {
            console.error('Error updating profile:', error);
            setError('Failed to update profile. Please try again.');
        } finally {
            setSaving(false);
        }
    }

    if (loading) {
        return (
            <div className="container mx-auto px-4 py-8">
                <div className="max-w-2xl mx-auto text-center">
                    <Loader2 className="w-8 h-8 animate-spin mx-auto"/>
                    <p className="mt-2 text-gray-600">Loading profile...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-4 py-8">
            <div className="max-w-2xl mx-auto">
                <h1 className="text-3xl font-bold mb-8">Edit Profile</h1>

                {error && (
                    <div className="bg-red-50 text-red-600 p-4 rounded-lg mb-6">
                        {error}
                    </div>
                )}

                <form onSubmit={handleSubmit} className="space-y-6">
                    {/* Avatar */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Profile Picture
                        </label>
                        <div className="flex items-center gap-6">
                            <div className="relative w-32 h-32">
                                <img
                                    src={avatarUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${formData.username}`}
                                    alt="Profile"
                                    className="w-full h-full rounded-full object-cover"
                                />
                                <label
                                    className="absolute bottom-0 right-0 bg-white rounded-full p-2 shadow-md cursor-pointer hover:bg-gray-50">
                                    <Upload className="w-5 h-5 text-gray-600"/>
                                    <input
                                        type="file"
                                        accept="image/*"
                                        onChange={handleAvatarChange}
                                        className="hidden"
                                    />
                                </label>
                            </div>
                            <div className="text-sm text-gray-600">
                                <p>Upload a new profile picture</p>
                                <p>Recommended size: 400x400px</p>
                            </div>
                        </div>
                    </div>

                    {/* Username */}
                    <div>
                        <label
                            htmlFor="username"
                            className="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Username
                        </label>
                        <input
                            type="text"
                            id="username"
                            value={formData.username}
                            onChange={(e) =>
                                setFormData((prev) => ({...prev, username: e.target.value}))
                            }
                            className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                            required
                        />
                    </div>

                    {/* Full Name */}
                    <div>
                        <label
                            htmlFor="fullName"
                            className="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Full Name
                        </label>
                        <input
                            type="text"
                            id="fullName"
                            value={formData.full_name}
                            onChange={(e) =>
                                setFormData((prev) => ({...prev, full_name: e.target.value}))
                            }
                            className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        />
                    </div>

                    {/* Bio */}
                    <div>
                        <label
                            htmlFor="bio"
                            className="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Bio
                        </label>
                        <textarea
                            id="bio"
                            value={formData.bio}
                            onChange={(e) =>
                                setFormData((prev) => ({...prev, bio: e.target.value}))
                            }
                            rows={4}
                            className="w-full rounded-lg border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                            placeholder="Tell others about yourself..."
                        />
                    </div>

                    {/* Submit Button */}
                    <div className="flex gap-4">
                        <button
                            type="submit"
                            disabled={saving}
                            className="flex-1 bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {saving ? 'Saving...' : 'Save Changes'}
                        </button>
                        <button
                            type="button"
                            onClick={() => navigate(`/profile/${user!.id}`)}
                            className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-lg hover:bg-gray-200"
                        >
                            Cancel
                        </button>
                    </div>
                </form>

                {/* Saved Searches */}
                <div className="mt-8">
                    <SavedSearches/>
                </div>
            </div>
        </div>
    );
}

================
File: src/pages/StockAlerts.tsx
================
// src/pages/StockAlerts.tsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Bell, Loader, AlertTriangle, X } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { StockStatus } from '../components/StockStatus';

interface StockAlert {
  id: string;
  item_id: string;
  title: string;
  stock_status: string;
  price: number;
  images: string[];
  created_at: string;
  notify_email: boolean;
  notify_push: boolean;
}

export function StockAlerts() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [alerts, setAlerts] = useState<StockAlert[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!user) {
      navigate('/auth');
      return;
    }

    fetchStockAlerts();
  }, [user]);

  async function fetchStockAlerts() {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .rpc('get_stock_alerts');

      if (error) throw error;
      setAlerts(data || []);
    } catch (error) {
      console.error('Error fetching stock alerts:', error);
      setError('Failed to load stock alerts. Please try again later.');
    } finally {
      setLoading(false);
    }
  }

  async function handleRemoveAlert(alertId: string) {
    try {
      // Get the item_id from the alert to toggle
      const alert = alerts.find(a => a.id === alertId);
      if (!alert) return;

      const { error } = await supabase
        .rpc('toggle_stock_alert', { item_id: alert.item_id });

      if (error) throw error;

      // Remove the alert from the state
      setAlerts(alerts.filter(a => a.id !== alertId));
    } catch (error) {
      console.error('Error removing stock alert:', error);
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <Loader size={40} className="animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Loading your stock alerts...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <AlertTriangle size={40} className="text-red-500 mx-auto mb-4" />
        <p className="text-red-500 mb-4">{error}</p>
        <button
          onClick={fetchStockAlerts}
          className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <Bell className="text-orange-500" />
          Back in Stock Alerts
        </h1>
      </div>

      {alerts.length === 0 ? (
        <div className="bg-gray-50 p-12 rounded-lg text-center">
          <Bell size={64} className="mx-auto mb-4 text-gray-300" />
          <h2 className="text-xl font-semibold mb-2">No stock alerts set</h2>
          <p className="text-gray-600 mb-6">Get notified when out-of-stock items become available again</p>
          <Link
            to="/browse"
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700"
          >
            Browse Items
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {alerts.map((alert) => (
            <div key={alert.id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              <div className="relative">
                <button
                  onClick={() => handleRemoveAlert(alert.id)}
                  className="absolute top-2 right-2 bg-white bg-opacity-70 hover:bg-opacity-100 p-1 rounded-full z-10"
                  aria-label="Remove alert"
                >
                  <X size={18} className="text-gray-500" />
                </button>
                <Link to={`/items/${alert.item_id}`} className="block">
                  <div className="aspect-square relative">
                    <img
                      src={alert.images[0] || 'https://via.placeholder.com/400'}
                      alt={alert.title}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute top-2 left-2">
                      <StockStatus status={alert.stock_status} />
                    </div>
                  </div>
                </Link>
              </div>
              <div className="p-4">
                <Link to={`/items/${alert.item_id}`} className="block">
                  <h3 className="font-semibold text-lg mb-1 truncate">{alert.title}</h3>
                </Link>
                <div className="flex items-center justify-between mb-2">
                  <div className="text-lg font-medium">${alert.price}</div>
                </div>
                <div className="flex items-center justify-between text-xs text-gray-500">
                  <div>
                    Alert created {new Date(alert.created_at).toLocaleDateString()}
                  </div>
                  <div className="flex gap-1">
                    {alert.notify_email && (
                      <span className="bg-gray-100 px-2 py-0.5 rounded">Email</span>
                    )}
                    {alert.notify_push && (
                      <span className="bg-gray-100 px-2 py-0.5 rounded">Push</span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/pages/Wishlist.tsx
================
// src/pages/Wishlist.tsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Heart, Loader, AlertTriangle } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { WishListButton } from '../components/WishListButton';

interface WishlistItem {
  id: string;
  title: string;
  price: number;
  condition: string;
  images: string[];
  added_at: string;
}

export function Wishlist() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [items, setItems] = useState<WishlistItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!user) {
      navigate('/auth');
      return;
    }

    fetchWishlistItems();
  }, [user]);

  async function fetchWishlistItems() {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .rpc('get_wishlist_items', { limit_val: 50, offset_val: 0 });

      if (error) throw error;
      setItems(data || []);
    } catch (error) {
      console.error('Error fetching wishlist items:', error);
      setError('Failed to load wishlist items. Please try again later.');
    } finally {
      setLoading(false);
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <Loader size={40} className="animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Loading your wishlist...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <AlertTriangle size={40} className="text-red-500 mx-auto mb-4" />
        <p className="text-red-500 mb-4">{error}</p>
        <button
          onClick={fetchWishlistItems}
          className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <Heart className="text-red-500" />
          My Wishlist
        </h1>
      </div>

      {items.length === 0 ? (
        <div className="bg-gray-50 p-12 rounded-lg text-center">
          <Heart size={64} className="mx-auto mb-4 text-gray-300" />
          <h2 className="text-xl font-semibold mb-2">Your wishlist is empty</h2>
          <p className="text-gray-600 mb-6">Save items you're interested in by clicking the heart icon</p>
          <Link
            to="/browse"
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700"
          >
            Browse Items
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {items.map((item) => (
            <div key={item.id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              <Link to={`/items/${item.id}`} className="block">
                <div className="aspect-square relative">
                  <img
                    src={item.images[0] || 'https://via.placeholder.com/400'}
                    alt={item.title}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-sm font-medium">
                    ${item.price}
                  </div>
                </div>
              </Link>
              <div className="p-4">
                <Link to={`/items/${item.id}`} className="block">
                  <h3 className="font-semibold text-lg mb-1 truncate">{item.title}</h3>
                  <p className="text-sm text-gray-600 mb-3">{item.condition.replace('_', ' ')}</p>
                </Link>
                <div className="flex justify-between items-center">
                  <p className="text-xs text-gray-500">
                    Added {new Date(item.added_at).toLocaleDateString()}
                  </p>
                  <WishListButton itemId={item.id} showText={false} />
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/App.tsx
================
// src/App.tsx
import React from 'react';
import {BrowserRouter as Router, Route, Routes} from 'react-router-dom';
import {Navbar} from './components/Navbar';
import {Footer} from './components/Footer';
import {Home} from './pages/Home';
import {Browse} from './pages/Browse';
import {ItemDetails} from './pages/ItemDetails';
import {Profile} from './pages/Profile';
import {Settings} from './pages/Settings';
import {Messages} from './pages/Messages';
import {Notifications} from './pages/Notifications';
import {Auth} from './pages/Auth';
import {CreateListing} from './pages/CreateListing';
import {Admin} from './pages/Admin';
import {Wishlist} from './pages/Wishlist'; // Import the new Wishlist page
import {AuthProvider} from './contexts/AuthContext';
import {Toaster} from './components/ui/Toaster';
import {PriceAlerts} from './pages/PriceAlerts';
import {StockAlerts} from './pages/StockAlerts';
import {SavedSearchAlerts} from './pages/SavedSearchAlerts';


function App() {
    return (
        <Router>
            <AuthProvider>
                <div className="min-h-screen bg-gray-50">
                    <Navbar/>
                    <main className="container mx-auto px-4 py-8">
                        <Routes>
                            <Route path="/" element={<Home/>}/>
                            <Route path="/browse" element={<Browse/>}/>
                            <Route path="/items/:id" element={<ItemDetails/>}/>
                            <Route path="/profile/:id" element={<Profile/>}/>
                            <Route path="/settings" element={<Settings/>}/>
                            <Route path="/messages" element={<Messages/>}/>
                            <Route path="/notifications" element={<Notifications/>}/>
                            <Route path="/auth" element={<Auth/>}/>
                            <Route path="/create-listing" element={<CreateListing/>}/>
                            <Route path="/admin" element={<Admin/>}/>
                            <Route path="/wishlist" element={<Wishlist/>}/>
                            <Route path="/price-alerts"
                                   element={<PriceAlerts/>}/>
                            <Route path="/stock-alerts" element={<StockAlerts/>}/>
                            <Route path="/saved-search-alerts" element={<SavedSearchAlerts/>}/>
                        </Routes>
                    </main>
                    <Footer/>
                    <Toaster/>
                </div>
            </AuthProvider>
        </Router>
    );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;



/* Hide scrollbar but keep functionality */
.scrollbar-hide {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}

.scrollbar-hide::-webkit-scrollbar {
  display: none; /* Chrome, Safari and Opera */
}

/* Custom styled scrollbar */
.scrollbar-thin {
  scrollbar-width: thin;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 5px;
  height: 5px;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 10px;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 10px;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background: #555;
}

================
File: src/main.tsx
================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: supabase/functions/scheduled-tasks.ts
================
// supabase/functions/scheduled-tasks.ts
// A Supabase Edge function that will run on a schedule to process notifications

import {createClient} from '@supabase/supabase-js';

// Setup Supabase client (use service role for admin functions)
const supabaseAdmin = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

// Handler for scheduled invoke
export const handler = async () => {
    try {
        // Process price drop notifications
        await supabaseAdmin.rpc('process_price_drop_notifications');
        console.log('Price drop notifications processed');

        // Process back-in-stock notifications
        await supabaseAdmin.rpc('process_stock_notifications');
        console.log('Stock notifications processed');

        // Process saved search alerts
        await supabaseAdmin.rpc('process_saved_search_alerts');
        console.log('Saved search alerts processed');

        return new Response(JSON.stringify({
            success: true,
            message: 'All notification tasks processed successfully'
        }), {
            headers: {'Content-Type': 'application/json'},
            status: 200
        });
    } catch (error) {
        console.error('Error processing notification tasks:', error);

        return new Response(JSON.stringify({
            success: false,
            error: error.message
        }), {
            headers: {'Content-Type': 'application/json'},
            status: 500
        });
    }
};

/*
Setup instructions:

1. Create this Edge Function in your Supabase project
2. Set up CRON job to run this function on a schedule (e.g., daily at midnight)
3. Configure environment variables for SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY

Example CRON schedule (daily at midnight):
0 0 * * *
*/

================
File: supabase/migrations/20250225220246_foggy_sun.sql
================
/*
  # Initial Schema for Treasure Trove

  1. Tables
    - profiles
      - User profiles with ratings and metadata
    - items
      - Product listings with details and images
    - categories
      - Product categories
    - transactions
      - Transaction records
    - reviews
      - User reviews and ratings
    - messages
      - Chat messages between users
    - offers
      - Purchase offers and negotiations
    - notifications
      - System notifications

  2. Security
    - RLS policies for all tables
    - Authentication using Supabase Auth

  3. Enums
    - item_condition
    - selling_method
    - transaction_status
    - offer_status
*/

-- Enable necessary extensions
create extension if not exists "uuid-ossp";
create extension if not exists "pgcrypto";

-- Enums
create type item_condition as enum ('new', 'like_new', 'good', 'fair', 'poor');
create type selling_method as enum ('fixed', 'negotiation', 'auction');
create type transaction_status as enum ('pending', 'processing', 'completed', 'disputed', 'cancelled');
create type offer_status as enum ('pending', 'accepted', 'rejected', 'expired', 'countered');

-- Profiles table
create table profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique not null,
  full_name text,
  avatar_url text,
  bio text,
  rating decimal(3,2) default 0,
  total_ratings int default 0,
  is_seller boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Categories table
create table categories (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  slug text unique not null,
  description text,
  parent_id uuid references categories(id),
  created_at timestamptz default now()
);

-- Items table
create table items (
  id uuid primary key default uuid_generate_v4(),
  seller_id uuid references profiles(id) on delete cascade not null,
  title text not null,
  description text,
  condition item_condition not null,
  price decimal(10,2),
  selling_method selling_method not null,
  category_id uuid references categories(id) not null,
  images text[] not null default '{}',
  location text,
  is_active boolean default true,
  views int default 0,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  ends_at timestamptz -- for auctions
);

-- Transactions table
create table transactions (
  id uuid primary key default uuid_generate_v4(),
  item_id uuid references items(id) not null,
  buyer_id uuid references profiles(id) not null,
  seller_id uuid references profiles(id) not null,
  amount decimal(10,2) not null,
  status transaction_status not null default 'pending',
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Reviews table
create table reviews (
  id uuid primary key default uuid_generate_v4(),
  transaction_id uuid references transactions(id) not null,
  reviewer_id uuid references profiles(id) not null,
  reviewed_id uuid references profiles(id) not null,
  rating int check (rating >= 1 and rating <= 5) not null,
  comment text,
  created_at timestamptz default now()
);

-- Messages table
create table messages (
  id uuid primary key default uuid_generate_v4(),
  sender_id uuid references profiles(id) not null,
  receiver_id uuid references profiles(id) not null,
  item_id uuid references items(id),
  content text not null,
  read boolean default false,
  created_at timestamptz default now()
);

-- Offers table
create table offers (
  id uuid primary key default uuid_generate_v4(),
  item_id uuid references items(id) not null,
  buyer_id uuid references profiles(id) not null,
  amount decimal(10,2) not null,
  status offer_status not null default 'pending',
  expires_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Notifications table
create table notifications (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id) not null,
  title text not null,
  content text not null,
  read boolean default false,
  created_at timestamptz default now()
);

-- Enable RLS
alter table profiles enable row level security;
alter table items enable row level security;
alter table categories enable row level security;
alter table transactions enable row level security;
alter table reviews enable row level security;
alter table messages enable row level security;
alter table offers enable row level security;
alter table notifications enable row level security;

-- RLS Policies

-- Profiles
create policy "Public profiles are viewable by everyone"
  on profiles for select
  using (true);

create policy "Users can update own profile"
  on profiles for update
  using (auth.uid() = id);

-- Items
create policy "Anyone can view active items"
  on items for select
  using (is_active = true);

create policy "Sellers can manage their items"
  on items for all
  using (auth.uid() = seller_id);

-- Categories
create policy "Categories are viewable by everyone"
  on categories for select
  using (true);

-- Transactions
create policy "Users can view their transactions"
  on transactions for select
  using (auth.uid() in (buyer_id, seller_id));

create policy "Buyers can create transactions"
  on transactions for insert
  with check (auth.uid() = buyer_id);

-- Reviews
create policy "Reviews are viewable by everyone"
  on reviews for select
  using (true);

create policy "Users can create reviews for their transactions"
  on reviews for insert
  with check (
    exists (
      select 1 from transactions
      where id = transaction_id
      and (buyer_id = auth.uid() or seller_id = auth.uid())
    )
  );

-- Messages
create policy "Users can view their messages"
  on messages for select
  using (auth.uid() in (sender_id, receiver_id));

create policy "Users can send messages"
  on messages for insert
  with check (auth.uid() = sender_id);

-- Offers
create policy "Users can view their offers"
  on offers for select
  using (
    auth.uid() = buyer_id or
    exists (
      select 1 from items
      where id = item_id and seller_id = auth.uid()
    )
  );

create policy "Buyers can create offers"
  on offers for insert
  with check (auth.uid() = buyer_id);

-- Notifications
create policy "Users can view their notifications"
  on notifications for select
  using (auth.uid() = user_id);

-- Functions and Triggers

-- Function to update user rating
create or replace function update_user_rating()
returns trigger as $$
begin
  update profiles
  set
    rating = (
      select avg(rating)::decimal(3,2)
      from reviews
      where reviewed_id = new.reviewed_id
    ),
    total_ratings = (
      select count(*)
      from reviews
      where reviewed_id = new.reviewed_id
    )
  where id = new.reviewed_id;
  return new;
end;
$$ language plpgsql security definer;

-- Trigger for updating user rating
create trigger on_review_created
  after insert on reviews
  for each row
  execute function update_user_rating();

-- Function to create notification
create or replace function create_notification(
  user_id uuid,
  title text,
  content text
) returns void as $$
begin
  insert into notifications (user_id, title, content)
  values (user_id, title, content);
end;
$$ language plpgsql security definer;

================
File: supabase/migrations/20250225221149_precious_plain.sql
================
/*
  # Create initial categories

  1. Data
    - Insert initial categories for the marketplace
    - Categories: Furniture, Electronics, Home Decor, Kitchen
*/

-- Insert initial categories
INSERT INTO categories (name, slug, description)
VALUES 
  ('Furniture', 'furniture', 'Home and office furniture'),
  ('Electronics', 'electronics', 'Electronic devices and gadgets'),
  ('Home Decor', 'home-decor', 'Decorative items for your home'),
  ('Kitchen', 'kitchen', 'Kitchen appliances and accessories');

================
File: supabase/migrations/20250225221437_golden_sun.sql
================
/*
  # Create get_conversations function

  1. Function
    - Creates a stored procedure to get user conversations
    - Returns conversations with last message and unread count
    - Orders by last message time
*/

create or replace function get_conversations(user_id uuid)
returns table (
  user_id uuid,
  username text,
  last_message text,
  last_message_time timestamptz,
  unread_count bigint
) language sql security definer as $$
  with conversations as (
    select distinct
      case
        when sender_id = get_conversations.user_id then receiver_id
        else sender_id
      end as other_user_id,
      first_value(content) over w as last_message,
      first_value(created_at) over w as last_message_time,
      count(*) filter (where receiver_id = get_conversations.user_id and read = false) over (partition by
        case
          when sender_id = get_conversations.user_id then receiver_id
          else sender_id
        end
      ) as unread_count
    from messages
    where sender_id = get_conversations.user_id or receiver_id = get_conversations.user_id
    window w as (
      partition by
        case
          when sender_id = get_conversations.user_id then receiver_id
          else sender_id
        end
      order by created_at desc
    )
  )
  select distinct
    c.other_user_id as user_id,
    p.username,
    c.last_message,
    c.last_message_time,
    c.unread_count
  from conversations c
  join profiles p on p.id = c.other_user_id
  order by c.last_message_time desc;
$$;

================
File: supabase/migrations/20250225221859_rustic_valley.sql
================
/*
  # Create auth profile trigger

  1. Function
    - Creates a function to automatically create a profile when a user signs up
    - Sets default values for required fields
  
  2. Trigger
    - Adds trigger to create profile on user creation
*/

create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, username, full_name)
  values (
    new.id,
    coalesce(new.raw_user_meta_data->>'username', 'user_' || substr(new.id::text, 1, 8)),
    coalesce(new.raw_user_meta_data->>'full_name', '')
  );
  return new;
end;
$$;

-- Enable realtime for profiles
alter publication supabase_realtime add table profiles;

-- Set up auth trigger
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

================
File: supabase/migrations/20250225222005_foggy_stream.sql
================
/*
  # Create storage bucket for item images

  1. Storage
    - Creates a public bucket for item images
    - Sets up storage policies for authenticated users
*/

-- Create a public bucket for item images
insert into storage.buckets (id, name, public)
values ('items', 'items', true);

-- Allow authenticated users to upload images
create policy "Authenticated users can upload item images"
on storage.objects for insert
to authenticated
with check (
  bucket_id = 'items' and
  (storage.foldername(name))[1] = 'items'
);

-- Allow anyone to download images
create policy "Anyone can download item images"
on storage.objects for select
to public
using (bucket_id = 'items');

================
File: supabase/migrations/20250225225931_divine_haze.sql
================
/*
  # Add Admin Functionality

  1. Changes
    - Add admin role to profiles table
    - Create admin logs table and policies
    - Add admin management functions
    - Add RLS policies for admin access

  2. Security
    - Enable RLS for admin_logs table
    - Add policies for admin access
    - Add secure functions for role management
*/

-- Add admin role to profiles
alter table profiles 
add column role text not null default 'user' 
check (role in ('user', 'admin', 'super_admin'));

-- Create admin logs table
create table admin_logs (
  id uuid primary key default uuid_generate_v4(),
  admin_id uuid references profiles(id) not null,
  action text not null,
  details jsonb,
  created_at timestamptz default now()
);

-- Enable RLS
alter table admin_logs enable row level security;

-- Admin policies
create policy "Admins can view logs"
  on admin_logs for select
  to authenticated
  using (exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ));

create policy "Admins can create logs"
  on admin_logs for insert
  to authenticated
  with check (
    auth.uid() = admin_id
    and exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  );

-- Update profile policies for admin management
create policy "Super admin can update admin roles"
  on profiles for update
  to authenticated
  using (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role = 'super_admin'
    )
  )
  with check (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role = 'super_admin'
    )
  );

-- Admin management functions
create or replace function promote_to_admin(user_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is a super admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role = 'super_admin'
  ) then
    raise exception 'Only super admin can promote users to admin';
  end if;

  -- Update the user's role to admin
  update profiles
  set role = 'admin'
  where id = user_id
  and role = 'user';

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'promote_to_admin',
    jsonb_build_object('user_id', user_id)
  );
end;
$$;

create or replace function revoke_admin(user_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is a super admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role = 'super_admin'
  ) then
    raise exception 'Only super admin can revoke admin privileges';
  end if;

  -- Cannot revoke super admin
  if exists (
    select 1 from profiles
    where id = user_id
    and role = 'super_admin'
  ) then
    raise exception 'Cannot revoke super admin privileges';
  end if;

  -- Update the user's role to user
  update profiles
  set role = 'user'
  where id = user_id
  and role = 'admin';

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'revoke_admin',
    jsonb_build_object('user_id', user_id)
  );
end;
$$;

-- Create function to create the first super admin
create or replace function create_first_super_admin(
  admin_email text,
  admin_password text,
  admin_username text
)
returns void
language plpgsql
security definer
as $$
declare
  new_user_id uuid;
begin
  -- Check if super admin already exists
  if exists (
    select 1 from profiles where role = 'super_admin'
  ) then
    raise exception 'Super admin already exists';
  end if;

  -- Create auth user
  insert into auth.users (
    email,
    encrypted_password,
    email_confirmed_at,
    raw_user_meta_data
  ) values (
    admin_email,
    crypt(admin_password, gen_salt('bf')),
    now(),
    jsonb_build_object('username', admin_username, 'full_name', 'Super Admin')
  )
  returning id into new_user_id;

  -- Update the profile to super admin
  update profiles
  set role = 'super_admin',
      username = admin_username,
      full_name = 'Super Admin',
      is_seller = true
  where id = new_user_id;
end;
$$;

================
File: supabase/migrations/20250225230737_light_salad.sql
================
/*
  # Create First Super Admin

  1. Changes
    - Creates the first super admin user with:
      - Email: admin@treasuretrove.com
      - Password: admin123
      - Username: superadmin
    
  2. Security
    - Super admin has full access to admin functionality
    - Only one super admin can be created
*/

-- Create the first super admin user
do $$
declare
  new_user_id uuid := '00000000-0000-4000-a000-000000000000';
begin
  -- Check if super admin already exists
  if exists (
    select 1 from auth.users where id = new_user_id
  ) then
    raise exception 'Super admin already exists';
  end if;

  -- Create auth user
  insert into auth.users (
    id,
    instance_id,
    email,
    encrypted_password,
    email_confirmed_at,
    raw_user_meta_data,
    created_at,
    updated_at,
    last_sign_in_at,
    confirmation_token,
    email_change,
    email_change_token_new,
    recovery_token,
    aud,
    role
  ) values (
    new_user_id,
    '00000000-0000-0000-0000-000000000000',
    'admin@treasuretrove.com',
    crypt('admin123', gen_salt('bf')),
    now(),
    jsonb_build_object('username', 'superadmin', 'full_name', 'Super Admin'),
    now(),
    now(),
    now(),
    '',
    '',
    '',
    '',
    'authenticated',
    'authenticated'
  );

  -- Create super admin profile if it doesn't exist
  insert into profiles (
    id,
    username,
    full_name,
    role,
    is_seller
  ) values (
    new_user_id,
    'superadmin',
    'Super Admin',
    'super_admin',
    true
  )
  on conflict (id) do update
  set role = 'super_admin',
      username = 'superadmin',
      full_name = 'Super Admin',
      is_seller = true;
end;
$$;

================
File: supabase/migrations/20250225230929_noisy_wind.sql
================
/*
  # Create secure function to access auth user emails

  1. Changes
    - Creates a secure function to access auth.users emails
    - Function is only accessible to admins
*/

-- Create function to get auth user emails
create or replace function get_auth_user_emails(user_ids uuid[])
returns table (id uuid, email text)
language sql
security definer
set search_path = public
as $$
  select id, email
  from auth.users
  where id = any(user_ids)
  and exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  );
$$;

================
File: supabase/migrations/20250225231227_dry_spire.sql
================
/*
  # Add notifications and analytics features

  1. Changes
    - Add push notification subscription table
    - Add profile views table
    - Add item views table
    - Add functions for tracking views
    - Add realtime notifications

  2. Security
    - Enable RLS on new tables
    - Add policies for view tracking
*/

-- Create push notification subscriptions table
create table push_subscriptions (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id) on delete cascade not null,
  endpoint text not null,
  auth text not null,
  p256dh text not null,
  created_at timestamptz default now()
);

-- Create profile views table
create table profile_views (
  id uuid primary key default uuid_generate_v4(),
  profile_id uuid references profiles(id) on delete cascade not null,
  viewer_id uuid references profiles(id) on delete set null,
  created_at timestamptz default now()
);

-- Create item views table
create table item_views (
  id uuid primary key default uuid_generate_v4(),
  item_id uuid references items(id) on delete cascade not null,
  viewer_id uuid references profiles(id) on delete set null,
  created_at timestamptz default now()
);

-- Enable RLS
alter table push_subscriptions enable row level security;
alter table profile_views enable row level security;
alter table item_views enable row level security;

-- RLS Policies

-- Push subscriptions
create policy "Users can manage their push subscriptions"
  on push_subscriptions for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- Profile views
create policy "Anyone can create profile views"
  on profile_views for insert
  to authenticated
  with check (true);

create policy "Users can view their profile analytics"
  on profile_views for select
  using (auth.uid() = profile_id);

-- Item views
create policy "Anyone can create item views"
  on item_views for insert
  to authenticated
  with check (true);

create policy "Sellers can view their item analytics"
  on item_views for select
  using (
    exists (
      select 1 from items
      where id = item_views.item_id
      and seller_id = auth.uid()
    )
  );

-- Functions

-- Function to track profile view
create or replace function track_profile_view(viewed_profile_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Only track if viewer is different from profile owner
  if auth.uid() != viewed_profile_id then
    insert into profile_views (profile_id, viewer_id)
    values (viewed_profile_id, auth.uid());
  end if;
end;
$$;

-- Function to track item view
create or replace function track_item_view(viewed_item_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  insert into item_views (item_id, viewer_id)
  values (viewed_item_id, auth.uid());
  
  -- Update item view count
  update items
  set views = views + 1
  where id = viewed_item_id;
end;
$$;

-- Function to get unique profile viewers count
create or replace function get_unique_profile_viewers(profile_id uuid)
returns bigint
language sql
security definer
as $$
  select count(distinct viewer_id)
  from profile_views
  where profile_id = $1
  and created_at > now() - interval '30 days';
$$;

-- Function to get unique item viewers count
create or replace function get_unique_item_viewers(item_id uuid)
returns bigint
language sql
security definer
as $$
  select count(distinct viewer_id)
  from item_views
  where item_id = $1
  and created_at > now() - interval '30 days';
$$;

-- Enable realtime for notifications
alter publication supabase_realtime add table messages;
alter publication supabase_realtime add table notifications;

================
File: supabase/migrations/20250225231551_sweet_sunset.sql
================
/*
  # Add seller restrictions

  1. Changes
    - Add validation functions for messages and reviews
    - Add triggers to prevent self-messaging and self-rating
    - Clean up any existing self-messages or self-ratings

  2. Security
    - Ensure data integrity with validation functions
    - Prevent future self-interactions
*/

-- Clean up any existing self-messages
delete from messages
where sender_id = receiver_id;

-- Clean up any existing self-reviews
delete from reviews
where reviewer_id = reviewed_id;

-- Function to validate message creation
create or replace function validate_message()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Prevent self-messaging
  if new.sender_id = new.receiver_id then
    raise exception 'Cannot send message to yourself';
  end if;

  -- Check if trying to message about own item
  if new.item_id is not null and exists (
    select 1 from items
    where id = new.item_id
    and seller_id = new.sender_id
  ) then
    raise exception 'Cannot message about your own item';
  end if;

  return new;
end;
$$;

-- Function to validate review creation
create or replace function validate_review()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Prevent self-review
  if new.reviewer_id = new.reviewed_id then
    raise exception 'Cannot review yourself';
  end if;

  -- Check if trying to review own transaction
  if exists (
    select 1 from transactions
    where id = new.transaction_id
    and (buyer_id = new.reviewer_id and seller_id = new.reviewed_id)
    or (seller_id = new.reviewer_id and buyer_id = new.reviewed_id)
  ) then
    return new;
  else
    raise exception 'Can only review users you have transacted with';
  end if;
end;
$$;

-- Create triggers
create trigger check_message_before_insert
  before insert on messages
  for each row
  execute function validate_message();

create trigger check_review_before_insert
  before insert on reviews
  for each row
  execute function validate_review();

================
File: supabase/migrations/20250225231924_aged_bonus.sql
================
/*
  # Update message and review validation

  1. Changes
    - Drop existing triggers if they exist
    - Recreate validation functions with improved checks
    - Recreate triggers for message and review validation

  2. Security
    - Prevent self-messaging and messaging about own items
    - Prevent self-reviews
    - Ensure reviews only come from transaction participants
*/

-- Drop existing triggers if they exist
drop trigger if exists check_message_before_insert on messages;
drop trigger if exists check_review_before_insert on reviews;

-- Function to validate message creation
create or replace function validate_message()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Prevent self-messaging
  if new.sender_id = new.receiver_id then
    raise exception 'Cannot send message to yourself';
  end if;

  -- Check if trying to message about own item
  if new.item_id is not null and exists (
    select 1 from items
    where id = new.item_id
    and seller_id = new.sender_id
  ) then
    raise exception 'Cannot message about your own item';
  end if;

  return new;
end;
$$;

-- Function to validate review creation
create or replace function validate_review()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Prevent self-review
  if new.reviewer_id = new.reviewed_id then
    raise exception 'Cannot review yourself';
  end if;

  -- Check if trying to review own transaction
  if exists (
    select 1 from transactions
    where id = new.transaction_id
    and (buyer_id = new.reviewer_id and seller_id = new.reviewed_id)
    or (seller_id = new.reviewer_id and buyer_id = new.reviewed_id)
  ) then
    return new;
  else
    raise exception 'Can only review users you have transacted with';
  end if;
end;
$$;

-- Create triggers
create trigger check_message_before_insert
  before insert on messages
  for each row
  execute function validate_message();

create trigger check_review_before_insert
  before insert on reviews
  for each row
  execute function validate_review();

================
File: supabase/migrations/20250225232013_bronze_jungle.sql
================
/*
  # Prevent self-offers

  1. Changes
    - Add validation function to prevent sellers from making offers on their own items
    - Create trigger to enforce this validation

  2. Security
    - Prevent sellers from making offers on their own items
    - Clean up any existing self-offers
*/

-- Clean up any existing self-offers
delete from offers
where exists (
  select 1 from items
  where items.id = offers.item_id
  and items.seller_id = offers.buyer_id
);

-- Function to validate offer creation
create or replace function validate_offer()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Check if trying to make an offer on own item
  if exists (
    select 1 from items
    where id = new.item_id
    and seller_id = new.buyer_id
  ) then
    raise exception 'Cannot make an offer on your own item';
  end if;

  return new;
end;
$$;

-- Create trigger
create trigger check_offer_before_insert
  before insert on offers
  for each row
  execute function validate_offer();

================
File: supabase/migrations/20250225232303_mellow_bird.sql
================
/*
  # Admin Features Enhancement

  1. Changes
    - Add featured and trending flags to items
    - Add user status management
    - Add category management functions for admins
    - Add user management functions for admins

  2. Security
    - Only admins can manage categories
    - Only admins can manage user statuses
    - Only admins can set items as featured/trending
*/

-- Add status to profiles
alter table profiles
add column status text not null default 'active'
check (status in ('active', 'suspended', 'deactivated'));

-- Add featured and trending flags to items
alter table items
add column is_featured boolean not null default false,
add column is_trending boolean not null default false;

-- Function to manage user status
create or replace function manage_user_status(
  target_user_id uuid,
  new_status text,
  reason text default null
)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is an admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can manage user status';
  end if;

  -- Update user status
  update profiles
  set status = new_status
  where id = target_user_id;

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'update_user_status',
    jsonb_build_object(
      'user_id', target_user_id,
      'new_status', new_status,
      'reason', reason
    )
  );
end;
$$;

-- Function to reset user password
create or replace function admin_reset_password(
  user_email text,
  new_password text
)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is an admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can reset passwords';
  end if;

  -- Update the password in auth.users
  update auth.users
  set encrypted_password = crypt(new_password, gen_salt('bf'))
  where email = user_email;

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'reset_password',
    jsonb_build_object('user_email', user_email)
  );
end;
$$;

-- Function to manage featured/trending items
create or replace function manage_item_status(
  item_id uuid,
  set_featured boolean default null,
  set_trending boolean default null
)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is an admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can manage item status';
  end if;

  -- Update item status
  update items
  set 
    is_featured = coalesce(set_featured, is_featured),
    is_trending = coalesce(set_trending, is_trending)
  where id = item_id;

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'update_item_status',
    jsonb_build_object(
      'item_id', item_id,
      'featured', set_featured,
      'trending', set_trending
    )
  );
end;
$$;

-- Function to create category
create or replace function create_category(
  name text,
  slug text,
  description text default null,
  parent_id uuid default null
)
returns uuid
language plpgsql
security definer
as $$
declare
  new_category_id uuid;
begin
  -- Check if the executing user is an admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can create categories';
  end if;

  -- Insert new category
  insert into categories (name, slug, description, parent_id)
  values (name, slug, description, parent_id)
  returning id into new_category_id;

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'create_category',
    jsonb_build_object(
      'category_id', new_category_id,
      'name', name,
      'slug', slug
    )
  );

  return new_category_id;
end;
$$;

-- Function to update category
create or replace function update_category(
  category_id uuid,
  new_name text default null,
  new_slug text default null,
  new_description text default null,
  new_parent_id uuid default null
)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is an admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can update categories';
  end if;

  -- Update category
  update categories
  set
    name = coalesce(new_name, name),
    slug = coalesce(new_slug, slug),
    description = coalesce(new_description, description),
    parent_id = coalesce(new_parent_id, parent_id)
  where id = category_id;

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'update_category',
    jsonb_build_object(
      'category_id', category_id,
      'name', new_name,
      'slug', new_slug
    )
  );
end;
$$;

-- Function to delete category
create or replace function delete_category(category_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Check if the executing user is an admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can delete categories';
  end if;

  -- Check if category has items
  if exists (
    select 1 from items
    where category_id = delete_category.category_id
  ) then
    raise exception 'Cannot delete category with existing items';
  end if;

  -- Delete category
  delete from categories
  where id = category_id;

  -- Log the action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'delete_category',
    jsonb_build_object('category_id', category_id)
  );
end;
$$;

-- Update RLS policies for items to allow admin management
create policy "Admins can manage all items"
  on items for all
  to authenticated
  using (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  )
  with check (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  );

================
File: supabase/migrations/20250225232443_little_trail.sql
================
/*
  # Create Secure Auth Users Access Function

  1. Changes
    - Create a secure function for admin access to user emails
    - Function returns only necessary user information
    - Access restricted to admins only

  2. Security
    - Only admins can access the function
    - Emails are only accessible through the function
*/

-- Create function to get auth user emails securely
create or replace function get_auth_users()
returns table (
  id uuid,
  email text,
  created_at timestamptz,
  last_sign_in_at timestamptz,
  email_confirmed_at timestamptz
)
language sql
security definer
set search_path = public
as $$
  select 
    au.id,
    au.email,
    au.created_at,
    au.last_sign_in_at,
    au.confirmed_at as email_confirmed_at
  from auth.users au
  where exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  );
$$;

================
File: supabase/migrations/20250225232719_flat_bridge.sql
================
/*
  # Add Escrow System

  1. New Tables
    - `escrow_transactions`
      - Tracks escrow payments and status
    - `escrow_disputes`
      - Handles dispute cases
    - `transaction_logs`
      - Audit trail for all transaction events

  2. Changes
    - Add escrow status to transactions table
    - Add dispute handling capabilities
    - Add admin escrow management functions

  3. Security
    - Enable RLS on all new tables
    - Add policies for buyers, sellers, and admins
*/

-- Add escrow status to transactions
alter table transactions
add column escrow_status text not null default 'pending'
check (escrow_status in ('pending', 'funded', 'released', 'refunded', 'disputed'));

-- Create escrow transactions table
create table escrow_transactions (
  id uuid primary key default uuid_generate_v4(),
  transaction_id uuid references transactions(id) not null,
  amount decimal(10,2) not null,
  status text not null default 'pending'
    check (status in ('pending', 'funded', 'released', 'refunded')),
  funded_at timestamptz,
  released_at timestamptz,
  refunded_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Create escrow disputes table
create table escrow_disputes (
  id uuid primary key default uuid_generate_v4(),
  transaction_id uuid references transactions(id) not null,
  reported_by uuid references profiles(id) not null,
  reason text not null,
  evidence jsonb,
  status text not null default 'open'
    check (status in ('open', 'investigating', 'resolved', 'closed')),
  resolution text,
  resolved_by uuid references profiles(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Create transaction logs table
create table transaction_logs (
  id uuid primary key default uuid_generate_v4(),
  transaction_id uuid references transactions(id) not null,
  action text not null,
  details jsonb,
  performed_by uuid references profiles(id) not null,
  created_at timestamptz default now()
);

-- Enable RLS
alter table escrow_transactions enable row level security;
alter table escrow_disputes enable row level security;
alter table transaction_logs enable row level security;

-- RLS Policies

-- Escrow transactions
create policy "Users can view their escrow transactions"
  on escrow_transactions for select
  using (
    exists (
      select 1 from transactions t
      where t.id = transaction_id
      and (t.buyer_id = auth.uid() or t.seller_id = auth.uid())
    )
  );

create policy "Admins can manage escrow transactions"
  on escrow_transactions for all
  to authenticated
  using (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  )
  with check (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  );

-- Escrow disputes
create policy "Users can view their disputes"
  on escrow_disputes for select
  using (
    exists (
      select 1 from transactions t
      where t.id = transaction_id
      and (t.buyer_id = auth.uid() or t.seller_id = auth.uid())
    )
  );

create policy "Users can create disputes"
  on escrow_disputes for insert
  with check (
    exists (
      select 1 from transactions t
      where t.id = transaction_id
      and (t.buyer_id = auth.uid() or t.seller_id = auth.uid())
    )
    and reported_by = auth.uid()
  );

create policy "Admins can manage disputes"
  on escrow_disputes for all
  to authenticated
  using (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  )
  with check (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  );

-- Transaction logs
create policy "Users can view their transaction logs"
  on transaction_logs for select
  using (
    exists (
      select 1 from transactions t
      where t.id = transaction_id
      and (t.buyer_id = auth.uid() or t.seller_id = auth.uid())
    )
  );

create policy "Admins can view all transaction logs"
  on transaction_logs for select
  to authenticated
  using (
    exists (
      select 1 from profiles
      where id = auth.uid()
      and role in ('admin', 'super_admin')
    )
  );

-- Functions

-- Function to create escrow transaction
create or replace function create_escrow_transaction(
  item_id uuid,
  amount decimal
)
returns uuid
language plpgsql
security definer
as $$
declare
  new_transaction_id uuid;
  new_escrow_id uuid;
begin
  -- Create the transaction
  insert into transactions (
    item_id,
    buyer_id,
    seller_id,
    amount,
    status,
    escrow_status
  )
  select
    item_id,
    auth.uid(),
    seller_id,
    amount,
    'pending',
    'pending'
  from items
  where id = item_id
  returning id into new_transaction_id;

  -- Create the escrow transaction
  insert into escrow_transactions (
    transaction_id,
    amount,
    status
  )
  values (
    new_transaction_id,
    amount,
    'pending'
  )
  returning id into new_escrow_id;

  -- Log the action
  insert into transaction_logs (
    transaction_id,
    action,
    details,
    performed_by
  )
  values (
    new_transaction_id,
    'create_escrow',
    jsonb_build_object(
      'amount', amount,
      'escrow_id', new_escrow_id
    ),
    auth.uid()
  );

  return new_transaction_id;
end;
$$;

-- Function to fund escrow
create or replace function fund_escrow(transaction_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Verify user is the buyer
  if not exists (
    select 1 from transactions
    where id = transaction_id
    and buyer_id = auth.uid()
    and escrow_status = 'pending'
  ) then
    raise exception 'Unauthorized or invalid transaction status';
  end if;

  -- Update transaction and escrow status
  update transactions
  set escrow_status = 'funded'
  where id = transaction_id;

  update escrow_transactions
  set 
    status = 'funded',
    funded_at = now()
  where transaction_id = fund_escrow.transaction_id;

  -- Log the action
  insert into transaction_logs (
    transaction_id,
    action,
    details,
    performed_by
  )
  values (
    transaction_id,
    'fund_escrow',
    jsonb_build_object('funded_at', now()),
    auth.uid()
  );
end;
$$;

-- Function to release escrow
create or replace function release_escrow(transaction_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Verify user is admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can release escrow';
  end if;

  -- Verify transaction status
  if not exists (
    select 1 from transactions
    where id = transaction_id
    and escrow_status = 'funded'
  ) then
    raise exception 'Invalid transaction status';
  end if;

  -- Update transaction and escrow status
  update transactions
  set 
    escrow_status = 'released',
    status = 'completed'
  where id = transaction_id;

  update escrow_transactions
  set 
    status = 'released',
    released_at = now()
  where transaction_id = release_escrow.transaction_id;

  -- Log the action
  insert into transaction_logs (
    transaction_id,
    action,
    details,
    performed_by
  )
  values (
    transaction_id,
    'release_escrow',
    jsonb_build_object('released_at', now()),
    auth.uid()
  );
end;
$$;

-- Function to refund escrow
create or replace function refund_escrow(transaction_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Verify user is admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can refund escrow';
  end if;

  -- Verify transaction status
  if not exists (
    select 1 from transactions
    where id = transaction_id
    and escrow_status in ('funded', 'disputed')
  ) then
    raise exception 'Invalid transaction status';
  end if;

  -- Update transaction and escrow status
  update transactions
  set 
    escrow_status = 'refunded',
    status = 'cancelled'
  where id = transaction_id;

  update escrow_transactions
  set 
    status = 'refunded',
    refunded_at = now()
  where transaction_id = refund_escrow.transaction_id;

  -- Log the action
  insert into transaction_logs (
    transaction_id,
    action,
    details,
    performed_by
  )
  values (
    transaction_id,
    'refund_escrow',
    jsonb_build_object('refunded_at', now()),
    auth.uid()
  );
end;
$$;

-- Function to create dispute
create or replace function create_dispute(
  transaction_id uuid,
  reason text,
  evidence jsonb default null
)
returns uuid
language plpgsql
security definer
as $$
declare
  new_dispute_id uuid;
begin
  -- Verify user is buyer or seller
  if not exists (
    select 1 from transactions
    where id = transaction_id
    and (buyer_id = auth.uid() or seller_id = auth.uid())
    and escrow_status = 'funded'
  ) then
    raise exception 'Unauthorized or invalid transaction status';
  end if;

  -- Create dispute
  insert into escrow_disputes (
    transaction_id,
    reported_by,
    reason,
    evidence
  )
  values (
    transaction_id,
    auth.uid(),
    reason,
    evidence
  )
  returning id into new_dispute_id;

  -- Update transaction status
  update transactions
  set escrow_status = 'disputed'
  where id = transaction_id;

  -- Log the action
  insert into transaction_logs (
    transaction_id,
    action,
    details,
    performed_by
  )
  values (
    transaction_id,
    'create_dispute',
    jsonb_build_object(
      'dispute_id', new_dispute_id,
      'reason', reason
    ),
    auth.uid()
  );

  return new_dispute_id;
end;
$$;

-- Function to resolve dispute
create or replace function resolve_dispute(
  dispute_id uuid,
  resolution text,
  action text
)
returns void
language plpgsql
security definer
as $$
declare
  transaction_id uuid;
begin
  -- Verify user is admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can resolve disputes';
  end if;

  -- Get transaction ID
  select d.transaction_id into transaction_id
  from escrow_disputes d
  where d.id = dispute_id;

  -- Update dispute
  update escrow_disputes
  set 
    status = 'resolved',
    resolution = resolve_dispute.resolution,
    resolved_by = auth.uid(),
    updated_at = now()
  where id = dispute_id;

  -- Handle resolution action
  case action
    when 'release' then
      perform release_escrow(transaction_id);
    when 'refund' then
      perform refund_escrow(transaction_id);
    else
      raise exception 'Invalid resolution action';
  end case;

  -- Log the action
  insert into transaction_logs (
    transaction_id,
    action,
    details,
    performed_by
  )
  values (
    transaction_id,
    'resolve_dispute',
    jsonb_build_object(
      'dispute_id', dispute_id,
      'resolution', resolution,
      'action', action
    ),
    auth.uid()
  );
end;
$$;

================
File: supabase/migrations/20250302123215_elastic_search.sql
================
/*
  # Add Elasticsearch integration

  1. Changes
    - Create function to sync data to Elasticsearch
    - Create triggers to automatically sync data on changes
    - Add search functions using Elasticsearch
*/

-- Create extension if needed
create extension if not exists "http" with schema extensions;

-- Create Elasticsearch configuration table
create table elasticsearch_config (
  id serial primary key,
  es_url text not null,
  api_key text,
  items_index text not null,
  last_sync timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Insert default configuration
insert into elasticsearch_config (es_url, api_key, items_index)
values ('http://localhost:9200', null, 'treasure_trove_items');

-- Create function to sync items to Elasticsearch
create or replace function sync_item_to_elasticsearch(item_id uuid)
returns void
language plpgsql
security definer
as $$
declare
  item_json jsonb;
  es_config record;
  http_response record;
begin
  -- Get Elasticsearch configuration
  select * into es_config from elasticsearch_config limit 1;

  -- Get item data with related information
  select
    jsonb_build_object(
      'id', i.id,
      'title', i.title,
      'description', i.description,
      'price', i.price,
      'condition', i.condition,
      'images', i.images,
      'category', jsonb_build_object(
        'id', c.id,
        'name', c.name,
        'slug', c.slug
      ),
      'seller', jsonb_build_object(
        'id', p.id,
        'username', p.username,
        'rating', p.rating
      ),
      'location', i.location,
      'is_active', i.is_active,
      'created_at', i.created_at
    ) into item_json
  from items i
  join categories c on i.category_id = c.id
  join profiles p on i.seller_id = p.id
  where i.id = item_id;

  -- Send to Elasticsearch
  select
    status,
    content::text
  into http_response
  from
    extensions.http(
      (es_config.es_url || '/' || es_config.items_index || '/_doc/' || item_id),
      'PUT',
      ARRAY[
        ('Content-Type', 'application/json')
      ],
      item_json::text,
      60
    );

  -- Update last sync time
  update elasticsearch_config set last_sync = now(), updated_at = now();

  -- Log result
  raise notice 'Elasticsearch sync result: % %', http_response.status, http_response.content;
end;
$$;

-- Create function to delete item from Elasticsearch
create or replace function delete_item_from_elasticsearch(item_id uuid)
returns void
language plpgsql
security definer
as $$
declare
  es_config record;
  http_response record;
begin
  -- Get Elasticsearch configuration
  select * into es_config from elasticsearch_config limit 1;

  -- Delete from Elasticsearch
  select
    status,
    content::text
  into http_response
  from
    extensions.http(
      (es_config.es_url || '/' || es_config.items_index || '/_doc/' || item_id),
      'DELETE',
      null,
      null,
      60
    );

  -- Update last sync time
  update elasticsearch_config set last_sync = now(), updated_at = now();

  -- Log result
  raise notice 'Elasticsearch delete result: % %', http_response.status, http_response.content;
end;
$$;

-- Create function to sync all items to Elasticsearch
create or replace function sync_all_items_to_elasticsearch()
returns void
language plpgsql
security definer
as $$
declare
  item_record record;
begin
  -- First, create the index if it doesn't exist
  declare
    es_config record;
    http_response record;
    index_settings jsonb := '{
      "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 0,
        "analysis": {
          "analyzer": {
            "english_analyzer": {
              "tokenizer": "standard",
              "filter": ["lowercase", "english_stemmer", "english_stop"]
            }
          },
          "filter": {
            "english_stemmer": {
              "type": "stemmer",
              "language": "english"
            },
            "english_stop": {
              "type": "stop",
              "stopwords": "_english_"
            }
          }
        }
      },
      "mappings": {
        "properties": {
          "title": {
            "type": "text",
            "analyzer": "english_analyzer",
            "fields": {
              "keyword": {
                "type": "keyword"
              }
            }
          },
          "description": {
            "type": "text",
            "analyzer": "english_analyzer"
          },
          "price": {
            "type": "float"
          },
          "condition": {
            "type": "keyword"
          },
          "category": {
            "properties": {
              "id": { "type": "keyword" },
              "name": { "type": "text" },
              "slug": { "type": "keyword" }
            }
          },
          "location": {
            "type": "text",
            "fields": {
              "keyword": {
                "type": "keyword"
              }
            }
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "date"
          }
        }
      }
    }';
  begin
    -- Get Elasticsearch configuration
    select * into es_config from elasticsearch_config limit 1;

    -- Create index with settings
    select
      status,
      content::text
    into http_response
    from
      extensions.http(
        (es_config.es_url || '/' || es_config.items_index),
        'PUT',
        ARRAY[('Content-Type', 'application/json')],
        index_settings::text,
        60
      );

    -- Log result
    raise notice 'Elasticsearch index creation: % %', http_response.status, http_response.content;
  end;

  -- Sync each active item
  for item_record in select id from items where is_active = true loop
    perform sync_item_to_elasticsearch(item_record.id);
  end loop;
end;
$$;

-- Create function to search items with Elasticsearch
create or replace function search_items_elasticsearch(
  search_query text,
  category_slug text default null,
  min_price decimal default null,
  max_price decimal default null,
  condition_filter text default null,
  sort_by text default 'newest',
  limit_val int default 20,
  offset_val int default 0
)
returns jsonb
language plpgsql
security definer
as $$
declare
  es_config record;
  search_json jsonb;
  http_response record;
begin
  -- Get Elasticsearch configuration
  select * into es_config from elasticsearch_config limit 1;

  -- Build search query
  search_json := jsonb_build_object(
    'size', limit_val,
    'from', offset_val,
    'query', jsonb_build_object(
      'bool', jsonb_build_object(
        'must', case
          when search_query is null or search_query = '' then jsonb_build_object('match_all', jsonb_build_object())
          else jsonb_build_object(
            'multi_match', jsonb_build_object(
              'query', search_query,
              'fields', jsonb_build_array('title^3', 'description', 'category.name'),
              'fuzziness', 'AUTO'
            )
          )
        end,
        'filter', jsonb_build_array(
          jsonb_build_object('term', jsonb_build_object('is_active', true))
        )
      )
    )
  );

  -- Add category filter if provided
  if category_slug is not null then
    search_json := jsonb_set(
      search_json,
      '{query,bool,filter}',
      (search_json -> 'query' -> 'bool' -> 'filter') ||
      jsonb_build_object('term', jsonb_build_object('category.slug', category_slug))
    );
  end if;

  -- Add price range filter if provided
  if min_price is not null or max_price is not null then
    declare
      range_obj jsonb := jsonb_build_object('range', jsonb_build_object('price', jsonb_build_object()));
    begin
      if min_price is not null then
        range_obj := jsonb_set(range_obj, '{range,price,gte}', to_jsonb(min_price));
      end if;

      if max_price is not null then
        range_obj := jsonb_set(range_obj, '{range,price,lte}', to_jsonb(max_price));
      end if;

      search_json := jsonb_set(
        search_json,
        '{query,bool,filter}',
        (search_json -> 'query' -> 'bool' -> 'filter') || range_obj
      );
    end;
  end if;

  -- Add condition filter if provided
  if condition_filter is not null then
    search_json := jsonb_set(
      search_json,
      '{query,bool,filter}',
      (search_json -> 'query' -> 'bool' -> 'filter') ||
      jsonb_build_object('term', jsonb_build_object('condition', condition_filter))
    );
  end if;

  -- Add sorting
  case sort_by
    when 'price-asc' then
      search_json := jsonb_set(
        search_json,
        '{sort}',
        jsonb_build_array(
          jsonb_build_object('price', jsonb_build_object('order', 'asc'))
        )
      );
    when 'price-desc' then
      search_json := jsonb_set(
        search_json,
        '{sort}',
        jsonb_build_array(
          jsonb_build_object('price', jsonb_build_object('order', 'desc'))
        )
      );
    else -- 'newest' is default
      search_json := jsonb_set(
        search_json,
        '{sort}',
        jsonb_build_array(
          jsonb_build_object('created_at', jsonb_build_object('order', 'desc'))
        )
      );
  end case;

  -- Execute search query
  select
    status,
    content::jsonb
  into http_response
  from
    extensions.http(
      (es_config.es_url || '/' || es_config.items_index || '/_search'),
      'POST',
      ARRAY[('Content-Type', 'application/json')],
      search_json::text,
      60
    );

  -- Return search results
  return http_response.content;
end;
$$;

-- Create triggers to sync items to Elasticsearch
create or replace function item_elasticsearch_trigger_func()
returns trigger
language plpgsql
security definer
as $$
begin
  if TG_OP = 'INSERT' or TG_OP = 'UPDATE' then
    if NEW.is_active then
      perform sync_item_to_elasticsearch(NEW.id);
    else
      perform delete_item_from_elasticsearch(NEW.id);
    end if;
    return NEW;
  elsif TG_OP = 'DELETE' then
    perform delete_item_from_elasticsearch(OLD.id);
    return OLD;
  end if;
  return NULL;
end;
$$;

-- Create the trigger
drop trigger if exists item_elasticsearch_trigger on items;
create trigger item_elasticsearch_trigger
after insert or update or delete on items
for each row
execute function item_elasticsearch_trigger_func();

-- Create an admin function to manually sync items
create or replace function admin_sync_elasticsearch()
returns text
language plpgsql
security definer
as $$
begin
  -- Check if user is admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can sync Elasticsearch';
  end if;

  -- Perform sync
  perform sync_all_items_to_elasticsearch();

  -- Log action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'sync_elasticsearch',
    jsonb_build_object('timestamp', now())
  );

  return 'Elasticsearch sync initiated successfully';
end;
$$;

================
File: supabase/migrations/20250302123245_ai_recommentations.sql
================
/*
  # Add AI Recommendations and Tracking

  1. Changes
    - Create recently_viewed_items table
    - Create recommended_items table
    - Create similar_items table
    - Add functions for tracking and retrieving
*/

-- Create recently viewed items table
create table recently_viewed_items (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id) on delete cascade not null,
  item_id uuid references items(id) on delete cascade not null,
  viewed_at timestamptz default now(),
  view_count int default 1,
  unique(user_id, item_id)
);

-- Create recommended items table
create table recommended_items (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id) on delete cascade not null,
  item_id uuid references items(id) on delete cascade not null,
  score decimal(5,4) not null, -- recommendation score between 0 and 1
  recommendation_type text not null check (recommendation_type in ('similar_items', 'popular', 'personalized')),
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  unique(user_id, item_id, recommendation_type)
);

-- Create similar items table
create table similar_items (
  id uuid primary key default uuid_generate_v4(),
  item_id uuid references items(id) on delete cascade not null,
  similar_item_id uuid references items(id) on delete cascade not null,
  similarity_score decimal(5,4) not null, -- similarity score between 0 and 1
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  unique(item_id, similar_item_id)
);

-- Enable RLS
alter table recently_viewed_items enable row level security;
alter table recommended_items enable row level security;
alter table similar_items enable row level security;

-- RLS Policies

-- Recently viewed items
create policy "Users can view their recently viewed items"
  on recently_viewed_items for select
  using (auth.uid() = user_id);

create policy "Users can insert their recently viewed items"
  on recently_viewed_items for insert
  with check (auth.uid() = user_id);

-- Recommended items
create policy "Users can view their recommended items"
  on recommended_items for select
  using (auth.uid() = user_id);

-- Similar items
create policy "Anyone can view similar items"
  on similar_items for select
  using (true);

-- Function to track recently viewed item
create or replace function track_viewed_item(viewed_item_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  -- Only track if user is authenticated
  if auth.uid() is null then
    return;
  end if;

  -- Insert or update recently viewed item
  insert into recently_viewed_items (user_id, item_id)
  values (auth.uid(), viewed_item_id)
  on conflict (user_id, item_id) do update
  set viewed_at = now(),
      view_count = recently_viewed_items.view_count + 1;
end;
$$;

-- Function to get recently viewed items
create or replace function get_recently_viewed_items(limit_val int default 10)
returns table (
  id uuid,
  title text,
  price decimal,
  condition text,
  images text[],
  viewed_at timestamptz,
  view_count int
)
language sql
security definer
as $$
  select
    i.id,
    i.title,
    i.price,
    i.condition,
    i.images,
    rv.viewed_at,
    rv.view_count
  from recently_viewed_items rv
  join items i on rv.item_id = i.id
  where rv.user_id = auth.uid()
    and i.is_active = true
  order by rv.viewed_at desc
  limit limit_val;
$$;

-- Function to generate similar items based on category, price, and tags
create or replace function generate_similar_items()
returns void
language plpgsql
security definer
as $$
declare
  item_record record;
begin
  -- Clear existing similar items
  delete from similar_items;

  -- Process each active item
  for item_record in select id, category_id, price, description from items where is_active = true loop
    -- Find similar items based on category and price range
    insert into similar_items (item_id, similar_item_id, similarity_score)
    select
      item_record.id,
      i.id,
      -- Calculate similarity score (higher is better)
      -- Factors: same category (0.5), price similarity (0.3), text similarity in description (0.2)
      0.5 +
      (0.3 * (1.0 - least(abs(i.price - item_record.price) / greatest(item_record.price, 1), 1.0))) +
      (0.2 * (case
        when i.description is not null and item_record.description is not null
        then similarity(i.description, item_record.description)
        else 0
      end))
    from items i
    where i.id != item_record.id
      and i.is_active = true
      and i.category_id = item_record.category_id
      -- Exclude items that are too different in price (> 50% difference)
      and abs(i.price - item_record.price) / greatest(item_record.price, 1) <= 0.5
    order by similarity_score desc
    limit 10;
  end loop;
end;
$$;

-- Function to get similar items
create or replace function get_similar_items(item_id uuid, limit_val int default 8)
returns table (
  id uuid,
  title text,
  price decimal,
  condition text,
  images text[],
  similarity_score decimal
)
language sql
security definer
as $$
  select
    i.id,
    i.title,
    i.price,
    i.condition,
    i.images,
    si.similarity_score
  from similar_items si
  join items i on si.similar_item_id = i.id
  where si.item_id = get_similar_items.item_id
    and i.is_active = true
  order by si.similarity_score desc
  limit limit_val;
$$;

-- Function to generate personalized recommendations
CREATE OR REPLACE FUNCTION generate_personalized_recommendations()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_record RECORD;
  viewed_categories jsonb;
  avg_price decimal;
  min_price decimal;
  max_price decimal;
BEGIN
  -- Clear existing personalized recommendations
  DELETE FROM recommended_items WHERE recommendation_type = 'personalized';

  -- Process each user
  FOR user_record IN SELECT id FROM profiles LOOP
    -- Get categories the user has viewed
    SELECT
      jsonb_agg(DISTINCT category_id) AS categories,
      AVG(price) AS avg,
      MIN(price) AS min,
      MAX(price) AS max
    INTO
      viewed_categories, avg_price, min_price, max_price
    FROM items i
    JOIN recently_viewed_items rv ON i.id = rv.item_id
    WHERE rv.user_id = user_record.id;

    -- Skip users with no viewing history
    IF viewed_categories IS NULL THEN
      CONTINUE;
    END IF;

    -- Find items in viewed categories and price range
    INSERT INTO recommended_items (user_id, item_id, score, recommendation_type)
    SELECT
      user_record.id,
      i.id,
      -- Calculate recommendation score
      -- Factors: matching category (0.6), price similarity (0.4)
      0.6 +
      (0.4 * (1.0 - LEAST(
        ABS(i.price - avg_price) /
        GREATEST(max_price - min_price, 1),
        1.0
      )))
    FROM items i
    WHERE i.is_active = TRUE
      -- Only include items in categories the user has viewed
      AND i.category_id IN (SELECT jsonb_array_elements_text(viewed_categories)::uuid)
      -- Exclude items the user has already viewed
      AND NOT EXISTS (
        SELECT 1 FROM recently_viewed_items rv
        WHERE rv.user_id = user_record.id AND rv.item_id = i.id
      )
      -- Exclude items the user is selling
      AND i.seller_id != user_record.id
    ORDER BY RANDOM()
    LIMIT 20
    ON CONFLICT (user_id, item_id, recommendation_type) DO UPDATE
    SET score = EXCLUDED.score,
        updated_at = now();
  END LOOP;
END;
$$;



-- Function to generate popular recommendations
CREATE OR REPLACE FUNCTION generate_popular_recommendations()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_record RECORD;
  popular_items RECORD;
BEGIN
  -- Clear existing popular recommendations
  DELETE FROM recommended_items WHERE recommendation_type = 'popular';

  -- Process each user
  FOR user_record IN SELECT id FROM profiles LOOP
    -- Assign popular items to user
    INSERT INTO recommended_items (user_id, item_id, score, recommendation_type)
    SELECT
      user_record.id,
      i.id,
      -- Score based on popularity (views)
      LEAST(i.views::decimal / 100, 1.0) AS score
    FROM items i
    WHERE i.is_active = TRUE
      -- Exclude items the user has already viewed
      AND NOT EXISTS (
        SELECT 1 FROM recently_viewed_items rv
        WHERE rv.user_id = user_record.id AND rv.item_id = i.id
      )
      -- Exclude items the user is selling
      AND i.seller_id != user_record.id
    ORDER BY i.views DESC, i.created_at DESC
    LIMIT 20
    ON CONFLICT (user_id, item_id, recommendation_type) DO UPDATE
    SET score = EXCLUDED.score,
        updated_at = now();
  END LOOP;
END;
$$;

-- Function to get personalized recommendations
create or replace function get_recommended_items(
  recommendation_type text default 'personalized',
  limit_val int default 10
)
returns table (
  id uuid,
  title text,
  price decimal,
  condition text,
  images text[],
  recommendation_score decimal
)
language sql
security definer
as $$
  select
    i.id,
    i.title,
    i.price,
    i.condition,
    i.images,
    r.score as recommendation_score
  from recommended_items r
  join items i on r.item_id = i.id
  where r.user_id = auth.uid()
    and r.recommendation_type = get_recommended_items.recommendation_type
    and i.is_active = true
  order by r.score desc
  limit limit_val;
$$;

-- Create scheduled function to generate recommendations daily
CREATE OR REPLACE FUNCTION daily_recommendation_update()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Update similar items
  PERFORM generate_similar_items();

  -- Update personalized recommendations
  PERFORM generate_personalized_recommendations();

  -- Update popular recommendations
  PERFORM generate_popular_recommendations();
END;
$$;

-- Trigger to update similar items when item is updated
create or replace function update_item_similarity_trigger()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Delete existing similarity records for this item
  delete from similar_items where item_id = NEW.id or similar_item_id = NEW.id;

  -- Find similar items for this specific item
  insert into similar_items (item_id, similar_item_id, similarity_score)
  select
    NEW.id,
    i.id,
    -- Calculate similarity score
    0.5 +
    (0.3 * (1.0 - least(abs(i.price - NEW.price) / greatest(NEW.price, 1), 1.0))) +
    (0.2 * (case
      when i.description is not null and NEW.description is not null
      then similarity(i.description, NEW.description)
      else 0
    end))
  from items i
  where i.id != NEW.id
    and i.is_active = true
    and i.category_id = NEW.category_id
    and abs(i.price - NEW.price) / greatest(NEW.price, 1) <= 0.5
  order by similarity_score desc
  limit 10;

  return NEW;
end;
$$;

-- Create the trigger
drop trigger if exists update_item_similarity on items;
create trigger update_item_similarity
after insert or update of title, description, price, condition, category_id on items
for each row
when (NEW.is_active = true)
execute function update_item_similarity_trigger();

-- Create admin function to manually trigger recommendation updates
create or replace function admin_update_recommendations()
returns text
language plpgsql
security definer
as $$
begin
  -- Check if user is admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can update recommendations';
  end if;

  -- Perform update
  perform daily_recommendation_update();

  -- Log action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'update_recommendations',
    jsonb_build_object('timestamp', now())
  );

  return 'Recommendation update initiated successfully';
end;
$$;

================
File: supabase/migrations/20250302124758_elastic_search_connection.sql
================
/*
  # Add Elasticsearch connection check function

  1. Changes
    - Create function to check Elasticsearch connection
    - Return connection status and error details
*/

-- Create function to check Elasticsearch connection
create or replace function check_elasticsearch_connection()
returns jsonb
language plpgsql
security definer
as $$
declare
  es_config record;
  http_response record;
  result jsonb;
begin
  -- Get Elasticsearch configuration
  select * into es_config from elasticsearch_config limit 1;

  -- Check if configuration exists
  if not found then
    return jsonb_build_object(
      'available', false,
      'error', 'No Elasticsearch configuration found'
    );
  end if;

  -- Attempt to ping Elasticsearch
  begin
    select
      status,
      content::jsonb as response
    into http_response
    from
      extensions.http(
        (es_config.es_url || '/_cluster/health'),
        'GET',
        ARRAY[('Content-Type', 'application/json')],
        null,
        10 -- short timeout
      );

    -- Check the response
    if http_response.status >= 200 and http_response.status < 300 then
      -- Successfully connected
      result := jsonb_build_object(
        'available', true,
        'status', http_response.status,
        'cluster_name', http_response.response->>'cluster_name',
        'status_color', http_response.response->>'status',
        'number_of_nodes', http_response.response->>'number_of_nodes'
      );
    else
      -- Error response from Elasticsearch
      result := jsonb_build_object(
        'available', false,
        'status', http_response.status,
        'error', case
          when http_response.response->>'error' is not null
          then http_response.response->>'error'
          else 'Unexpected response from Elasticsearch'
        end
      );
    end if;
  exception
    when others then
      -- Connection failed
      result := jsonb_build_object(
        'available', false,
        'error', SQLERRM
      );
  end;

  return result;
end;
$$;

-- Add index existence check function
create or replace function check_elasticsearch_index()
returns jsonb
language plpgsql
security definer
as $$
declare
  es_config record;
  http_response record;
  result jsonb;
begin
  -- Get Elasticsearch configuration
  select * into es_config from elasticsearch_config limit 1;

  -- Check if configuration exists
  if not found then
    return jsonb_build_object(
      'exists', false,
      'error', 'No Elasticsearch configuration found'
    );
  end if;

  -- Attempt to check if index exists
  begin
    select
      status,
      content::jsonb as response
    into http_response
    from
      extensions.http(
        (es_config.es_url || '/' || es_config.items_index),
        'HEAD',
        null,
        null,
        10 -- short timeout
      );

    -- Check the response
    if http_response.status = 200 then
      -- Index exists
      result := jsonb_build_object(
        'exists', true,
        'index', es_config.items_index
      );
    else
      -- Index doesn't exist
      result := jsonb_build_object(
        'exists', false,
        'index', es_config.items_index,
        'status', http_response.status
      );
    end if;
  exception
    when others then
      -- Connection failed
      result := jsonb_build_object(
        'exists', false,
        'index', es_config.items_index,
        'error', SQLERRM
      );
  end;

  return result;
end;
$$;

================
File: supabase/migrations/20250302132733_fix_ai_recommentations.sql
================
/*
  # Fix Recommendation Functions

  1. Changes
    - Fix DELETE statements in recommendation functions
    - Fix syntax errors in function declarations
    - Improve error handling
*/

-- First function with fixed DELETE
CREATE OR REPLACE FUNCTION generate_personalized_recommendations()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_record RECORD;
  viewed_categories jsonb;
  avg_price decimal;
  min_price decimal;
  max_price decimal;
BEGIN
  -- Instead of direct DELETE, use a targeted approach with a temp table
  BEGIN
    -- Safely delete personalized recommendations
    DELETE FROM recommended_items WHERE recommendation_type = 'personalized' AND id IS NOT NULL;
  EXCEPTION
    WHEN OTHERS THEN
      -- If general DELETE fails, use a cursor-based approach
      DECLARE
        rec_cursor CURSOR FOR SELECT id FROM recommended_items WHERE recommendation_type = 'personalized';
        rec_id uuid;
      BEGIN
        OPEN rec_cursor;
        LOOP
          FETCH rec_cursor INTO rec_id;
          EXIT WHEN NOT FOUND;

          -- Delete one record at a time
          DELETE FROM recommended_items WHERE id = rec_id;
        END LOOP;
        CLOSE rec_cursor;
      END;
  END;

  -- Process each user
  FOR user_record IN SELECT id FROM profiles LOOP
    -- Get categories the user has viewed
    SELECT
      jsonb_agg(DISTINCT category_id) AS categories,
      AVG(price) AS avg,
      MIN(price) AS min,
      MAX(price) AS max
    INTO
      viewed_categories, avg_price, min_price, max_price
    FROM items i
    JOIN recently_viewed_items rv ON i.id = rv.item_id
    WHERE rv.user_id = user_record.id;

    -- Skip users with no viewing history
    IF viewed_categories IS NULL THEN
      CONTINUE;
    END IF;

    -- Find items in viewed categories and price range
    INSERT INTO recommended_items (user_id, item_id, score, recommendation_type)
    SELECT
      user_record.id,
      i.id,
      -- Calculate recommendation score
      -- Factors: matching category (0.6), price similarity (0.4)
      0.6 +
      (0.4 * (1.0 - LEAST(
        ABS(i.price - avg_price) /
        GREATEST(max_price - min_price, 1),
        1.0
      ))),
      'personalized'
    FROM items i
    WHERE i.is_active = TRUE
      -- Only include items in categories the user has viewed
      AND i.category_id IN (SELECT jsonb_array_elements_text(viewed_categories)::uuid)
      -- Exclude items the user has already viewed
      AND NOT EXISTS (
        SELECT 1 FROM recently_viewed_items rv
        WHERE rv.user_id = user_record.id AND rv.item_id = i.id
      )
      -- Exclude items the user is selling
      AND i.seller_id != user_record.id
    ORDER BY RANDOM()
    LIMIT 20
    ON CONFLICT (user_id, item_id, recommendation_type) DO UPDATE
    SET score = EXCLUDED.score,
        updated_at = now();
  END LOOP;
END;
$$;

-- Second function with fixed DELETE
CREATE OR REPLACE FUNCTION generate_popular_recommendations()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_record RECORD;
BEGIN
  -- Instead of direct DELETE, use a targeted approach with exception handling
  BEGIN
    -- Safely delete popular recommendations
    DELETE FROM recommended_items WHERE recommendation_type = 'popular' AND id IS NOT NULL;
  EXCEPTION
    WHEN OTHERS THEN
      -- If general DELETE fails, use a cursor-based approach
      DECLARE
        rec_cursor CURSOR FOR SELECT id FROM recommended_items WHERE recommendation_type = 'popular';
        rec_id uuid;
      BEGIN
        OPEN rec_cursor;
        LOOP
          FETCH rec_cursor INTO rec_id;
          EXIT WHEN NOT FOUND;

          -- Delete one record at a time
          DELETE FROM recommended_items WHERE id = rec_id;
        END LOOP;
        CLOSE rec_cursor;
      END;
  END;

  -- Process each user
  FOR user_record IN SELECT id FROM profiles LOOP
    -- Assign popular items to user
    INSERT INTO recommended_items (user_id, item_id, score, recommendation_type)
    SELECT
      user_record.id,
      i.id,
      -- Score based on popularity (views)
      LEAST(i.views::decimal / 100, 1.0),
      'popular'
    FROM items i
    WHERE i.is_active = TRUE
      -- Exclude items the user has already viewed
      AND NOT EXISTS (
        SELECT 1 FROM recently_viewed_items rv
        WHERE rv.user_id = user_record.id AND rv.item_id = i.id
      )
      -- Exclude items the user is selling
      AND i.seller_id != user_record.id
    ORDER BY i.views DESC, i.created_at DESC
    LIMIT 20
    ON CONFLICT (user_id, item_id, recommendation_type) DO UPDATE
    SET score = EXCLUDED.score,
        updated_at = now();
  END LOOP;
END;
$$;

-- Function to generate similar items with fixed approach
CREATE OR REPLACE FUNCTION generate_similar_items()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  item_record RECORD;
BEGIN
  -- Instead of clearing all similar items at once, process in batches
  -- First, create a list of active items
  FOR item_record IN SELECT id, category_id, price, description FROM items WHERE is_active = TRUE LOOP
    -- Delete existing similarities for this specific item (targeted approach)
    DELETE FROM similar_items WHERE item_id = item_record.id;

    -- Find similar items based on category and price range
    INSERT INTO similar_items (item_id, similar_item_id, similarity_score)
    SELECT
      item_record.id,
      i.id,
      -- Calculate similarity score (higher is better)
      -- Factors: same category (0.5), price similarity (0.3), text similarity in description (0.2)
      0.5 +
      (0.3 * (1.0 - LEAST(ABS(i.price - item_record.price) / GREATEST(item_record.price, 1), 1.0))) +
      (0.2 * (CASE
        WHEN i.description IS NOT NULL AND item_record.description IS NOT NULL
        THEN similarity(i.description, item_record.description)
        ELSE 0
      END))
    FROM items i
    WHERE i.id != item_record.id
      AND i.is_active = TRUE
      AND i.category_id = item_record.category_id
      -- Exclude items that are too different in price (> 50% difference)
      AND ABS(i.price - item_record.price) / GREATEST(item_record.price, 1) <= 0.5
    ORDER BY similarity_score DESC
    LIMIT 10;
  END LOOP;
END;
$$;

-- Updated admin function to properly handle errors
CREATE OR REPLACE FUNCTION admin_update_recommendations()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if user is admin
  IF NOT EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND role IN ('admin', 'super_admin')
  ) THEN
    RAISE EXCEPTION 'Only admins can update recommendations';
  END IF;

  -- Perform update
  BEGIN
    -- Update similar items
    PERFORM generate_similar_items();

    -- Update personalized recommendations
    PERFORM generate_personalized_recommendations();

    -- Update popular recommendations
    PERFORM generate_popular_recommendations();
  EXCEPTION
    WHEN OTHERS THEN
      -- Log error
      INSERT INTO admin_logs (admin_id, action, details)
      VALUES (
        auth.uid(),
        'update_recommendations_failed',
        jsonb_build_object('timestamp', now(), 'error', SQLERRM)
      );

      RAISE EXCEPTION 'Failed to update recommendations: %', SQLERRM;
  END;

  -- Log successful action
  INSERT INTO admin_logs (admin_id, action, details)
  VALUES (
    auth.uid(),
    'update_recommendations',
    jsonb_build_object('timestamp', now(), 'status', 'success')
  );

  RETURN 'Recommendation update completed successfully';
END;
$$;

-- Add a test function to help diagnose database capabilities
CREATE OR REPLACE FUNCTION test_recommendations_delete()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  rec_count INTEGER;
  del_style INTEGER := 0;
  result TEXT := 'Delete test results: ';
BEGIN
  -- Check if user is admin
  IF NOT EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND role IN ('admin', 'super_admin')
  ) THEN
    RAISE EXCEPTION 'Only admins can run tests';
  END IF;

  -- Count personalized recommendations
  SELECT COUNT(*) INTO rec_count FROM recommended_items WHERE recommendation_type = 'personalized';
  result := result || 'Found ' || rec_count || ' personalized recommendations. ';

  -- Try different delete approaches and see which one works
  BEGIN
    -- Approach 1: Basic DELETE with column conditions
    DELETE FROM recommended_items WHERE recommendation_type = 'personalized' AND id IS NOT NULL;
    del_style := 1;
  EXCEPTION
    WHEN OTHERS THEN
      BEGIN
        -- Approach 2: DELETE with a subquery
        DELETE FROM recommended_items
        WHERE id IN (SELECT id FROM recommended_items WHERE recommendation_type = 'personalized');
        del_style := 2;
      EXCEPTION
        WHEN OTHERS THEN
          -- Approach 3: Use a cursor-based approach
          DECLARE
            rec_cursor CURSOR FOR SELECT id FROM recommended_items WHERE recommendation_type = 'personalized';
            rec_id uuid;
          BEGIN
            OPEN rec_cursor;
            LOOP
              FETCH rec_cursor INTO rec_id;
              EXIT WHEN NOT FOUND;

              -- Delete one record at a time
              DELETE FROM recommended_items WHERE id = rec_id;
            END LOOP;
            CLOSE rec_cursor;
            del_style := 3;
          END;
      END;
  END;

  -- Check how many recommendations are left
  SELECT COUNT(*) INTO rec_count FROM recommended_items WHERE recommendation_type = 'personalized';
  result := result || 'After delete (style ' || del_style || '): ' || rec_count || ' recommendations remain.';

  RETURN result;
END;
$$;

================
File: supabase/migrations/20250302133117_fix_pg_trgm.sql
================
/*
  # Fix Missing Similarity Function

  1. Changes
    - Enable pg_trgm extension if not already enabled
    - Add fallback similarity function if extension can't be enabled
    - Update functions that use similarity to handle fallbacks
*/

-- Try to enable the pg_trgm extension which provides similarity function
DO $$
BEGIN
  CREATE EXTENSION IF NOT EXISTS pg_trgm;
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'Could not enable pg_trgm extension: %', SQLERRM;
END $$;

-- Create a fallback similarity function if the extension isn't available
-- This basic version returns 0 for different strings and 1 for identical strings
CREATE OR REPLACE FUNCTION safe_similarity(a text, b text)
RETURNS float4
LANGUAGE plpgsql
IMMUTABLE
AS $$
BEGIN
  -- Check if the pg_trgm extension's similarity function exists
  BEGIN
    -- Try to use the real similarity function from pg_trgm
    RETURN similarity(a, b);
  EXCEPTION
    WHEN undefined_function THEN
      -- Fallback to a basic implementation
      IF a IS NULL OR b IS NULL THEN
        RETURN 0;
      ELSIF a = b THEN
        RETURN 1;
      ELSE
        -- Simple word overlap calculation (basic fallback)
        DECLARE
          words_a text[];
          words_b text[];
          common_count int := 0;
          total_words int;
        BEGIN
          -- Convert to lowercase and split into words
          words_a := regexp_split_to_array(lower(a), '\s+');
          words_b := regexp_split_to_array(lower(b), '\s+');

          -- Count common words (simplified approach)
          FOR i IN 1..array_length(words_a, 1) LOOP
            FOR j IN 1..array_length(words_b, 1) LOOP
              IF words_a[i] = words_b[j] AND length(words_a[i]) > 2 THEN
                common_count := common_count + 1;
                EXIT;
              END IF;
            END LOOP;
          END LOOP;

          total_words := array_length(words_a, 1) + array_length(words_b, 1);
          IF total_words > 0 THEN
            RETURN (2.0 * common_count / total_words)::float4;
          ELSE
            RETURN 0;
          END IF;
        END;
      END IF;
  END;
END;
$$;

-- Update the generate_similar_items function to use safe_similarity
CREATE OR REPLACE FUNCTION generate_similar_items()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  item_record RECORD;
BEGIN
  -- Process in batches
  FOR item_record IN SELECT id, category_id, price, description FROM items WHERE is_active = TRUE LOOP
    -- Delete existing similarities for this specific item
    DELETE FROM similar_items WHERE item_id = item_record.id;

    -- Find similar items based on category and price range
    INSERT INTO similar_items (item_id, similar_item_id, similarity_score)
    SELECT
      item_record.id,
      i.id,
      -- Calculate similarity score (higher is better)
      -- Factors: same category (0.5), price similarity (0.3), text similarity in description (0.2)
      0.5 +
      (0.3 * (1.0 - LEAST(ABS(i.price - item_record.price) / GREATEST(item_record.price, 1), 1.0))) +
      (0.2 * (CASE
        WHEN i.description IS NOT NULL AND item_record.description IS NOT NULL
        THEN safe_similarity(i.description, item_record.description)
        ELSE 0
      END))
    FROM items i
    WHERE i.id != item_record.id
      AND i.is_active = TRUE
      AND i.category_id = item_record.category_id
      -- Exclude items that are too different in price (> 50% difference)
      AND ABS(i.price - item_record.price) / GREATEST(item_record.price, 1) <= 0.5
    ORDER BY 4 DESC
    LIMIT 10;
  END LOOP;
END;
$$;

-- Update the item similarity trigger to use safe_similarity
CREATE OR REPLACE FUNCTION update_item_similarity_trigger()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Delete existing similarity records for this item
  DELETE FROM similar_items WHERE item_id = NEW.id OR similar_item_id = NEW.id;

  -- Find similar items for this specific item
  INSERT INTO similar_items (item_id, similar_item_id, similarity_score)
  SELECT
    NEW.id,
    i.id,
    -- Calculate similarity score
    0.5 +
    (0.3 * (1.0 - LEAST(ABS(i.price - NEW.price) / GREATEST(NEW.price, 1), 1.0))) +
    (0.2 * (CASE
      WHEN i.description IS NOT NULL AND NEW.description IS NOT NULL
      THEN safe_similarity(i.description, NEW.description)
      ELSE 0
    END))
  FROM items i
  WHERE i.id != NEW.id
    AND i.is_active = TRUE
    AND i.category_id = NEW.category_id
    AND ABS(i.price - NEW.price) / GREATEST(NEW.price, 1) <= 0.5
  ORDER BY 3 DESC
  LIMIT 10;

  RETURN NEW;
END;
$$;

-- Update the daily recommendation update to handle errors better
CREATE OR REPLACE FUNCTION daily_recommendation_update()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Run each step individually so if one fails, others can still run
  BEGIN
    -- Update similar items
    PERFORM generate_similar_items();
  EXCEPTION
    WHEN OTHERS THEN
      RAISE WARNING 'Error updating similar items: %', SQLERRM;
  END;

  BEGIN
    -- Update personalized recommendations
    PERFORM generate_personalized_recommendations();
  EXCEPTION
    WHEN OTHERS THEN
      RAISE WARNING 'Error updating personalized recommendations: %', SQLERRM;
  END;

  BEGIN
    -- Update popular recommendations
    PERFORM generate_popular_recommendations();
  EXCEPTION
    WHEN OTHERS THEN
      RAISE WARNING 'Error updating popular recommendations: %', SQLERRM;
  END;
END;
$$;

-- Update admin function to better handle errors
CREATE OR REPLACE FUNCTION admin_update_recommendations()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  errors text := '';
  success_count int := 0;
BEGIN
  -- Check if user is admin
  IF NOT EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND role IN ('admin', 'super_admin')
  ) THEN
    RAISE EXCEPTION 'Only admins can update recommendations';
  END IF;

  -- Run each step individually to collect errors
  BEGIN
    -- Update similar items
    PERFORM generate_similar_items();
    success_count := success_count + 1;
  EXCEPTION
    WHEN OTHERS THEN
      errors := errors || 'Error updating similar items: ' || SQLERRM || '. ';
  END;

  BEGIN
    -- Update personalized recommendations
    PERFORM generate_personalized_recommendations();
    success_count := success_count + 1;
  EXCEPTION
    WHEN OTHERS THEN
      errors := errors || 'Error updating personalized recommendations: ' || SQLERRM || '. ';
  END;

  BEGIN
    -- Update popular recommendations
    PERFORM generate_popular_recommendations();
    success_count := success_count + 1;
  EXCEPTION
    WHEN OTHERS THEN
      errors := errors || 'Error updating popular recommendations: ' || SQLERRM || '. ';
  END;

  -- Log action
  INSERT INTO admin_logs (admin_id, action, details)
  VALUES (
    auth.uid(),
    'update_recommendations',
    jsonb_build_object(
      'timestamp', now(),
      'success_count', success_count,
      'errors', errors
    )
  );

  IF success_count = 3 THEN
    RETURN 'All recommendation updates completed successfully';
  ELSIF success_count > 0 THEN
    RETURN success_count || ' of 3 recommendation updates completed. Errors: ' || errors;
  ELSE
    RETURN 'Recommendation update failed: ' || errors;
  END IF;
END;
$$;

================
File: supabase/migrations/20250302133350_fix_position_error.sql
================
/*
  # Fix Order By Position Error

  1. Changes
    - Fix ORDER BY position reference in generate_similar_items function
*/

-- Update the generate_similar_items function to fix the ORDER BY position
CREATE OR REPLACE FUNCTION generate_similar_items()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  item_record RECORD;
BEGIN
  -- Process in batches
  FOR item_record IN SELECT id, category_id, price, description FROM items WHERE is_active = TRUE LOOP
    -- Delete existing similarities for this specific item
    DELETE FROM similar_items WHERE item_id = item_record.id;

    -- Find similar items based on category and price range
    INSERT INTO similar_items (item_id, similar_item_id, similarity_score)
    SELECT
      item_record.id,
      i.id,
      -- Calculate similarity score (higher is better)
      -- Factors: same category (0.5), price similarity (0.3), text similarity in description (0.2)
      0.5 +
      (0.3 * (1.0 - LEAST(ABS(i.price - item_record.price) / GREATEST(item_record.price, 1), 1.0))) +
      (0.2 * (CASE
        WHEN i.description IS NOT NULL AND item_record.description IS NOT NULL
        THEN safe_similarity(i.description, item_record.description)
        ELSE 0
      END)) AS similarity_score
    FROM items i
    WHERE i.id != item_record.id
      AND i.is_active = TRUE
      AND i.category_id = item_record.category_id
      -- Exclude items that are too different in price (> 50% difference)
      AND ABS(i.price - item_record.price) / GREATEST(item_record.price, 1) <= 0.5
    ORDER BY similarity_score DESC  -- Fixed: Use column name instead of position
    LIMIT 10;
  END LOOP;
END;
$$;

================
File: supabase/migrations/20250302140520_add_follow_sellers.sql
================
-- File: supabase/migrations/20250302140000_add_follow_sellers.sql
/*
  Add support for following sellers
*/

-- Create followers table
create table seller_followers (
  id uuid primary key default uuid_generate_v4(),
  follower_id uuid references profiles(id) on delete cascade not null,
  seller_id uuid references profiles(id) on delete cascade not null,
  created_at timestamptz default now(),
  unique(follower_id, seller_id)
);

alter table seller_followers enable row level security;

-- Policies
create policy "Users can view their follows"
  on seller_followers for select
  using (auth.uid() = follower_id);

create policy "Users can follow sellers"
  on seller_followers for insert
  with check (auth.uid() = follower_id);

create policy "Users can unfollow sellers"
  on seller_followers for delete
  using (auth.uid() = follower_id);

-- Function to get followed sellers
create or replace function get_followed_sellers()
returns table (
  id uuid,
  username text,
  rating numeric,
  created_at timestamptz
)
language sql
security definer
as $$
  select
    p.id,
    p.username,
    p.rating,
    sf.created_at
  from seller_followers sf
  join profiles p on p.id = sf.seller_id
  where sf.follower_id = auth.uid()
  order by sf.created_at desc;
$$;

================
File: supabase/migrations/20250302140802_add_saved_searches.sql
================
-- File: supabase/migrations/20250302141000_add_saved_searches.sql
/*
  Add support for saved searches and notifications
*/

-- Create saved searches table
create table saved_searches (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id) on delete cascade not null,
  name text not null,
  query text not null,
  filters jsonb not null default '{}'::jsonb,
  notify_email boolean default false,
  notify_push boolean default false,
  created_at timestamptz default now(),
  last_notified timestamptz
);

alter table saved_searches enable row level security;

-- Policies
create policy "Users can manage their saved searches"
  on saved_searches for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- Function to check for new matches and notify
create or replace function notify_saved_searches()
returns void
language plpgsql
security definer
as $$
declare
  search record;
  new_items bigint;
begin
  for search in select * from saved_searches where notify_email or notify_push loop
    -- Count new items matching search since last notification
    select count(*)
    into new_items
    from items i
    where i.created_at > coalesce(search.last_notified, 'epoch'::timestamptz)
      and i.is_active = true
      and (
        search.query = '' or
        (i.title ilike '%' || search.query || '%' or i.description ilike '%' || search.query || '%')
      )
      and (
        search.filters->>'category' is null or
        i.category_id = (search.filters->>'category')::uuid
      )
      and (
        search.filters->>'minPrice' is null or
        i.price >= (search.filters->>'minPrice')::numeric
      )
      and (
        search.filters->>'maxPrice' is null or
        i.price <= (search.filters->>'maxPrice')::numeric
      );

    if new_items > 0 then
      -- Update last_notified
      update saved_searches
      set last_notified = now()
      where id = search.id;

      -- Trigger notifications
      if search.notify_email then
        perform net.email_notify(
          search.user_id,
          'New items for your saved search: ' || search.name,
          new_items || ' new items match your search "' || search.name || '"'
        );
      end if;

      if search.notify_push then
        perform send_push_notification(
          search.user_id,
          'New items available',
          new_items || ' new items match your search "' || search.name || '"',
          '/browse?q=' || search.query
        );
      end if;
    end if;
  end loop;
end;
$$;

================
File: supabase/migrations/20250302140945_add_collections.sql
================
-- File: supabase/migrations/20250302142000_add_collections.sql
/*
  Add support for user collections
*/

-- Create collections table
create table collections (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id) on delete cascade not null,
  name text not null,
  description text,
  is_public boolean default false,
  created_at timestamptz default now()
);

-- Create collection items table
create table collection_items (
  id uuid primary key default uuid_generate_v4(),
  collection_id uuid references collections(id) on delete cascade not null,
  item_id uuid references items(id) on delete cascade not null,
  added_at timestamptz default now(),
  unique(collection_id, item_id)
);

alter table collections enable row level security;
alter table collection_items enable row level security;

-- Policies
create policy "Users can manage their collections"
  on collections for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

create policy "Public collections are viewable"
  on collections for select
  using (is_public = true);

create policy "Users can manage their collection items"
  on collection_items for all
  using (
    exists (
      select 1 from collections
      where collections.id = collection_items.collection_id
      and collections.user_id = auth.uid()
    )
  );

create policy "Public collection items are viewable"
  on collection_items for select
  using (
    exists (
      select 1 from collections
      where collections.id = collection_items.collection_id
      and collections.is_public = true
    )
  );

================
File: supabase/migrations/20250302141125_add_category_management.sql
================
-- File: supabase/migrations/20250302143000_add_category_management.sql
/*
  Enhance category management for admin
*/

-- Add slug unique constraint if not exists
alter table categories
add constraint categories_slug_unique unique (slug);

-- Function to manage categories
create or replace function admin_manage_category(
  category_id uuid,
  category_name text,
  category_slug text,
  parent_id uuid default null,
  action text default 'create'
)
returns text
language plpgsql
security definer
as $$
begin
  -- Check if user is admin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can manage categories';
  end if;

  if action = 'create' then
    insert into categories (name, slug, parent_id)
    values (category_name, category_slug, parent_id);
    return 'Category created successfully';
  elsif action = 'update' then
    update categories
    set name = category_name,
        slug = category_slug,
        parent_id = parent_id,
        updated_at = now()
    where id = category_id;
    return 'Category updated successfully';
  elsif action = 'delete' then
    delete from categories where id = category_id;
    return 'Category deleted successfully';
  else
    raise exception 'Invalid action specified';
  end if;

  -- Log action
  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'manage_category_' || action,
    jsonb_build_object(
      'category_id', category_id,
      'name', category_name,
      'slug', category_slug,
      'parent_id', parent_id
    )
  );
end;
$$;

================
File: supabase/migrations/20250302153606_fix_admin_manage_category_ambiguity.sql
================
-- File: supabase/migrations/20250302143003_rename_parent_id_in_admin_manage_category.sql
/*
  Drop and recreate admin_manage_category to rename parent_id to p_parent_id
  to resolve ambiguity with categories.parent_id column
*/

-- Drop the existing function
drop function if exists admin_manage_category(uuid, text, text, uuid, text);

-- Recreate the function with renamed parameter
create function admin_manage_category(
  category_id uuid,
  category_name text,
  category_slug text,
  p_parent_id uuid default null, -- Renamed from parent_id
  action text default 'create'
)
returns text
language plpgsql
security definer
as $$
begin
  if not exists (
    select 1 from profiles
    where id = auth.uid()
    and role in ('admin', 'super_admin')
  ) then
    raise exception 'Only admins can manage categories';
  end if;

  if action = 'create' then
    insert into categories (name, slug, parent_id)
    values (category_name, category_slug, p_parent_id);
    return 'Category created successfully';
  elsif action = 'update' then
    update categories
    set name = category_name,
        slug = category_slug,
        parent_id = p_parent_id, -- Use renamed parameter
        updated_at = now()
    where id = category_id;
    return 'Category updated successfully';
  elsif action = 'delete' then
    delete from categories where id = category_id;
    return 'Category deleted successfully';
  else
    raise exception 'Invalid action specified';
  end if;

  insert into admin_logs (admin_id, action, details)
  values (
    auth.uid(),
    'manage_category_' || action,
    jsonb_build_object(
      'category_id', category_id,
      'name', category_name,
      'slug', category_slug,
      'parent_id', p_parent_id -- Log the renamed parameter
    )
  );
end;
$$;

================
File: supabase/migrations/20250302154350_add_updated_at_to_categories.sql
================
-- File: supabase/migrations/20250302143004_add_updated_at_to_categories.sql
/*
  Add updated_at column to categories table to fix admin_manage_category error
*/

-- Add the updated_at column
alter table categories
add column if not exists updated_at timestamptz;

-- Optional: Set existing rows to have a default updated_at (e.g., created_at)
update categories
set updated_at = created_at
where updated_at is null;

================
File: supabase/migrations/20250302160147_add_wish_list_items.sql
================
-- Migration: Add Wish List Feature

-- Create wish list items table
CREATE TABLE wish_list_items (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  item_id uuid REFERENCES items(id) ON DELETE CASCADE NOT NULL,
  added_at timestamptz DEFAULT now(),
  UNIQUE(user_id, item_id)
);

-- Enable RLS
ALTER TABLE wish_list_items ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Users can manage their wish list items"
  ON wish_list_items FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Function to check if an item is in a user's wish list
CREATE OR REPLACE FUNCTION is_in_wishlist(item_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1 FROM wish_list_items
    WHERE user_id = auth.uid()
    AND item_id = is_in_wishlist.item_id
  );
$$;

-- Function to add item to wish list
CREATE OR REPLACE FUNCTION add_to_wishlist(item_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO wish_list_items (user_id, item_id)
  VALUES (auth.uid(), item_id)
  ON CONFLICT (user_id, item_id) DO NOTHING;
END;
$$;

-- Function to remove item from wish list
CREATE OR REPLACE FUNCTION remove_from_wishlist(item_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  DELETE FROM wish_list_items
  WHERE user_id = auth.uid()
  AND item_id = remove_from_wishlist.item_id;
END;
$$;

-- Function to get user's wish list items
CREATE OR REPLACE FUNCTION get_wishlist_items(limit_val int DEFAULT 50, offset_val int DEFAULT 0)
RETURNS TABLE (
  id uuid,
  title text,
  price decimal,
  condition text,
  images text[],
  added_at timestamptz
)
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT
    i.id,
    i.title,
    i.price,
    i.condition,
    i.images,
    wl.added_at
  FROM wish_list_items wl
  JOIN items i ON wl.item_id = i.id
  WHERE wl.user_id = auth.uid()
    AND i.is_active = true
  ORDER BY wl.added_at DESC
  LIMIT limit_val
  OFFSET offset_val;
$$;

================
File: supabase/migrations/20250302160432_add_price_history.sql
================
-- Migration: Add Price Drop Alerts Feature

-- Create price history table to track price changes
CREATE TABLE price_history (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  item_id uuid REFERENCES items(id) ON DELETE CASCADE NOT NULL,
  old_price decimal(10,2) NOT NULL,
  new_price decimal(10,2) NOT NULL,
  changed_at timestamptz DEFAULT now()
);

-- Create price alerts table
CREATE TABLE price_alerts (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  item_id uuid REFERENCES items(id) ON DELETE CASCADE NOT NULL,
  target_price decimal(10,2), -- Optional target price (if null, alert on any drop)
  created_at timestamptz DEFAULT now(),
  last_notified_at timestamptz,
  notify_email boolean DEFAULT true,
  notify_push boolean DEFAULT true,
  UNIQUE(user_id, item_id)
);

-- Enable RLS
ALTER TABLE price_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE price_alerts ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Admin can manage price history"
  ON price_history FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE id = auth.uid()
      AND role IN ('admin', 'super_admin')
    )
  );

CREATE POLICY "Users can view price history"
  ON price_history FOR SELECT
  USING (true);

CREATE POLICY "Users can manage their price alerts"
  ON price_alerts FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Function to check if an item has a price alert
CREATE OR REPLACE FUNCTION has_price_alert(item_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1 FROM price_alerts
    WHERE user_id = auth.uid()
    AND item_id = has_price_alert.item_id
  );
$$;

-- Function to toggle price alert
CREATE OR REPLACE FUNCTION toggle_price_alert(
  item_id uuid,
  target_price decimal DEFAULT NULL,
  notify_email boolean DEFAULT true,
  notify_push boolean DEFAULT true
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  alert_exists boolean;
BEGIN
  SELECT EXISTS (
    SELECT 1 FROM price_alerts
    WHERE user_id = auth.uid()
    AND item_id = toggle_price_alert.item_id
  ) INTO alert_exists;

  IF alert_exists THEN
    -- Remove existing alert
    DELETE FROM price_alerts
    WHERE user_id = auth.uid()
    AND item_id = toggle_price_alert.item_id;
    RETURN false;
  ELSE
    -- Create new alert
    INSERT INTO price_alerts (
      user_id,
      item_id,
      target_price,
      notify_email,
      notify_push
    )
    VALUES (
      auth.uid(),
      toggle_price_alert.item_id,
      toggle_price_alert.target_price,
      toggle_price_alert.notify_email,
      toggle_price_alert.notify_push
    );
    RETURN true;
  END IF;
END;
$$;

-- Function to get user's price alerts
CREATE OR REPLACE FUNCTION get_price_alerts(limit_val int DEFAULT 50, offset_val int DEFAULT 0)
RETURNS TABLE (
  id uuid,
  item_id uuid,
  title text,
  current_price decimal,
  target_price decimal,
  images text[],
  created_at timestamptz,
  notify_email boolean,
  notify_push boolean
)
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT
    pa.id,
    i.id as item_id,
    i.title,
    i.price as current_price,
    pa.target_price,
    i.images,
    pa.created_at,
    pa.notify_email,
    pa.notify_push
  FROM price_alerts pa
  JOIN items i ON pa.item_id = i.id
  WHERE pa.user_id = auth.uid()
    AND i.is_active = true
  ORDER BY pa.created_at DESC
  LIMIT limit_val
  OFFSET offset_val;
$$;

-- Trigger to track price changes
CREATE OR REPLACE FUNCTION track_price_change()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Only track actual price changes
  IF OLD.price != NEW.price THEN
    INSERT INTO price_history (
      item_id,
      old_price,
      new_price
    )
    VALUES (
      NEW.id,
      OLD.price,
      NEW.price
    );
  END IF;
  RETURN NEW;
END;
$$;

-- Attach trigger to items table
DROP TRIGGER IF EXISTS items_price_change_trigger ON items;
CREATE TRIGGER items_price_change_trigger
AFTER UPDATE OF price ON items
FOR EACH ROW
EXECUTE FUNCTION track_price_change();

-- Function to process price drop notifications
CREATE OR REPLACE FUNCTION process_price_drop_notifications()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  price_change record;
  alert record;
BEGIN
  -- Get recent price drops (last 24 hours)
  FOR price_change IN
    SELECT ph.item_id, i.title, ph.old_price, ph.new_price
    FROM price_history ph
    JOIN items i ON ph.item_id = i.id
    WHERE ph.changed_at > now() - interval '24 hours'
      AND ph.new_price < ph.old_price -- Price dropped
      AND i.is_active = true
  LOOP
    -- Find users who have alerts for this item
    FOR alert IN
      SELECT pa.id, pa.user_id, pa.target_price, pa.notify_email, pa.notify_push
      FROM price_alerts pa
      WHERE pa.item_id = price_change.item_id
        AND (
          pa.target_price IS NULL -- Alert on any drop
          OR price_change.new_price <= pa.target_price -- Price reached target
        )
        AND (
          pa.last_notified_at IS NULL -- Never notified
          OR pa.last_notified_at < now() - interval '7 days' -- Don't spam notifications
        )
    LOOP
      -- Create notification
      INSERT INTO notifications (
        user_id,
        title,
        content,
        read
      )
      VALUES (
        alert.user_id,
        'Price Drop Alert',
        format(
          'Price dropped for "%s" from $%s to $%s',
          price_change.title,
          price_change.old_price,
          price_change.new_price
        ),
        false
      );

      -- Update last_notified_at
      UPDATE price_alerts
      SET last_notified_at = now()
      WHERE id = alert.id;

      -- Send email notification
      IF alert.notify_email THEN
        -- Use your email notification system here
        -- This is a placeholder for the actual implementation
        PERFORM 1;
      END IF;

      -- Send push notification
      IF alert.notify_push THEN
        -- Use your push notification system here
        -- This is a placeholder for the actual implementation
        PERFORM 1;
      END IF;
    END LOOP;
  END LOOP;
END;
$$;

================
File: supabase/migrations/20250302160910_add_Back-in-Stock.sql
================
-- Migration: Add Back-in-Stock Notifications Feature

-- Add stock_status to items table
ALTER TABLE items
ADD COLUMN stock_status text NOT NULL DEFAULT 'in_stock'
CHECK (stock_status IN ('in_stock', 'low_stock', 'out_of_stock'));

-- Create stock alerts table
CREATE TABLE stock_alerts (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  item_id uuid REFERENCES items(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  last_notified_at timestamptz,
  notify_email boolean DEFAULT true,
  notify_push boolean DEFAULT true,
  UNIQUE(user_id, item_id)
);

-- Create stock change history table
CREATE TABLE stock_history (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  item_id uuid REFERENCES items(id) ON DELETE CASCADE NOT NULL,
  old_status text NOT NULL,
  new_status text NOT NULL,
  changed_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE stock_alerts ENABLE ROW LEVEL SECURITY;
ALTER TABLE stock_history ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Users can manage their stock alerts"
  ON stock_alerts FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view stock history"
  ON stock_history FOR SELECT
  USING (true);

CREATE POLICY "Admin can manage stock history"
  ON stock_history FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE id = auth.uid()
      AND role IN ('admin', 'super_admin')
    )
  );

-- Function to check if an item has a stock alert
CREATE OR REPLACE FUNCTION has_stock_alert(item_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1 FROM stock_alerts
    WHERE user_id = auth.uid()
    AND item_id = has_stock_alert.item_id
  );
$$;

-- Function to toggle stock alert
CREATE OR REPLACE FUNCTION toggle_stock_alert(
  item_id uuid,
  notify_email boolean DEFAULT true,
  notify_push boolean DEFAULT true
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  alert_exists boolean;
  item_status text;
BEGIN
  -- Check if alert already exists
  SELECT EXISTS (
    SELECT 1 FROM stock_alerts
    WHERE user_id = auth.uid()
    AND item_id = toggle_stock_alert.item_id
  ) INTO alert_exists;

  -- Get item status
  SELECT stock_status INTO item_status
  FROM items
  WHERE id = toggle_stock_alert.item_id;

  IF alert_exists THEN
    -- Remove existing alert
    DELETE FROM stock_alerts
    WHERE user_id = auth.uid()
    AND item_id = toggle_stock_alert.item_id;
    RETURN false;
  ELSE
    -- Check if item is out of stock (only allow alerts for out of stock items)
    IF item_status != 'out_of_stock' THEN
      RAISE EXCEPTION 'Cannot set alert for in-stock item';
    END IF;

    -- Create new alert
    INSERT INTO stock_alerts (
      user_id,
      item_id,
      notify_email,
      notify_push
    )
    VALUES (
      auth.uid(),
      toggle_stock_alert.item_id,
      toggle_stock_alert.notify_email,
      toggle_stock_alert.notify_push
    );
    RETURN true;
  END IF;
END;
$$;

-- Function to get user's stock alerts
CREATE OR REPLACE FUNCTION get_stock_alerts(limit_val int DEFAULT 50, offset_val int DEFAULT 0)
RETURNS TABLE (
  id uuid,
  item_id uuid,
  title text,
  stock_status text,
  price decimal,
  images text[],
  created_at timestamptz,
  notify_email boolean,
  notify_push boolean
)
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT
    sa.id,
    i.id as item_id,
    i.title,
    i.stock_status,
    i.price,
    i.images,
    sa.created_at,
    sa.notify_email,
    sa.notify_push
  FROM stock_alerts sa
  JOIN items i ON sa.item_id = i.id
  WHERE sa.user_id = auth.uid()
    AND i.is_active = true
  ORDER BY sa.created_at DESC
  LIMIT limit_val
  OFFSET offset_val;
$$;

-- Trigger to track stock status changes
CREATE OR REPLACE FUNCTION track_stock_change()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Only track actual status changes
  IF OLD.stock_status != NEW.stock_status THEN
    INSERT INTO stock_history (
      item_id,
      old_status,
      new_status
    )
    VALUES (
      NEW.id,
      OLD.stock_status,
      NEW.stock_status
    );
  END IF;
  RETURN NEW;
END;
$$;

-- Attach trigger to items table
DROP TRIGGER IF EXISTS items_stock_change_trigger ON items;
CREATE TRIGGER items_stock_change_trigger
AFTER UPDATE OF stock_status ON items
FOR EACH ROW
EXECUTE FUNCTION track_stock_change();

-- Function to process back-in-stock notifications
CREATE OR REPLACE FUNCTION process_stock_notifications()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  stock_change record;
  alert record;
BEGIN
  -- Get recent back-in-stock items (last 24 hours)
  FOR stock_change IN
    SELECT sh.item_id, i.title, sh.old_status, sh.new_status
    FROM stock_history sh
    JOIN items i ON sh.item_id = i.id
    WHERE sh.changed_at > now() - interval '24 hours'
      AND sh.old_status = 'out_of_stock'
      AND sh.new_status = 'in_stock'
      AND i.is_active = true
  LOOP
    -- Find users who have alerts for this item
    FOR alert IN
      SELECT sa.id, sa.user_id, sa.notify_email, sa.notify_push
      FROM stock_alerts sa
      WHERE sa.item_id = stock_change.item_id
        AND (
          sa.last_notified_at IS NULL -- Never notified
          OR sa.last_notified_at < now() - interval '7 days' -- Don't spam notifications
        )
    LOOP
      -- Create notification
      INSERT INTO notifications (
        user_id,
        title,
        content,
        read
      )
      VALUES (
        alert.user_id,
        'Back in Stock Alert',
        format(
          '"%s" is back in stock!',
          stock_change.title
        ),
        false
      );

      -- Update last_notified_at
      UPDATE stock_alerts
      SET last_notified_at = now()
      WHERE id = alert.id;

      -- Send email notification
      IF alert.notify_email THEN
        -- Use your email notification system here
        -- This is a placeholder for the actual implementation
        PERFORM 1;
      END IF;

      -- Send push notification
      IF alert.notify_push THEN
        -- Use your push notification system here
        -- This is a placeholder for the actual implementation
        PERFORM 1;
      END IF;
    END LOOP;
  END LOOP;
END;
$$;

-- Update item functions to handle stock status
CREATE OR REPLACE FUNCTION update_item_stock_status(
  item_id uuid,
  new_stock_status text
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if user is the seller or admin
  IF NOT EXISTS (
    SELECT 1 FROM items i
    WHERE i.id = update_item_stock_status.item_id
    AND (
      i.seller_id = auth.uid()
      OR EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND role IN ('admin', 'super_admin')
      )
    )
  ) THEN
    RAISE EXCEPTION 'Not authorized to update item stock status';
  END IF;

  -- Update stock status
  UPDATE items
  SET
    stock_status = new_stock_status,
    updated_at = now()
  WHERE id = update_item_stock_status.item_id;
END;
$$;

================
File: supabase/migrations/20250302161629_add_saved_searches.sql
================
-- Migration: Add Enhanced Saved Searches with Alerts

-- Modify saved_searches table to add alert functionality
ALTER TABLE saved_searches
ADD COLUMN alert_enabled boolean DEFAULT false,
ADD COLUMN last_alert_sent timestamptz,
ADD COLUMN alert_frequency text DEFAULT 'daily'
  CHECK (alert_frequency IN ('daily', 'weekly', 'instant'));

-- Create function to get matching items for a saved search
CREATE OR REPLACE FUNCTION get_saved_search_matches(
  search_id uuid,
  since_timestamp timestamptz DEFAULT NULL
)
RETURNS TABLE (
  id uuid,
  title text,
  price decimal,
  condition text,
  images text[],
  created_at timestamptz
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  search_record record;
  query_condition text := '';
  filter_conditions text := '';
BEGIN
  -- Get the saved search
  SELECT * INTO search_record FROM saved_searches WHERE id = search_id;

  -- If no search found, return empty set
  IF search_record IS NULL THEN
    RETURN;
  END IF;

  -- Build the query condition for text search
  IF search_record.query != '' THEN
    query_condition := format(
      'AND (title ILIKE %L OR description ILIKE %L)',
      '%' || search_record.query || '%',
      '%' || search_record.query || '%'
    );
  END IF;

  -- Build filter conditions from JSON
  IF search_record.filters ? 'category' AND search_record.filters->>'category' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND category_id = (SELECT id FROM categories WHERE slug = %L)',
      search_record.filters->>'category'
    );
  END IF;

  IF search_record.filters ? 'minPrice' AND search_record.filters->>'minPrice' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND price >= %s',
      search_record.filters->>'minPrice'
    );
  END IF;

  IF search_record.filters ? 'maxPrice' AND search_record.filters->>'maxPrice' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND price <= %s',
      search_record.filters->>'maxPrice'
    );
  END IF;

  IF search_record.filters ? 'condition' AND search_record.filters->>'condition' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND condition = %L',
      search_record.filters->>'condition'
    );
  END IF;

  -- Add timestamp condition if provided
  IF since_timestamp IS NOT NULL THEN
    filter_conditions := filter_conditions || format(
      ' AND created_at > %L',
      since_timestamp
    );
  END IF;

  -- Build and execute the final query
  RETURN QUERY EXECUTE format(
    'SELECT id, title, price, condition, images, created_at FROM items
     WHERE is_active = true %s %s
     ORDER BY created_at DESC',
    query_condition,
    filter_conditions
  );
END;
$$;

-- Function to process saved search alerts
CREATE OR REPLACE FUNCTION process_saved_search_alerts()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  search_record record;
  matches_count integer;
  alert_window timestamptz;
  user_id uuid;
BEGIN
  -- Process each saved search with alerts enabled
  FOR search_record IN
    SELECT ss.*, p.id as user_id
    FROM saved_searches ss
    JOIN profiles p ON ss.user_id = p.id
    WHERE ss.alert_enabled = true
      AND (
        ss.last_alert_sent IS NULL
        OR (
          ss.alert_frequency = 'daily' AND ss.last_alert_sent < now() - interval '1 day'
          OR ss.alert_frequency = 'weekly' AND ss.last_alert_sent < now() - interval '7 days'
        )
      )
  LOOP
    user_id := search_record.user_id;

    -- Determine time window based on alert frequency and last alert
    IF search_record.last_alert_sent IS NULL THEN
      -- For new alerts, check items from the last 7 days
      alert_window := now() - interval '7 days';
    ELSE
      -- For existing alerts, check items since the last alert
      alert_window := search_record.last_alert_sent;
    END IF;

    -- Count new matches
    SELECT count(*) INTO matches_count
    FROM get_saved_search_matches(search_record.id, alert_window);

    -- If there are new matches, send a notification
    IF matches_count > 0 THEN
      -- Create notification
      INSERT INTO notifications (
        user_id,
        title,
        content,
        read
      )
      VALUES (
        user_id,
        'New Items for Your Saved Search',
        format(
          'Found %s new item(s) matching your saved search "%s"',
          matches_count,
          search_record.name
        ),
        false
      );

      -- Update last_alert_sent
      UPDATE saved_searches
      SET last_alert_sent = now()
      WHERE id = search_record.id;

      -- Send email notification
      IF search_record.notify_email THEN
        -- Use your email notification system here
        -- This is a placeholder for the actual implementation
        PERFORM 1;
      END IF;

      -- Send push notification
      IF search_record.notify_push THEN
        -- Use your push notification system here
        -- This is a placeholder for the actual implementation
        PERFORM 1;
      END IF;
    END IF;
  END LOOP;
END;
$$;

-- Function to toggle saved search alerts
CREATE OR REPLACE FUNCTION toggle_saved_search_alert(
  search_id uuid,
  enable boolean DEFAULT true,
  frequency text DEFAULT 'daily'
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if the user owns the saved search
  IF NOT EXISTS (
    SELECT 1 FROM saved_searches
    WHERE id = search_id
    AND user_id = auth.uid()
  ) THEN
    RAISE EXCEPTION 'Not authorized to modify this saved search';
  END IF;

  -- Update the saved search
  UPDATE saved_searches
  SET
    alert_enabled = enable,
    alert_frequency = frequency,
    last_alert_sent = CASE WHEN enable THEN NULL ELSE last_alert_sent END
  WHERE id = search_id;
END;
$$;

-- Function to get saved searches with extra info about alerts
CREATE OR REPLACE FUNCTION get_saved_searches_with_alerts()
RETURNS TABLE (
  id uuid,
  name text,
  query text,
  filters jsonb,
  notify_email boolean,
  notify_push boolean,
  alert_enabled boolean,
  alert_frequency text,
  created_at timestamptz,
  match_count bigint
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    ss.id,
    ss.name,
    ss.query,
    ss.filters,
    ss.notify_email,
    ss.notify_push,
    ss.alert_enabled,
    ss.alert_frequency,
    ss.created_at,
    (SELECT count(*) FROM get_saved_search_matches(ss.id))
  FROM saved_searches ss
  WHERE ss.user_id = auth.uid()
  ORDER BY ss.created_at DESC;
END;
$$;

================
File: supabase/migrations/20250302163455_get_saved_searches_with_alerts.sql
================
-- Fix for the ambiguous "id" column error
-- Drop the existing function if it exists
DROP FUNCTION IF EXISTS get_saved_searches_with_alerts();

-- Create the updated function with explicit column references
CREATE OR REPLACE FUNCTION get_saved_searches_with_alerts()
RETURNS TABLE (
  id uuid,
  name text,
  query text,
  filters jsonb,
  notify_email boolean,
  notify_push boolean,
  alert_enabled boolean,
  alert_frequency text,
  created_at timestamptz,
  match_count bigint
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    ss.id,
    ss.name,
    ss.query,
    ss.filters,
    ss.notify_email,
    ss.notify_push,
    ss.alert_enabled,
    ss.alert_frequency,
    ss.created_at,
    (SELECT count(*) FROM get_saved_search_matches(ss.id))
  FROM saved_searches ss
  WHERE ss.user_id = auth.uid()
  ORDER BY ss.created_at DESC;
END;
$$;

================
File: supabase/migrations/20250302164205_get_saved_search_matches.sql
================
-- First, fix get_saved_search_matches function which is causing issues

DROP FUNCTION IF EXISTS get_saved_search_matches(uuid, timestamptz);

CREATE OR REPLACE FUNCTION get_saved_search_matches(
  search_id uuid,
  since_timestamp timestamptz DEFAULT NULL
)
RETURNS TABLE (
  item_id uuid,
  item_title text,
  item_price decimal,
  item_condition text,
  item_images text[],
  item_created_at timestamptz
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  search_record record;
  query_condition text := '';
  filter_conditions text := '';
BEGIN
  -- Get the saved search
  SELECT * INTO search_record FROM saved_searches WHERE saved_searches.id = search_id;

  -- If no search found, return empty set
  IF search_record IS NULL THEN
    RETURN;
  END IF;

  -- Build the query condition for text search
  IF search_record.query != '' THEN
    query_condition := format(
      'AND (items.title ILIKE %L OR items.description ILIKE %L)',
      '%' || search_record.query || '%',
      '%' || search_record.query || '%'
    );
  END IF;

  -- Build filter conditions from JSON
  IF search_record.filters ? 'category' AND search_record.filters->>'category' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.category_id = (SELECT categories.id FROM categories WHERE categories.slug = %L)',
      search_record.filters->>'category'
    );
  END IF;

  IF search_record.filters ? 'minPrice' AND search_record.filters->>'minPrice' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.price >= %s',
      search_record.filters->>'minPrice'
    );
  END IF;

  IF search_record.filters ? 'maxPrice' AND search_record.filters->>'maxPrice' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.price <= %s',
      search_record.filters->>'maxPrice'
    );
  END IF;

  IF search_record.filters ? 'condition' AND search_record.filters->>'condition' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.condition = %L',
      search_record.filters->>'condition'
    );
  END IF;

  -- Add timestamp condition if provided
  IF since_timestamp IS NOT NULL THEN
    filter_conditions := filter_conditions || format(
      ' AND items.created_at > %L',
      since_timestamp
    );
  END IF;

  -- Build and execute the final query with explicitly named return columns
  RETURN QUERY EXECUTE format(
    'SELECT
       items.id AS item_id,
       items.title AS item_title,
       items.price AS item_price,
       items.condition AS item_condition,
       items.images AS item_images,
       items.created_at AS item_created_at
     FROM items
     WHERE items.is_active = true %s %s
     ORDER BY items.created_at DESC',
    query_condition,
    filter_conditions
  );
END;
$$;

-- Now fix the get_saved_searches_with_alerts function
DROP FUNCTION IF EXISTS get_saved_searches_with_alerts();

CREATE OR REPLACE FUNCTION get_saved_searches_with_alerts()
RETURNS TABLE (
  id uuid,
  name text,
  query text,
  filters jsonb,
  notify_email boolean,
  notify_push boolean,
  alert_enabled boolean,
  alert_frequency text,
  created_at timestamptz,
  match_count bigint
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    ss.id,
    ss.name,
    ss.query,
    ss.filters,
    ss.notify_email,
    ss.notify_push,
    ss.alert_enabled,
    ss.alert_frequency,
    ss.created_at,
    (SELECT count(*) FROM get_saved_search_matches(ss.id)) AS match_count
  FROM saved_searches ss
  WHERE ss.user_id = auth.uid()
  ORDER BY ss.created_at DESC;
END;
$$;

================
File: supabase/migrations/20250302164428_get_saved_search_matches.sql
================
-- Fix get_saved_search_matches function preserving original column names

DROP FUNCTION IF EXISTS get_saved_search_matches(uuid, timestamptz);

CREATE OR REPLACE FUNCTION get_saved_search_matches(
  search_id uuid,
  since_timestamp timestamptz DEFAULT NULL
)
RETURNS TABLE (
  id uuid,
  title text,
  price decimal,
  condition text,
  images text[],
  created_at timestamptz
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  search_record record;
  query_condition text := '';
  filter_conditions text := '';
BEGIN
  -- Get the saved search
  SELECT * INTO search_record FROM saved_searches WHERE saved_searches.id = search_id;

  -- If no search found, return empty set
  IF search_record IS NULL THEN
    RETURN;
  END IF;

  -- Build the query condition for text search
  IF search_record.query != '' THEN
    query_condition := format(
      'AND (items.title ILIKE %L OR items.description ILIKE %L)',
      '%' || search_record.query || '%',
      '%' || search_record.query || '%'
    );
  END IF;

  -- Build filter conditions from JSON
  IF search_record.filters ? 'category' AND search_record.filters->>'category' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.category_id = (SELECT categories.id FROM categories WHERE categories.slug = %L)',
      search_record.filters->>'category'
    );
  END IF;

  IF search_record.filters ? 'minPrice' AND search_record.filters->>'minPrice' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.price >= %s',
      search_record.filters->>'minPrice'
    );
  END IF;

  IF search_record.filters ? 'maxPrice' AND search_record.filters->>'maxPrice' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.price <= %s',
      search_record.filters->>'maxPrice'
    );
  END IF;

  IF search_record.filters ? 'condition' AND search_record.filters->>'condition' != '' THEN
    filter_conditions := filter_conditions || format(
      ' AND items.condition = %L',
      search_record.filters->>'condition'
    );
  END IF;

  -- Add timestamp condition if provided
  IF since_timestamp IS NOT NULL THEN
    filter_conditions := filter_conditions || format(
      ' AND items.created_at > %L',
      since_timestamp
    );
  END IF;

  -- Build and execute the final query - keeping original column names but making references explicit
  RETURN QUERY EXECUTE format(
    'SELECT
       items.id AS id,
       items.title AS title,
       items.price AS price,
       items.condition AS condition,
       items.images AS images,
       items.created_at AS created_at
     FROM items
     WHERE items.is_active = true %s %s
     ORDER BY items.created_at DESC',
    query_condition,
    filter_conditions
  );
END;
$$;

-- Fix the get_saved_searches_with_alerts function
DROP FUNCTION IF EXISTS get_saved_searches_with_alerts();

CREATE OR REPLACE FUNCTION get_saved_searches_with_alerts()
RETURNS TABLE (
  id uuid,
  name text,
  query text,
  filters jsonb,
  notify_email boolean,
  notify_push boolean,
  alert_enabled boolean,
  alert_frequency text,
  created_at timestamptz,
  match_count bigint
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    ss.id,
    ss.name,
    ss.query,
    ss.filters,
    ss.notify_email,
    ss.notify_push,
    ss.alert_enabled,
    ss.alert_frequency,
    ss.created_at,
    (SELECT count(*) FROM get_saved_search_matches(ss.id)) AS match_count
  FROM saved_searches ss
  WHERE ss.user_id = auth.uid()
  ORDER BY ss.created_at DESC;
END;
$$;

================
File: supabase/migrations/20250302164909_get_saved_search_matches.sql
================
-- Drop existing functions
DROP FUNCTION IF EXISTS get_saved_search_matches(uuid, timestamptz);
DROP FUNCTION IF EXISTS get_saved_searches_with_alerts();

-- Create a simpler function to count matching items
CREATE OR REPLACE FUNCTION count_matching_items(
  search_query text DEFAULT '',
  search_filters jsonb DEFAULT '{}'::jsonb,
  since_time timestamptz DEFAULT NULL
)
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  total_count bigint;
  query_text text := 'SELECT COUNT(*) FROM items WHERE is_active = true';
BEGIN
  -- Add query condition
  IF search_query != '' THEN
    query_text := query_text || format(
      ' AND (title ILIKE %L OR description ILIKE %L)',
      '%' || search_query || '%',
      '%' || search_query || '%'
    );
  END IF;

  -- Add category filter
  IF search_filters ? 'category' AND search_filters->>'category' != '' THEN
    query_text := query_text || format(
      ' AND category_id = (SELECT id FROM categories WHERE slug = %L)',
      search_filters->>'category'
    );
  END IF;

  -- Add price filters
  IF search_filters ? 'minPrice' AND search_filters->>'minPrice' != '' THEN
    query_text := query_text || format(
      ' AND price >= %s',
      search_filters->>'minPrice'
    );
  END IF;

  IF search_filters ? 'maxPrice' AND search_filters->>'maxPrice' != '' THEN
    query_text := query_text || format(
      ' AND price <= %s',
      search_filters->>'maxPrice'
    );
  END IF;

  -- Add condition filter
  IF search_filters ? 'condition' AND search_filters->>'condition' != '' THEN
    query_text := query_text || format(
      ' AND condition = %L',
      search_filters->>'condition'
    );
  END IF;

  -- Add time filter if provided
  IF since_time IS NOT NULL THEN
    query_text := query_text || format(
      ' AND created_at > %L',
      since_time
    );
  END IF;

  -- Execute the query
  EXECUTE query_text INTO total_count;
  RETURN total_count;
END;
$$;

-- Create the get_saved_searches_with_alerts function - simpler version
CREATE OR REPLACE FUNCTION get_saved_searches_with_alerts()
RETURNS TABLE (
  id uuid,
  name text,
  query text,
  filters jsonb,
  notify_email boolean,
  notify_push boolean,
  alert_enabled boolean,
  alert_frequency text,
  created_at timestamptz,
  match_count bigint
)
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT
    ss.id,
    ss.name,
    ss.query,
    ss.filters,
    ss.notify_email,
    ss.notify_push,
    ss.alert_enabled,
    ss.alert_frequency,
    ss.created_at,
    count_matching_items(ss.query, ss.filters) AS match_count
  FROM saved_searches ss
  WHERE ss.user_id = auth.uid()
  ORDER BY ss.created_at DESC;
$$;

-- Create a function to get matching items without dynamic SQL
CREATE OR REPLACE FUNCTION get_matching_items(
  search_id uuid,
  max_results integer DEFAULT 50,
  since_time timestamptz DEFAULT NULL
)
RETURNS SETOF items
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  search_record record;
  query_text text;
BEGIN
  -- Get the saved search
  SELECT * INTO search_record FROM saved_searches WHERE id = search_id;

  -- If no search found, return empty set
  IF search_record IS NULL THEN
    RETURN;
  END IF;

  -- Start building the query
  query_text := 'SELECT * FROM items WHERE is_active = true';

  -- Add query condition
  IF search_record.query != '' THEN
    query_text := query_text || format(
      ' AND (title ILIKE %L OR description ILIKE %L)',
      '%' || search_record.query || '%',
      '%' || search_record.query || '%'
    );
  END IF;

  -- Add category filter
  IF search_record.filters ? 'category' AND search_record.filters->>'category' != '' THEN
    query_text := query_text || format(
      ' AND category_id = (SELECT id FROM categories WHERE slug = %L)',
      search_record.filters->>'category'
    );
  END IF;

  -- Add price filters
  IF search_record.filters ? 'minPrice' AND search_record.filters->>'minPrice' != '' THEN
    query_text := query_text || format(
      ' AND price >= %s',
      search_record.filters->>'minPrice'
    );
  END IF;

  IF search_record.filters ? 'maxPrice' AND search_record.filters->>'maxPrice' != '' THEN
    query_text := query_text || format(
      ' AND price <= %s',
      search_record.filters->>'maxPrice'
    );
  END IF;

  -- Add condition filter
  IF search_record.filters ? 'condition' AND search_record.filters->>'condition' != '' THEN
    query_text := query_text || format(
      ' AND condition = %L',
      search_record.filters->>'condition'
    );
  END IF;

  -- Add time filter if provided
  IF since_time IS NOT NULL THEN
    query_text := query_text || format(
      ' AND created_at > %L',
      since_time
    );
  END IF;

  -- Add order and limit
  query_text := query_text || format(
    ' ORDER BY created_at DESC LIMIT %s',
    max_results
  );

  -- Return the query results
  RETURN QUERY EXECUTE query_text;
END;
$$;

================
File: supabase/migrations/20250302170800_fix_http.sql
================
-- Fix for the HTTP extension error
-- This implementation provides placeholders for functions that would normally use HTTP calls

-- First, check if the HTTP extension exists and create it if possible
DO $$
BEGIN
  CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA extensions;
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'Unable to create HTTP extension - creating fallback functions instead';
END $$;

-- Fallback implementation for Elasticsearch functions
-- These will work without making actual HTTP calls

-- Create or replace check_elasticsearch_connection function
CREATE OR REPLACE FUNCTION check_elasticsearch_connection()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Return a simulated response
  RETURN jsonb_build_object(
    'available', false,
    'status', 'disabled',
    'error', 'HTTP extension not available - using database fallback'
  );
END;
$$;

-- Create or replace test_elasticsearch_connection function
CREATE OR REPLACE FUNCTION test_elasticsearch_connection()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Return a simulated response
  RETURN jsonb_build_object(
    'available', false,
    'status', 'disabled',
    'error', 'HTTP extension not available - using database fallback'
  );
END;
$$;

-- Create or replace sync_item_to_elasticsearch function
CREATE OR REPLACE FUNCTION sync_item_to_elasticsearch(item_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Just log the request in a table instead of making HTTP call
  -- First create a log table if it doesn't exist
  CREATE TABLE IF NOT EXISTS elasticsearch_sync_log (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    item_id uuid NOT NULL,
    operation text NOT NULL,
    created_at timestamptz DEFAULT now()
  );

  -- Record the sync attempt
  INSERT INTO elasticsearch_sync_log (item_id, operation)
  VALUES (item_id, 'sync');

  -- Log message
  RAISE NOTICE 'Item % sync to Elasticsearch simulated (HTTP extension not available)', item_id;
END;
$$;

-- Create or replace delete_item_from_elasticsearch function
CREATE OR REPLACE FUNCTION delete_item_from_elasticsearch(item_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Just log the request in a table instead of making HTTP call
  CREATE TABLE IF NOT EXISTS elasticsearch_sync_log (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    item_id uuid NOT NULL,
    operation text NOT NULL,
    created_at timestamptz DEFAULT now()
  );

  -- Record the delete attempt
  INSERT INTO elasticsearch_sync_log (item_id, operation)
  VALUES (item_id, 'delete');

  -- Log message
  RAISE NOTICE 'Item % delete from Elasticsearch simulated (HTTP extension not available)', item_id;
END;
$$;

-- Create fallback function for searchItems that uses database search instead
CREATE OR REPLACE FUNCTION searchItems(
  query text DEFAULT '',
  filters jsonb DEFAULT '{}'::jsonb
)
RETURNS SETOF items
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  query_text text;
BEGIN
  -- Start building the query
  query_text := 'SELECT * FROM items WHERE is_active = true';

  -- Add query condition
  IF query != '' THEN
    query_text := query_text || format(
      ' AND (title ILIKE %L OR description ILIKE %L)',
      '%' || query || '%',
      '%' || query || '%'
    );
  END IF;

  -- Add category filter
  IF filters ? 'category' AND filters->>'category' != '' THEN
    query_text := query_text || format(
      ' AND category_id = (SELECT id FROM categories WHERE slug = %L)',
      filters->>'category'
    );
  END IF;

  -- Add price filters
  IF filters ? 'minPrice' AND filters->>'minPrice' != '' THEN
    query_text := query_text || format(
      ' AND price >= %s',
      filters->>'minPrice'
    );
  END IF;

  IF filters ? 'maxPrice' AND filters->>'maxPrice' != '' THEN
    query_text := query_text || format(
      ' AND price <= %s',
      filters->>'maxPrice'
    );
  END IF;

  -- Add condition filter
  IF filters ? 'condition' AND filters->>'condition' != '' THEN
    query_text := query_text || format(
      ' AND condition = %L',
      filters->>'condition'
    );
  END IF;

  -- Add order and limit
  query_text := query_text || ' ORDER BY created_at DESC LIMIT 50';

  -- Return the query results
  RETURN QUERY EXECUTE query_text;
END;
$$;

-- Create or replace admin_sync_elasticsearch function
CREATE OR REPLACE FUNCTION admin_sync_elasticsearch()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if user is admin
  IF NOT EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND role IN ('admin', 'super_admin')
  ) THEN
    RAISE EXCEPTION 'Only admins can sync Elasticsearch';
  END IF;

  -- Log action
  INSERT INTO admin_logs (admin_id, action, details)
  VALUES (
    auth.uid(),
    'sync_elasticsearch',
    jsonb_build_object(
      'timestamp', now(),
      'status', 'simulated',
      'info', 'HTTP extension not available'
    )
  );

  RETURN 'Elasticsearch sync simulated (HTTP extension not available)';
END;
$$;

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local

================
File: supabase/config.toml
================
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "treasure-trove"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/MY_FUNCTION_NAME/*.html" ]

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
*.env
*.env.local
*.env.development.local
*.env.test.local
*.env.production.local
*.env.prod

================
File: elastic-search.md
================
# Elasticsearch Setup Guide

This guide provides instructions for setting up Elasticsearch for the Treasure Trove marketplace application.

## Prerequisites

- Docker installed on your development or production server
- Supabase project with the migration scripts already applied
- Admin access to both Supabase and the server where Elasticsearch will run

## Step 1: Deploy Elasticsearch with Docker

You can run Elasticsearch in a Docker container:

```bash
# Create a directory for Elasticsearch data
mkdir -p ~/elasticsearch/data

# Set correct permissions
chmod 777 ~/elasticsearch/data

# Run Elasticsearch container
docker run -d \
  --name elasticsearch \
  -p 9200:9200 \
  -p 9300:9300 \
  -e "discovery.type=single-node" \
  -e "xpack.security.enabled=false" \
  -v ~/elasticsearch/data:/usr/share/elasticsearch/data \
  elasticsearch:8.12.0
```

## Step 2: Enable the HTTP Extension in Supabase

The Elasticsearch integration requires the HTTP extension in Supabase to make external API calls. You need to enable this in your Supabase project:

1. Go to your Supabase dashboard
2. Open the SQL Editor
3. Run the following SQL to enable the HTTP extension:

```sql
-- Enable the HTTP extension if not already enabled
create extension if not exists "http" with schema extensions;
```

## Step 3: Configure Elasticsearch Connection

Update the Elasticsearch configuration in your Supabase database:

```sql
-- Update Elasticsearch configuration with your actual Elasticsearch URL
update elasticsearch_config
set es_url = 'http://your-elasticsearch-host:9200'
where id = 1;
```

Replace `your-elasticsearch-host` with the actual hostname or IP address where Elasticsearch is running.

## Step 4: Initial Data Sync

Use the admin panel in your application to trigger the initial sync of data to Elasticsearch:

1. Log in as an admin user
2. Navigate to Admin Dashboard
3. Select the "Admin Tools" tab
4. Click on "Sync Elasticsearch"

Alternatively, you can run the sync function directly from the Supabase SQL Editor:

```sql
-- Trigger initial Elasticsearch sync
select admin_sync_elasticsearch();
```

## Step 5: Configure Scheduled Updates (Optional)

For production environments, you may want to set up a scheduled job to periodically sync all data:

### Using Supabase Edge Functions (Recommended)

1. Create a new Edge Function in Supabase
2. Set up a scheduled CRON job to run this function daily
3. In your function, make an authenticated API call to trigger the sync

Example Edge Function:

```typescript
import { createClient } from '@supabase/supabase-js'

// Setup Supabase client (use service role for admin functions)
const supabaseAdmin = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
)

// Handler for scheduled invoke
export const handler = async () => {
  try {
    const { data, error } = await supabaseAdmin.rpc('admin_sync_elasticsearch')
    
    if (error) throw error
    
    return new Response(JSON.stringify({
      success: true,
      message: 'Elasticsearch sync completed successfully'
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200
    })
  } catch (error) {
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
}
```

Then schedule this function to run daily using the Supabase dashboard.

## Step 6: Testing the Integration

1. Create or update some items in your marketplace
2. Verify logs to ensure the items are being indexed in Elasticsearch
3. Test the search functionality to confirm results are appearing correctly

## Troubleshooting

### Common Issues

1. **Connection Refused**: Ensure Elasticsearch is running and accessible from your Supabase instance
2. **CORS Errors**: Check your Elasticsearch configuration to allow requests from your Supabase instance
3. **Missing Data**: If items don't appear in search results, check:
   - Elasticsearch logs for indexing errors
   - Supabase logs for sync function errors
   - Item's `is_active` flag (only active items are indexed)

### Debugging Tools

- Use the Elasticsearch REST API to manually check indexes: `GET http://localhost:9200/treasure_trove_items/_search`
- Check Supabase logs for any errors in the sync functions
- Use the Admin dashboard to manually trigger syncs and check for errors

================
File: eslint.config.js
================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "treasure-trove",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.7",
    "clsx": "^2.1.0",
    "date-fns": "^3.3.1",
    "lodash": "^4.17.21",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.51.0",
    "react-router-dom": "^6.22.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^2.2.1",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/lodash": "^4.14.202",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README-New-Features.md
================
# Treasure Trove New Features Documentation

This document outlines the new features added to the Treasure Trove marketplace application and provides implementation details for each feature.

## Table of Contents

1. [Wish Lists](#wish-lists)
2. [Price Drop Alerts](#price-drop-alerts)
3. [Back-in-Stock Notifications](#back-in-stock-notifications)
4. [Favorite Searches with New Item Alerts](#favorite-searches-with-new-item-alerts)
5. [Scheduled Tasks](#scheduled-tasks)

---

## Wish Lists

### Description
The Wish List feature allows users to save items they're interested in to a dedicated wishlist for easier access in the future.

### Implementation Details

#### Database Tables
- `wish_list_items`: Stores the relationship between users and their saved items
  - `id`: UUID primary key
  - `user_id`: Reference to user profile
  - `item_id`: Reference to saved item
  - `added_at`: Timestamp when item was added to wishlist

#### Components
- `WishListButton`: A reusable button component that toggles an item's presence in the user's wishlist
- `WishlistCount`: Displays the count of items in wishlist with a badge in the navbar
- `Wishlist`: Page component that displays all items in a user's wishlist

#### Functions
- `add_to_wishlist`: Database function to add an item to a user's wishlist
- `remove_from_wishlist`: Database function to remove an item from a user's wishlist
- `is_in_wishlist`: Database function to check if an item is in a user's wishlist
- `get_wishlist_items`: Database function to retrieve a user's wishlist items

### Usage
Users can:
- Add/remove items from their wishlist with a single click
- View their wishlist count in the navigation bar
- Access their full wishlist from the user dropdown menu
- Remove items from the wishlist page

---

## Price Drop Alerts

### Description
Price Drop Alerts allow users to set alerts for items they're interested in and receive notifications when the price drops.

### Implementation Details

#### Database Tables
- `price_history`: Tracks price changes for items
  - `id`: UUID primary key
  - `item_id`: Reference to the item
  - `old_price`: Previous price
  - `new_price`: Updated price
  - `changed_at`: Timestamp of the price change
- `price_alerts`: Stores user price alert preferences
  - `id`: UUID primary key
  - `user_id`: Reference to user profile
  - `item_id`: Reference to the item
  - `target_price`: Optional target price (alert triggers when price drops to or below this value)
  - `notify_email`, `notify_push`: Notification preferences
  - `last_notified_at`: Timestamp of last notification

#### Components
- `PriceAlertButton`: A button component that allows users to set and configure price alerts
- `PriceHistory`: Displays the price history of an item with a chart
- `PriceAlerts`: Page component that displays all of a user's price alerts

#### Functions
- `toggle_price_alert`: Database function to create or remove a price alert
- `has_price_alert`: Database function to check if a user has set a price alert for an item
- `get_price_alerts`: Database function to retrieve a user's price alerts
- `track_price_change`: Trigger function that records price changes
- `process_price_drop_notifications`: Database function that processes and sends price drop notifications

### Usage
Users can:
- Set price alerts with custom target prices
- Choose notification preferences (email, push)
- View price history with a visual chart
- Manage all their price alerts in one place

---

## Back-in-Stock Notifications

### Description
Back-in-Stock Notifications allow users to get alerts when out-of-stock items become available again.

### Implementation Details

#### Database Tables
- `stock_history`: Tracks stock status changes for items
  - `id`: UUID primary key
  - `item_id`: Reference to the item
  - `old_status`: Previous stock status
  - `new_status`: Updated stock status
  - `changed_at`: Timestamp of the status change
- `stock_alerts`: Stores user stock alert preferences
  - `id`: UUID primary key
  - `user_id`: Reference to user profile
  - `item_id`: Reference to the item
  - `notify_email`, `notify_push`: Notification preferences
  - `last_notified_at`: Timestamp of last notification
  
#### Components
- `StockAlertButton`: A button component for setting stock alerts on out-of-stock items
- `StockStatus`: Displays the current stock status of an item
- `UpdateStockStatus`: Interface for sellers to update item stock status
- `StockAlerts`: Page component that displays all of a user's stock alerts

#### Functions
- `toggle_stock_alert`: Database function to create or remove a stock alert
- `has_stock_alert`: Database function to check if a user has set a stock alert for an item
- `get_stock_alerts`: Database function to retrieve a user's stock alerts
- `track_stock_change`: Trigger function that records stock status changes
- `process_stock_notifications`: Database function that processes and sends back-in-stock notifications
- `update_item_stock_status`: Database function for sellers to update item stock status

### Usage
Users can:
- Set alerts for out-of-stock items
- Choose notification preferences (email, push)
- Manage all their stock alerts in one place
- Sellers can update the stock status of their items

---

## Favorite Searches with New Item Alerts

### Description
This feature allows users to save their search queries and filters, and optionally receive alerts when new items matching their criteria are listed.

### Implementation Details

#### Database Tables
- Enhanced `saved_searches` table with new fields:
  - `alert_enabled`: Boolean flag to enable/disable alerts
  - `alert_frequency`: How often to check for new items ('daily', 'weekly', 'instant')
  - `last_alert_sent`: Timestamp of the last alert

#### Components
- `EnhancedSavedSearches`: An improved version of the saved searches component with alert capabilities
- `SavedSearchAlerts`: Page component that displays all saved searches with alert configuration

#### Functions
- `get_saved_search_matches`: Database function to find items that match a saved search
- `process_saved_search_alerts`: Database function that processes and sends alerts for new matching items
- `toggle_saved_search_alert`: Database function to enable/disable alerts and set frequency
- `get_saved_searches_with_alerts`: Database function to retrieve saved searches with alert information

### Usage
Users can:
- Save search criteria with a single click
- Enable alerts for saved searches to be notified of new matching items
- Configure alert frequency (daily, weekly)
- Manage all their saved searches and alerts in one place

---

## Scheduled Tasks

### Description
A Supabase Edge Function that runs on a schedule to process various notifications and alerts.

### Implementation Details

#### Components
- `scheduled-tasks.ts`: A Supabase Edge Function that processes all notification types

#### Setup
1. Create the Edge Function in your Supabase project
2. Set up a CRON job to run the function on a schedule (e.g., daily at midnight)
3. Configure environment variables for Supabase access

#### Features Processed
- Price drop notifications
- Back-in-stock notifications
- Saved search alerts

### Integration Notes
- All notification processing is done server-side to ensure reliability
- The function uses the Supabase service role for administrative access
- Error handling ensures that failures in one notification type don't affect others

---

## Installation Instructions

### Database Migrations
Run the following SQL migrations in order:
1. `wishlist_migration.sql`
2. `price_alerts_migration.sql`
3. `stock_alerts_migration.sql`
4. `search_alerts_migration.sql`

### Frontend Integration
1. Add all new components to your project
2. Update existing components as specified in the implementation
3. Add new routes to App.tsx
4. Update the navigation to include links to new features

### Scheduled Tasks
1. Deploy the edge function to your Supabase project
2. Set up a CRON job to run daily (recommended: midnight)
3. Verify that notifications are being processed correctly

---

## Testing

After implementation, test the following user flows:
1. Add and remove items from wishlist
2. Set price alerts with different target prices
3. Set stock alerts for out-of-stock items
4. Save searches and configure alerts
5. Verify that sellers can update stock status
6. Simulate price drops, stock changes, and new items to test notifications

================
File: README.md
================
# treasure-trove

[Edit in StackBlitz next generation editor ⚡️](https://stackblitz.com/~/github.com/rylxes/treasure-trove)

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});



================================================================
End of Codebase
================================================================
